[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d NSync"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-W12-2/main[image:https://travis-ci.org/CS2113-AY1819S1-W12-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-W12-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-W12-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* NSync is a utility application targeted at NUS students, to simplify some of their daily routines such as arranging a common timeslot with friends, and downloading their notes from IVLE."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* As a Java application, it has a Graphical User Interface (GUI) but most of the user interactions happen through a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* This application is built on the sample application https://github.com/nusCS2113-AY1819S1/addressbook-level4[Address Book (Level 4)]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "leegengyu": 7
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    compile files(\u0027chromeDriversGradle/\u0027)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027de.dynamicfiles.projects.gradle.plugins\u0027, name: \u0027javafx-gradle-plugin\u0027, version: \u00278.5.1\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027org.seleniumhq.selenium\u0027, name: \u0027selenium-java\u0027, version: \u00272.41.0\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027commons-io\u0027, name: \u0027commons-io\u0027, version: \u00272.6\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    implementation group: \u0027de.dynamicfiles.projects.gradle.plugins\u0027, name: \u0027javafx-gradle-plugin\u0027, version: \u00278.5.1\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    archiveName \u003d \u0027NSync.jar\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \u0027site-name\u0027: \u0027NSync\u0027,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2113-AY1819S1-W12-2/main\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 7,
      "-": 241,
      "leegengyu": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "NSync was developed by the https://github.com/CS2113-AY1819S1-W12-2[W12-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lee Geng Yu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/leegengyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} [https://github.com/leegengyu[github]] [\u003c\u003cleegengyu#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Low Wei Jie, Oscar"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/auskure.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/auskure[github]] [\u003c\u003causkure#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hu Yiqing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/bearperson1.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/BearPerson1[github]] [\u003c\u003cBearPerson1#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Lim Zhi Hui Alden"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::https://github.com/CS2113-AY1819S1-W12-2/main/blob/master/docs/images/e0201942.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/e0201942[github]] [\u003c\u003ce0201942#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "leegengyu": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-W12-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Email us* : You can also reach us at `cs2113t.ay1819s1.w12.2 [at] gmail.com`"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "leegengyu": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d NSync - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W12-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "By: `Team W12-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Structure of the UI Component"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiDeveloperGuide.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`StatusBarFooter`, `MergedTimetablePanel` etc. All these, including the `MainWindow`, inherit from the abstract"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`UiPart` class."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Structure of the Logic Component"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Structure of the Model Component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "image::modelDeveloperGuide.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "auskure"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list changes."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "auskure"
        },
        "content": "* exposes an unmodifiable `ReadOnlyNotesDownloaded\u003cSet\u003e` that can be \u0027observed\u0027 e.g. the Logic can be bound to this"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "auskure"
        },
        "content": "list so that the Logic can detect what notes have been downloaded by the user."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "auskure"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"] +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "auskure"
        },
        "content": " +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "auskure"
        },
        "content": "Similarly, we can store a `EnrolledModules` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `EnrolledModules` object per unique `EnrolledModules`, instead of each `Person` needing their own `EnrolledModules` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "auskure"
        },
        "content": " +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "auskure"
        },
        "content": "image:ModelClassEvenBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "auskure"
        },
        "content": "// tag::storageComponent[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Structure of the Storage Component"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "auskure"
        },
        "content": "The `Storage` component as shown in the figure above, has the following capabilities."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "auskure"
        },
        "content": "* can unzip, organize and delete, a"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "auskure"
        },
        "content": "ll notes downloaded by the user using NSync."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "auskure"
        },
        "content": "// end::storageComponent[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// tag::changetimeslot[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d Change Time Slot Feature"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0201942"
        },
        "content": "The change time slot feature allows users to edit the timetables of the contacts in their address book. The user"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0201942"
        },
        "content": "inputs the index of the contact whose timetable they would like to edit, the day and time of the time slot they want"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0201942"
        },
        "content": "to edit, and the activity they would like to put in that time slot."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Given below is an example a usage scenario and how the change mechanism behaves at each step."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 1. The user inputs the index, day, time and activity. `The ChangeTimeSlotCommandParser` puts them into an array"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`activities` and checks to ensure that all the inputs are present and the inputs are in the correct format. Any"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0201942"
        },
        "content": "incorrectly formatted input will result in a `ParseException` being thrown. It then calls the `ChangeTimeSlotCommand`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0201942"
        },
        "content": " with the first element of `activities` as the `index` and `activities` as arguments."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeTimeslot1.PNG[width\u003d\"400\",align\u003d\"center\"gra]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 2. The `ChangeTimeSlotCommand` uses the index to get the `Person`, `personToChange` whose timetable is supposed to"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0201942"
        },
        "content": "be changed. It then calls `createNewUpdatedTimetable` with the timetable of `personToChange` copy of their timetable is"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0201942"
        },
        "content": "made. This method iterates through `activities` and gets the day time and"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0201942"
        },
        "content": "activity by checking their position in the array. The time slot to be changed is retrieved based on the selected `Person`, day and time."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0201942"
        },
        "content": "It then checks to see if the activity at the selected time slot is the same as the one it is supposed to be changed to. If it is, it is"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0201942"
        },
        "content": "ignored. If it is not, the time slot in the copied timetable is changed and a Boolean variable `didTimetableChange` is"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0201942"
        },
        "content": "set to true."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeTimeslot2.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 3. Once `activities` has been fully iterated through, a new `Person` `newPerson` is created with all the same"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0201942"
        },
        "content": "identity fields of `personToChange`, except for the timetable which is the changed timetable."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeTimeslot3.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 4. `newPerson` replaces `personToChange` in the `AddressBook`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeTimeslot4.PNG[width\u003d\"400\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0201942"
        },
        "content": "The following sequence diagram shows how the `change` function works."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::ChangeTimeSlot5.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How change executes"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* **Alternative 1 (current choice):** Create a copy of the timetable to change and then create a new `Person` with"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "E0201942"
        },
        "content": "the same identity fields as the `person` to change with the changed timetable and replacing the `person` to change with"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "E0201942"
        },
        "content": "this new `Person`."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Pros: Prevents a bugs caused by user inputting the same change to a time slot twice in the same input which"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "E0201942"
        },
        "content": "results in the application stating that no time slot was changed even though a time slot is changed."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Cons: Takes more processes making it a little slower."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* **Alternative 2 :** Directly change the timetable of the `person` to change."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Pros: Takes less processes making it a little faster."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Cons: Might result in aforementioned bug."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// end::changetimeslot[]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::mergetimetable[]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Merge Timetable Feature"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "The merge feature allows for users to select multiple contacts and outputs a merged timetable with all"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0201942"
        },
        "content": "their common free slots. When the user inputs the indexes of the contacts he wants to merge, the `Person`(s) are stored"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "in an array , `personsToMerge`. The array is then iterated through, merging the all objects inside and"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "outputting a final `Person` to be added to the address book."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the merge mechanism behaves at each step."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 1. The user selects the indexes of the contacts he wants to merge and inputs a group name. `MergeCommandParser`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0201942"
        },
        "content": "takes the indexes and puts it in a list. It then calls MergeCommand with the list and the group name as"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0201942"
        },
        "content": "arguments. The Merge Command uses the list of indexes and the `filteredPersonsList` to create and fill the array"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`personsToMerge`. Your own contact, `Person` with \"self\" `Tag` is always added to the array."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommand1.PNG[width\u003d\"350\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 2. The `mergeTimetable` function is called on each `Person` in `personsToMerge` and the element after it. The merge"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Timetable function iterates through all the time slots in both timetables and creates a new time table based on them."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommand4.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 3. The `Name`s of each `Person` are appended together and gets saved in the `Address` of the merged"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`Person`. The merged timetable and a \"merged\" `Tag` are added to the merged `Person`. The merged `Person` is also"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0201942"
        },
        "content": "given a placeholder `Email` and `Phone`. \"merged\" `Tag` causes these `Persons`(s) to be displayed in a separate list"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0201942"
        },
        "content": "in the UI."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommand3.PNG[width\u003d\"450\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Step 4. When `personsToMerge` is fully iterated through, the last"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        `Person` inside is added to the address book. If there already exists a `Person` with the same `Name`, that"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        `Person` is updated and a `CommandResult` reflecting this is shown."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommand5.PNG[width\u003d\"350\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the `merge` function works."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommand6.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How merge executes"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* **Alternative 1 (current choice):** Uses a \"merged\" `Tag` to differentiate between merged and normal contacts. The"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0201942"
        },
        "content": "merged contacts are displayed in a separate part of the UI with the placeholder `Email` and `Phone` undisplayed."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`Address` is used to display the names of all the `Person`s merged together to create the merged `Person`."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Pros: Easier to implement since it does not require creating a new Class."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Cons: Violates SOC principles because now `Address` is used both to store addresses and names. This could lead to"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "E0201942"
        },
        "content": "potential bugs if `Address` is changed to have different requirements to be considered valid."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* **Alternative 2 (To be implemented in V2):** Have a specific Class that has timetable and name that is updated with"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "E0201942"
        },
        "content": " the merged timetable and names of people being merged."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Pros: Better follows Separation of Concerns Principle."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires more time to implement."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "// end::mergetimetable[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// tag::updategrouptimetables[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d Update Current Merged Feature"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Given the scenario where a user has created a merged time-table (i.e. a `mergedPerson` / `Person` with `Tag`-merged) of several contacts (i.e. a `Person` / `Person` with no `Tag`), and one or more contacts had updated their time-tables after the merged time-table had been created, the creator of the merged time-table would previously have to delete the existing merged time-table and manually create another merged time-table to accommodate the changes in the time-table(s)."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "With the `update` feature, users are able to update an existing `mergedPerson`, if there are any changes to the composition of the `mergedPerson`. Such changes include the update of one or more `Person` time-tables or deletions of `Persons`(s)."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Given below is an example of a scenario where `update` is used and how the `merge` mechanism behaves at each step."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Step 1: +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "After the user inputs `update`, a list of `mergedPerson` is retrieved. This list (a.k.a. mergedPersonsList) is iterated through, updating each `mergedPerson` within mergedPersonsList."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::UpdateCommand1.PNG[width\u003d\"400\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Step 2: +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "The `Name` of each `mergedPerson` is saved as `groupName`. +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "To find a desired `Person` for updating within `mergedPerson`, the `Address` of each `mergedPerson` is tokenized (i.e. split up), and the desired `Person` is searched against the names within `Address`. This is the same underlying mechanism as the `find` command. +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "If the desired `Person` for updating is found, the `Person` is added to an array called `personsToMerge`. Else, if the desired `Person` cannot be found, both `groupName` and `mergedPerson` are stored in `removedPersons`, which is a map of arrays. To find the corresponding `mergedPerson` in `removedPersons`, use `groupName` as the key (i.e. identifier)."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::UpdateCommand2.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Step 3: +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "The merged `Person` is now updated, using the same underlying mechanism as the `merge` feature. If `removedPersons` is not empty, it returns a `CommandResult` showing the `Person`(s) removed and the affected merged `Person`(s)."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::UpdateCommand3.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "E0201942"
        },
        "content": "The following sequence diagram shows how the `update` function works."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "image::UpdateCommand5.PNG[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How update executes"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* **Alternative 1 (current choice):** Updates `mergedPerson` only when `update` is specifically executed by the user as a command. The `Person` s who are part of a `mergedPerson` are then retrieved using their names at the time of merging."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Pros: Faster execution time as NSync only needs to run the updating when `update` is specifically executed as a command by the user."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Cons: Could lead to a mis-match in information between individual `Person` s themselves, and the `mergedPerson` whom `Person` is part of. This mis-match may also persist if the `Person` \u0027s name has been modified."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* **Alternative 2 (To be implemented in v2.0):** Execute `update` in an under-lying call immediately whenever there is a relevant change (i.e. if a `Person` who is part of `mergedPerson` has edited their name or changed their time-table, or if a `Person` is no longer part of the `mergedPerson`)."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Pros: Brings about more convenience for users, and it is more intuitive to them, since they have to only enter 1 command instead of 2. Prevents the bug caused by editing a `Person` \u0027s name and then executing `update`, as mentioned under cons of current choice."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Cons: Overall execution time is slower if there are many `mergedPerson` s, and many `edit` s are done. This is because mergedPersonsList is iterated through each time `edit` is done, to examine each `mergedPerson` s."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// end::updategrouptimetables[]"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "auskure"
        },
        "content": "// tag::sortingofpersons[]"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Sorting of Contacts Feature"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "auskure"
        },
        "content": "To make the codebase easy to understand for you as a developer, we implemented the sorting mechanism with"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "auskure"
        },
        "content": " `UniquePersonListHelper`, which is facilitated by `UniquePersonList`,"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "auskure"
        },
        "content": " which keeps a list of unique persons in `AddressBook`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` sorts the contacts in `UniquePersonList` in an lexicographical order, according"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "auskure"
        },
        "content": "to the person\u0027s name. It implements the following operations:"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#add()` -- Adds a new person to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#remove()` -- Removes a new person to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#setPerson()` -- Sets a new person, in place of an existing person, to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#setPersons()` -- Sets a list of persons, in place of the current list of persons, to `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `UniquePersonList#contains()` -- Checks if a person is already a part of `UniquePersonList`, and hence the contact list"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "auskure"
        },
        "content": "These operations are exposed in the `Model` interface, through `ModelManager`, then through `AddressBook`."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "auskure"
        },
        "content": "In `Model`, they are exposed as `Model#addPerson()`, `Model#deletePerson()`, `Model#updatePerson()`,"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "auskure"
        },
        "content": "`Model#resetData()`, and `Model#hasPerson()` respectively."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "auskure"
        },
        "content": "Within `ModelManager`, the above listed operations are directly exposed as"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "auskure"
        },
        "content": "`ModelManager#addPerson()`, `ModelManager#deletePerson()`, `ModelManager#updatePerson()`,"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "auskure"
        },
        "content": "`ModelManager#resetData()`, and `ModelManager#hasPerson()` respectively."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "auskure"
        },
        "content": "Within `AddressBook`, the above listed operations are directly exposed as"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "auskure"
        },
        "content": "`AddressBook#addPerson()`, `AddressBook#removePerson()`, `AddressBook#updatePerson()`,"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "auskure"
        },
        "content": "`AddressBook#setPersons()`, and `AddressBook#hasPerson()` respectively."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "auskure"
        },
        "content": "Because `UniquePersonListHelper` stores persons in a treemap, with person name as the key, and person"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "auskure"
        },
        "content": "as the value in the key-value pair of the treemap, it is able to automatically sort persons according"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "auskure"
        },
        "content": "to their names.   Therefore, it is possible to iterate through `UniquePersonListHelper`,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "auskure"
        },
        "content": "in an in-order depth-first-search, to acquire the sorted order of persons.  This sorted order will be"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "auskure"
        },
        "content": "copied into `UniquePersonList`."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "auskure"
        },
        "content": "Given below is an example usage scenario and how the sorting mechanism behaves at each step."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 1. The user launches the application for the first time. The `UniquePersonListHelper` will be initialized"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "auskure"
        },
        "content": " with the saved persons of the application. For this example, let us assume that the `UniquePersonList`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "auskure"
        },
        "content": " is empty, and hence, there are no saved persons."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonList` will also be initialized, and will read inputs from `UniquePersonListHelper`.  Since"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` is empty, `UniquePersonList` will also be empty.  This is shown in the figure below."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListStartingStateListAndTreeDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 2. The user executes `add n/David ...` command, which calls `Model#addPerson()`, to add a new person."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "auskure"
        },
        "content": "The new person will be added to `UniquePersonListHelper`, and `UniquePersonList` will take reference from"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper`.  This is shown in the figure below."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand1TreeStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` has the sorted order of person, and this sorted order will be copied into"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "auskure"
        },
        "content": " `UniquePersonList`.  This is shown in the figure below."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand1ListStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "auskure"
        },
        "content": "The following sequence diagram shows how the `UniquePersonList` stays sorted when an `add` command is executed:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListSequenceDiagramCommandAdd.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 3. The user executes `add n/Aaron ...`, which also calls `Model#addPerson()`, to add a new person."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "auskure"
        },
        "content": "Like step 2, the new person will be added to"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper`."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "auskure"
        },
        "content": "This is shown in the figure below."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand2TreeStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonList` will take reference from `UniquePersonListHelper`, as shown in the figure below."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand2ListStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 4. The user executes `add n/Bella ...`, which also calls `Model#addPerson()`, to add a new person."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "auskure"
        },
        "content": "Because lexicographically, \"B\" comes before \"D\", person Bella, will be placed between Aaron and David."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonListHelper` stores persons in a treemap, and the red-black tree underlying data structure of"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "auskure"
        },
        "content": "treemap, is able to handle this.   The new person will be added to `UniquePersonListHelper` in a sorted order,"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "auskure"
        },
        "content": " as shown in the figure below."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand3TreeStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonList` will take reference from `UniquePersonListHelper`, as shown in the figure below."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand3ListStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 5. The user now decides that adding the person Bella was a mistake.  Person Bella should not be in the `AddressBook`."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "auskure"
        },
        "content": "The user wishes to delete the person Bella, by executing the `delete 2` command.  This calls `Model#deletePerson()`."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "auskure"
        },
        "content": "  The `delete 2` command will check if Bella is a valid person, and if so, will delete the person Bella."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "auskure"
        },
        "content": "The red-black tree which is the underlying data structure of treemap, is able to handle this operation.  It simply"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "auskure"
        },
        "content": "replaces the node it is about to delete, with the in-order successor.  More operations will be done to ensure a balanced"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "auskure"
        },
        "content": "tree, within the underlying red-black tree.  This is shown in the figure below."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand5TreeStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonList` will take reference from `UniquePersonListHelper`, as shown in the figure below."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand5ListStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "auskure"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "auskure"
        },
        "content": "If the Bella does not exist in `UniquePersonListHelper`,`UniquePersonListHelper` will return an error, and the"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "auskure"
        },
        "content": " `delete` command will not be executed."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "auskure"
        },
        "content": "The following sequence diagram shows how the `UniquePersonList` stays sorted when an `delete` command is executed:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "auskure"
        },
        "content": "It is very similar to that of the `add` command."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListSequenceDiagramCommandDelete.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 6. The user then decides to execute the command `list`. Commands that do not modify the address book, such as"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "auskure"
        },
        "content": "`list`, will usually not call `Model#addPerson()`, `Model#deletePerson()`, `Model#updatePerson()`, `Model#resetData()`,"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "auskure"
        },
        "content": "or `Model#hasPerson()`.  Thus the state of `UniquePersonListHelper` will remain unchanged.  This is shown in the figure"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "auskure"
        },
        "content": "below."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand6TreeStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "auskure"
        },
        "content": "Therefore, `UniquePersonList` will also remain unchanged, as shown in the figure below."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand6ListStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "auskure"
        },
        "content": "Step 7. The user executes `clear`, which calls `Model#resetData()`.  This replaces all data in the address book with an"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "auskure"
        },
        "content": "empty address book.  Hence, `UniquePersonListHelper` will be cleared of all persons.  This is shown in the figure below."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand7TreeStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "auskure"
        },
        "content": "Therefore, `UniquePersonList` will also be cleared of all persons, as shown in the figure below."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListCommand7ListStateDiagram.png[width\u003d\"500\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "auskure"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "auskure"
        },
        "content": "image::SortedListActivityDiagram.png[width\u003d\"400\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the list is sorted"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 1 (current choice):** Implement a helper class, UniquePersonListHelper, which uses a treemap to sort the names."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "auskure"
        },
        "content": "Clears the UniquePersonList every time a change is made, and iterates through the UniquePersonListHelper, to build a new"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "auskure"
        },
        "content": " UniquePersonList."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: Easy to implement.  Allows for minimal and compartmentalised changes throughout the code base.  Fast overall"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "auskure"
        },
        "content": "time complexity of O(N)."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: May have performance issues in terms of memory usage, which can be complicated for you as a developer to rectify."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 2:** Implement a comparator in the current UniquePersonList."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: Will use less memory, because there is no need for a helper class or data structure."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: It has a time complexity of O(N log N), which is slower than our chosen implementation."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Defensive programming practices for helper class"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 1 (current choice):** Implement all checks for errors in the helper class, `UniquePersonListHelper` and none in"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "auskure"
        },
        "content": "`UniquePersonList`.  This is because the helper class is in charge of the actual execution of the program.  If the checks for"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "auskure"
        },
        "content": "errors are implemented in `UniquePersonList` only, it is possible for a new developer to accidentally bypass the checks."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: Prevents unnecessary checks and hence, potentially confusing code for you as a developer."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: If any changes are made to the helper class in the future, e.g. removing the helper class, you as a developer"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "auskure"
        },
        "content": "will have to remember to implement your own checks."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "auskure"
        },
        "content": "* **Alternative 2:** Implement all checks for errors in both `UniquePersonList` and `UniquePersonListHelper`."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Pros: This would add an additional layer of defence to possible careless mistakes by developers in the future.  E.g."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "auskure"
        },
        "content": "If you were to make your own version of the helper class but forget to implement their own checks for errors, `UniquePersonList`"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "auskure"
        },
        "content": "would still have backup checks."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Cons: Introducing redundant checks, which would be misleading, This makes code harder to understand."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "auskure"
        },
        "content": "  Redundant checks might also incorrectly encourage careless programing habits for you as a developer."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "auskure"
        },
        "content": "// end::sortingofpersons[]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// tag::downloadCommands[]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d Download Commands"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Both `downloadSelectNotes` and `downloadAllNotes` extends on the  `downloadAbstract` class which itself extends from the"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "`command` class. The implementation is similar up till the downloading segment. The download"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "commands uses _Selenium Chromedrivers_ to initiate downloads from the internet."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The following class diagram shows the relationship of `downloadAllNotes`,`downloadSelectNotes` as well as"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "`downloadAbstract`."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::DownloadClassDiagram.png[width\u003d\"550\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "****"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The download function has temporarily been disabled in accordance with NUS Information Technology Acceptable use policy for IT resources Ver4.2, Clause 4.6"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "However, if desired, the function can be manually enabled by changing the state of `isDownloadDisabled` in `DownloadAbstract.java`."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "****"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d DownloadAllNotes command"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The following Sequence diagram shows how `downloadAllNotes` is handled."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadAllNotesSequence.png[width\u003d\"450\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadAllNotes downloadAllNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE]`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 1: Extract files from Jar. Since _Selenium ChromeDriver_ requires it to be present"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "in the directory as an executable inorder to be ran, it would need to be extracted from  NSync.jar before carrying on. Additionally, a _Notes_ folder would be created"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "to store the notes downloaded."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 2: Set the `webdriver.chrome.driver` system variable to the location of the ChromeDriver executable. This step is necessary."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 3: Set the download path and other settings for _ChromeDriver_."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Headless mode for _ChromeDriver_ has been disabled due to security reasons, an alternative is to start _ChromeDriver_ in an unviewable location on the screen to prevent disrupting the users interactions."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 4: Login into _IVLE_ , and check if successful. If not, a `CommandExeption` will be thrown"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "to alert the user that either `IVLE USERNAME` or `IVLE PASSWORD` is incorrect."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 5: If user is logged in, check if the `ENROLLED MODULE` exists. If not, a `CommandException` will"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "be thrown to alert the user that the `ENROLLED MODULE` specified does not exist."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 6: Navigate to the _IVLE download page_, select all files and download as .zip file."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "While Downloading, the program would introduce \"busy waiting\" to prevent the _ChromeDriver_ from terminating before the download is complete."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 7: Unzip the files and store it in a folder created based on the name of `ENROLLED MODULE` inside the _Notes_ folder created at `Step 1`."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d DownloadSelectNotes Command"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The following Sequence diagram shows how `downloadAllNotes` is handled."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectNotesSequence.png[width\u003d\"550\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadSelectNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE] [file/FILE INDEXES: 1,2,3...n]`"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The existance of the `file/` prefix is optional, and the existance of this prefix will affect the execution"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 1-5: is exactly the same as `DownloadAllNotes` command."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 6a: If user has **NOT** entered a `file/` prefix, the program will fetch all available file names and store it in a formatted string; A _static_ `FILE INDEX` will be appended to the front of the file name. The formatted string is returned as a `CommandResult`."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Step 6b: If user has entered a `file/` prefix. The program will download files according to the `FILE INDEXES` supplied. It is stored in the _Notes_ folder created at `Step 1`."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "If an incorrect file index has been supplied, download will stop after encountering an invalid index. Example: `file/1,2,9000,3` if 1,2,3 are valid file indexes, only file 1,2 will be downloaded."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect 1: Which Driver is used"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "**Implementation 1 (Current Implementation)**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Currently `downloadNotes` uses _ChromeDriver_ to initiate its downloads. It provides capabilities for navigating to web pages, user input, JavaScript execution, and more."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The user would be required to have _Google Chrome_ installed inorder to use this function"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Pros: Google Chrome is one of the most widely used browsers in the world. Thus statistically speaking, most NUS users would already have _Google Chrome_ installed."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Cons: _Google Chrome_ is extremely ram intensive, and the function would fail to cater to users who do not use Google Chrome."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "**Implementation 2(HTML unitdriver)**"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "HTML UnitDriver is the most light weight, natively headless and the fastest implementation of WebDriver."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Pros: Its extremely fast, does not require prior installation of any other applications to function."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Cons: It uses a javaScript engine called _Rhino_. This engine is incompatible with _IVLE_\u0027s usage of javaScript. Making it unable to navigate past `Step 5`."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect 2: How notes are downloaded"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Implementation 1 (Current Implementation)**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "As mentioned previously, currently `downloadNotes` uses _ChromeDriver_ to initiate its downloads."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Pros: The current implementation navigates through the _IVLE_ Web page to download the files \"Pseudo\" manually. Thus we could be easily morph this implementation to suit other platforms and websites. Its also easy to update."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    example: NTU web portal"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Cons: It requires user to have _Google Chrome_ installed."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "**Implementation 2 (IVLE API)**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "An alternative implementation is to use the existing IVLE API to instantiate the downloads."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Pros: Its supported by _NUS_, and thus should be more reliable than the _IVLE_ platform."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Cons: The existing IVLE API is outdated, many parts are not functional as of 10-11-2018. Furthermore, IVLE is migrating to luminous as of 2019, thus if implemented with IVLE API, it would require a ground up rebuild to keep the function operational."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// end::downloadCommands[]"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// tag::showNotesCommand[]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d ShowNotes Command"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "ShowNotes recursively searches the `Notes` folder created by `DownloadNotes` Command."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "A static String is used to store all the information `notesResult`."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The files are differentiated by 2 catagories: Directories and Others. If `currentFile` is a directory, a recursive call will be made and the directory name appended with _N_ tabs would be added to `notesResult` , else, just the file name and _N_ tabs would be apprended and added to ` notesResult`."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "_N_ refers to the number of recursive calls made up till the point of arriving at `currentFile`."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The Current implementation is the most efficient way to list out all the files in a directory. An Iterative method could have been used. However due to the fact that the relative \"depth\" of a directory is unknown. It would be rather counter-intuitive to search iteratively."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// end::showNotesCommand[]"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "auskure"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |add a ‘busy’ time slot to my time table | keep my life organized"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |delete a ‘busy’ time slot from my time table | free up that particular time slot"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |find availability of provided time slot | decide on my next course of action with that information"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |download the notes of a specific module in one command | avoid downloading unnecessary notes"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |lazy IVLE user |download all my notes in one command | avoid the cumbersome experience of visiting IVLE"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |view the notes already downloaded | keep track of the notes that I already have"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |delete all downloaded notes | free up some space on my local drive"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* * *` |user |view my enrolled modules | store my notes according to the modules I am enrolled in"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* *` |user |find next ‘available’ time slot (from current time) |be aware of when my next available time period will be"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* *` |user |find next ‘busy’ time slot (from current time) |be aware of what is coming up for me next"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`* *` |user |delete the notes of a specified module |keep my local drive organized"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`*` |user with many persons in the address book |locate a person easily |not waste time when trying to locate a contact"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`*` |user who needs to arrange a time with a group of other users frequently |import other users’ ‘busy time slots |have a centralised record of our schedules for convenience to arrange a common time"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "auskure"
        },
        "content": "|`*` |user who needs to arrange a time with a group of other users frequently |find next ‘available’ time slot (from current time) |easily know when we can next meet up"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "auskure"
        },
        "content": "(For all use cases below, the *System* is `NSync` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "auskure"
        },
        "content": "2.  NSync shows a list of persons"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "auskure"
        },
        "content": "4.  NSync deletes the person"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "auskure"
        },
        "content": "** 3a1. NSync shows an error message."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "auskure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Selected notes"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "auskure"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "auskure"
        },
        "content": "1.  User requests to show all notes"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "auskure"
        },
        "content": "2.  NSync shows a list of notes"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "auskure"
        },
        "content": "3.  User requests to delete a specific module\u0027s notes"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "auskure"
        },
        "content": "4.  NSync deletes the notes"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "auskure"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "auskure"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "auskure"
        },
        "content": "* 3a. The given request is invalid."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "auskure"
        },
        "content": "** 3a1. NSync shows an error message."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "auskure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Use case: Delete Multiple Selected notes"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "auskure"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "auskure"
        },
        "content": "1.  User requests to show all notes"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "auskure"
        },
        "content": "2.  NSync shows a list of notes"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "auskure"
        },
        "content": "3.  User requests to delete a multiples module\u0027s notes"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "auskure"
        },
        "content": "4.  NSync deletes the notes"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "auskure"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "auskure"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "auskure"
        },
        "content": "* 3a. The given request is invalid."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "auskure"
        },
        "content": "** 3a1. NSync shows an error message."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "auskure"
        },
        "content": "* 3b. The given request is partially valid."
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "auskure"
        },
        "content": "** 3b1. NSync processes only the valid requests."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "auskure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Use case: Delete all notes"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "auskure"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "auskure"
        },
        "content": "1.  User requests delete all downloaded notes"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "auskure"
        },
        "content": "2.  NSync deletes all notes"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "auskure"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "auskure"
        },
        "content": "* 2a. There are no downloaded notes is empty."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "auskure"
        },
        "content": "** 2a1. NSync still runs to ensure that all notes are deleted."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "auskure"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "auskure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d Use case: Download select notes"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "auskure"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "1. User request all the available files to download"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "2. NSync displays all available files to download with index appended at the front of the file name."
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "3. User request download based on file index"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "4. NSync downloads files and stores it in the `notes` folder."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "auskure"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* 2a. No files to display"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** 2a1. NSync displays empty list."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** 2a2. Use case ends"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "auskure"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* 3a. User requests an invalid file index"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "auskure"
        },
        "content": "+"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** 3a1. NSync does not download invalid file"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** 3a2. Use case ends."
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "auskure"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d Use case: Download all notes"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "1. User request download all notes"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "2. NSync downloads all notes in a zip file in the `notes` folder"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* 1a. User enters wrong username, password or module code."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "+"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** 1a1. NSync informs user of the error"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** 1a2. Use case ends."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d Use case: Merge people"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "E0201942"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "E0201942"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "E0201942"
        },
        "content": "3.  User requests to create a merged person from specific people in the list and enters a group name"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "E0201942"
        },
        "content": "4.  A merged person is created and added to AddressBook"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "E0201942"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 3a. One or more given index is invalid."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 3b. Group name is already in use for another group"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "E0201942"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** 3b1. Addressbook shows a message saying that group is updated instead of created"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d Use case: Change timetable"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "E0201942"
        },
        "content": "3.  User requests to create to change the selected time slot of a selected person to a different activity"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "E0201942"
        },
        "content": "4.  Time slot is changed"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 3a. One or more given index is invalid."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 3b. Day is invalid"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 3c. Time is invalid"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 3d. Activity inputted is the same as activity already at the time slot."
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** 3a1. AddressBook shows an error message saying the index inputted is invalid"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** 3b1. Addressbook shows an error message saying that day inputted is invalid"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** 3c1. Addressbook shows an error message saying that time inputted is invalid"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** 3d1. Addressbook shows an error message saying that no time slot has been changed"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d Use case: Filter timetable"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "E0201942"
        },
        "content": "1.  User requests to filter persons based on activities or free time slots they have"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "E0201942"
        },
        "content": "2.  AddressBook shows a filtered list of persons"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "E0201942"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* 1a. Input after a valid day is not a valid time"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "E0201942"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** 1a1. AddressBook shows an error message saying the time inputted is invalid"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "E0201942"
        },
        "content": "+"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "auskure"
        },
        "content": ".  Should work on any Windows OS as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "auskure"
        },
        "content": ".  To fully make use of downloading notes commands, the user has to have the Google Chrome web browser installed on his computer, and also be an \u003c\u003cIVLE, IVLE\u003e\u003e user in \u003c\u003cNUS, NUS\u003e\u003e."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "auskure"
        },
        "content": "[[IVLE]] IVLE::"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "auskure"
        },
        "content": "According to the National University of Singapore, Integrated Virtual Learning Environment (IVLE) is a NUS\u0027 custom designed and built Learning Management System"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "auskure"
        },
        "content": "for the NUS community. It is designed to facilitate and supplement teaching at the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "auskure"
        },
        "content": "[[NUS]] NUS::"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "auskure"
        },
        "content": "The National University of Singapore (NUS) is an autonomous research university in Singapore."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "auskure"
        },
        "content": "*Product Name*: Google Contacts"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "auskure"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The user is able to have all his contacts automatically synced across multiple devices."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The user\u0027s contacts will automatically be transferred over to a new device, if he logs in to his google account on it."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "auskure"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The user is unable to have a consolidated list of timetables for all his contacts."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The user is also unable to access \u003c\u003cIVLE, IVLE\u003e\u003e and download his notes using Google Contacts."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "auskure"
        },
        "content": "*Product Name*: NUSMods"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The user is able to all his enrolled modules, and create a visually appealing timetable quickly."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The timeslots are retrieved from directly from \u003c\u003cNUS, NUS\u003e\u003e, which allows the user to rest assured that his timetable"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "auskure"
        },
        "content": "is accurate."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The user is unable to have a consolidated list of timetables for all his contacts."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The user is also unable to access \u003c\u003cIVLE, IVLE\u003e\u003e and download his notes using Google Contacts."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "E0201942"
        },
        "content": ".. Test case: `delete main 1` +"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "E0201942"
        },
        "content": "   Expected: First contact is deleted from the main contact list. Details of the deleted contact shown in the status"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "E0201942"
        },
        "content": "   message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "E0201942"
        },
        "content": ".. Test case: `delete main 0` +"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Deleting downloaded notes"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "auskure"
        },
        "content": "Because features which involve downloading notes have been disallowed by NUS, in order to test deleting notes,"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "auskure"
        },
        "content": "testers have to manually create notes and delete them.  However, because this is not how NSync was designed to work,"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "auskure"
        },
        "content": "testers have to restart NSync every time they manually create and delete notes within NSync, in order for NSync to"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "auskure"
        },
        "content": "behave correctly."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "auskure"
        },
        "content": ". Deleting selected notes"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Prerequisites: Before starting NSync, go to the directory the .jar file is in.  Create a directory titled \"notes\"."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Within the newly created"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "auskure"
        },
        "content": "    \"notes\" directory, create 5 separate directories titled \"CS2101\", \"CS2113\", \"GEQ1000\", \"GER1000\", \"ST2334\"."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "auskure"
        },
        "content": "     It is up to the tester if he wants to create documents or subdirectories within any of the newly created 5"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "auskure"
        },
        "content": "     directories, in order to simulate actual notes being stored within the directories."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `deleteSelectNotes ST2334` +"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: The directory \"ST2334\" and its contents are deleted from the \"notes\" directory."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "auskure"
        },
        "content": "    \"ST2334\" will be shown in the first line of the status message, which shows the notes that have been deleted."
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "auskure"
        },
        "content": "    In the second line of the status message, which shows the entries that are invalid, it will not contain any elements,"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "auskure"
        },
        "content": "    as \"ST2334\" is a valid entry. +"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Timestamp in the status bar is not updated, as this command does"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "auskure"
        },
        "content": "    not modify the addressBook."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `deleteSelectNotes ger1000 geq1000` +"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: No notes are deleted."
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Expected: No notes are deleted.  Error details suggesting for the user to run `showNotes` is displayed. Timestamp"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "auskure"
        },
        "content": "   in the status bar is not updated.  This is because only invalid entries are entered, and the entries are case-sensitive."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Timestamp in the status bar is not updated, as this command does"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "auskure"
        },
        "content": "    not modify the addressBook portion of NSync."
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `deleteSelectNotes GER1000 GEQ1000` +"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: The directories \"GER1000\" and \"GEQ1000\" and their contents are deleted from the \"notes\" directory."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "auskure"
        },
        "content": "    \"GEQ1000\" and \"GER1000\" will be shown in the first line of the status message, which shows the notes that"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "auskure"
        },
        "content": "    have been deleted."
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "auskure"
        },
        "content": "    In the second line of the status message, which shows the entries that are invalid, it will not contain any elements,"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "auskure"
        },
        "content": "    as \"GEQ1000\" and \"GER1000\" are valid entries. +"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Timestamp in the status bar is not updated, as this command does"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "auskure"
        },
        "content": "    not modify the addressBook portion of NSync."
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `deleteSelectNotes CS ST2334` +"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: The directories \"CS2101\" and \"CS2113\" and their contents are deleted from the \"notes\" directory."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "auskure"
        },
        "content": "    \"CS2101\" and \"CS2113\" will be shown in the first line of the status message, which shows the notes that"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "auskure"
        },
        "content": "    have been deleted."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "auskure"
        },
        "content": "    In the second line of the status message, which shows the entries that are invalid, \"ST2334\" will be shown."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "auskure"
        },
        "content": "    This is because \"ST2334\" has been previously deleted and should no longer exist in the NSync.+"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Timestamp in the status bar is not updated, as this command does"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "auskure"
        },
        "content": "    not modify the addressBook portion of NSync."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `deleteSelectNotes CS ST2334` +"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: No notes are deleted.  Error details suggesting for the user to run `showNotes` is displayed. Timestamp"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "auskure"
        },
        "content": "   in the status bar is not updated.  This is because only invalid entries are entered."
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `deleteSelectNotes` +"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: No notes are deleted.  Error details are shown in the status message.  Timestamp remains unchanged."
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "auskure"
        },
        "content": ". Clearing notes"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Prerequisites: Before starting NSync, go to the directory the .jar file is in.  Create a directory titled \"notes\"."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Within the newly created"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "auskure"
        },
        "content": "    \"notes\" directory, create 5 separate directories titled \"CS2101\", \"CS2113\", \"GEQ1000\", \"GER1000\", \"ST2334\"."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "auskure"
        },
        "content": "     It is up to the tester if he wants to create documents or subdirectories within any of the newly created 5"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "auskure"
        },
        "content": "     directories, in order to simulate actual notes being stored within the directories."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `clearNotes` +"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: All files and directories in the \"notes\" folder will be cleared.  This only excludes hidden bookkeeping files"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "auskure"
        },
        "content": "     created by the user\u0027s operating system.  The resultant \"notes\" folder will be"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "auskure"
        },
        "content": "   empty.  The status message indicating that your notes have been cleared will be shown.  Timestamp in the status bar"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "auskure"
        },
        "content": "   is not updated, as this command does not modify the addressBook portion of NSync."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: `clearNotes` +"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: Even though the \"notes\" folder is empty, clearNotes will still run to ensure that it is indeed empty."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Timestamp in the status bar is not updated, as this command does not modify the addressBook portion of NSync."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "auskure"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "auskure"
        },
        "content": "Both `deleteAllNotes` and `clearNotes` commands are designed to work with `downloadAllNotes` and `downloadSelectNotes`"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "auskure"
        },
        "content": "commands.  Using the download commands, notes will be downloaded into the \"notes\" directory, and automatically, neatly"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "auskure"
        },
        "content": "stored in a subdirectory within the \"notes\" directory.  The name of the subdirectory is the typical module codes of"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "auskure"
        },
        "content": "modules in NUS. This is made possible by the API used for the download notes commands, as well as the module code parser"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "auskure"
        },
        "content": "built into NSync.  The result is that all names of subdirectories will be the module code only e.g. \"CS2100\" and not"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "auskure"
        },
        "content": "\"CS2100 Introduction to Computer Organisation\"."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d Download Commands"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The download function has temporarily been disabled in accordance with NUS Information Technology Acceptable use policy for IT resources Ver4.2, Clause 4.6"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "However, if desired, the function can be manually enabled by changing the state of `isDownloadDisabled` in `DownloadAbstract.java`."
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d ShowNotes Command"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Since the download function has been disabled, testers can create a `notes` folder in the directory of the jar file and fill it with items. The ShowNotes command will display it accordingly"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d Changing a person\u0027s time slot"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "E0201942"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "E0201942"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list. Ensure the 1st contact"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "E0201942"
        },
        "content": "does not have GER1000 at the monday 10am slot of his timetable."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "E0201942"
        },
        "content": ".. Test case: `change 1 mon 10am GER1000` +"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "E0201942"
        },
        "content": "   Expected: First contact\u0027s monday 10am time slot is changed to GER1000. A messaeg indicating the change has"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "E0201942"
        },
        "content": "   happened successfully is shown. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "E0201942"
        },
        "content": ".. Test case: `change 0 mon 10am GER1000` +"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "E0201942"
        },
        "content": "   Expected: No change happens. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "E0201942"
        },
        "content": ".. Other incorrect delete commands to try: `change 1 ada 10am GER1000`, `change 1 mon 2321am GER1000`, `change 1 mon"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "E0201942"
        },
        "content": "10am GER1000` when the first person\u0027s monday 10am slot already has GER1000."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Expected: Invalid Day, Invalid Time, No time slot changed respectively."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: Delete `addressbook.xml` +"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: Application opens with an address book with the sample data."
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "auskure"
        },
        "content": ".. Test case: Corrupt `addressbook.xml` by manually editing it +"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "auskure"
        },
        "content": "   Expected: Application opens with an address book with empty data."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 174,
      "BearPerson1": 165,
      "auskure": 360,
      "-": 738,
      "leegengyu": 41
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d NSync - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W12-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "By: `CS2113-AY1819S1-W12-2`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "NSync is a program for NUS students who *strive to keep their lives organised, despite their busy schedules*."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ".  Download the addressbook.xml file at this link https://github.com/CS2113-AY1819S1-W12-2/main/releases/tag/V1.4 and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": " replace your own data file with it to get 20 normal contacts and 7 merged contacts."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* **`delete`**`main 3` : deletes contact whose index number is 3"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Items with `1..`​ after them can be used multiple times, excluding zero times e.g. `[ENROLLED MODULE]1..`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "* For privacy reasons, `downloadAllNotes` and `downloadSelectNotes` commands will not be saved to history.  This is because"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "those commands contain the user\u0027s IVLE password."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Address Book Commands"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `add n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]...[em/ENROLLED MODULE]...`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "If you somehow lose your self contact, you can create a new one by adding t/self to your add command. Adding any"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "other tag will not have any effect on the contact created. Self contacts cannot be deleted through the interface so"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "do not add another self contact if you already have one that exists."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 em/CS2113T`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* `add n/Self t/self e/bart@example.com a/Jurong East Street 52 p/92131921`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "Contacts in this addressbook are automatically sorted in alphabetical order"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Trying to add a new contact (with different user fields) with the same name as an existing contact does not currently"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "work"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [em/ENROLLED MODULE]...`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "* When editing tags and enrolled modules, the existing tags and enrolled modules of the person will be removed"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Likewise, you can remove all the person\u0027s enrolled modules by typing `em/` without specifying any enrolled modules after it."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "i.e adding of enrolled modules is not cumulative."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* `edit 2 n/Betsy Crower` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower`."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `edit 3 n/Esther Daniels em/` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "Edits the name of the 3rd person to be `Esther Daniels` and clears all existing enrolled modules."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `find MAIN/MERGED KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Choosing MAIN will let you search in the individuals contact list while choosing Merged will let you searchi in the"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": " groups contact list."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Choosing of MAIN/MERGED is not case sensitive."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* `find main John` +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Returns `john` and `John Doe` from the main contact list"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* `find merged CS2113 CS2101` +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Returns any groups having names `CS2113` and `CS2101` from the group contact list"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `delete MAIN/MERGED INDEX`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Choosing MAIN will let you delete from the individuals contact list while choosing MERGED will let you delete from"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "the groups contact list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Choosing of MAIN/MERGED is not case sensitive."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "`delete main 2` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* `find merged CS2101` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "`delete merged 1` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Deletes the 1st group in the results of the `find` command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Selects the person and \u003cto be confirmed\u003e at the specified `INDEX`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* The index refers to the index number shown in the individuals contact list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* `find main Betsy` +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Undoable commands: Address Book and Timetable commands that modify the address book\u0027s content (`add`, `delete`,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                                        `edit`, `clear`, `change`,  `share`, `merge`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                                        `filter`, `free`, `export`, `import`). +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Notes commands are not compatible with `undo`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Clears all entries from the address book and resets your self contact. +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Timetable Commands"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// tag::changecommand[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Changing Time Slots: `change`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can change your own, or a contact\u0027s timetable to reflect whether there is an activity at a specified time slot,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0201942"
        },
        "content": "or whether it is free or busy."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Format: `change INDEX/SELF DAY TIME ACTIVITY/FREE/BUSY`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Changes the timetable of the person specified by index or your own timetable if self is inputted."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* The DAY refers to which day of the timetable is going to be edited."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* The TIME refers to which time within the day will be edited."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* The ACTIVITY/FREE/BUSY refers to what will be reflected at the seleted time slot"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* DAY must be mon, tue, wed, thu or fri (Non-case sensitive)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* TIME must be 8am, 9am, 10am, 11am, 12pm, 1pm, 2pm, 3pm, 4pm, 5pm, 6pm, 7pm"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`change 1 mon 8am GER1000`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Changes the mon 8am time slot of the first contact in the main contact list to GER1000"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Before:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeCommand1.PNG[width\u003d\"400\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0201942"
        },
        "content": "After:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::ChangeCommand2.PNG[width\u003d\"400\" align\u003d\"center\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// end::changecommand[]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// tag::mergecommand[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Merging timetables: `merge`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can select multiple contacts whose timetables you would like to merge and give it a group name. This displays a"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0201942"
        },
        "content": "collated timetable with the number of people busy for each time slot. It also displays the names of the people in the"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0201942"
        },
        "content": "group."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `merge m/INDEX m/INDEX...`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* Merges the people at selected INDEXes."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* More than 2 people can be merged at once"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Your own timetable wil always be included in the merge"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* You may select one contat multiple times if they are deemed more important to the group"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`merge m/2 m/3 m/4 n/CS2101 Project` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Merges your own timetable with the 2nd, 3rd and 4th people in the address book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::MergeCommandUserGuide.PNG[width\u003d\"450\",align\u003d\"center\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0201942"
        },
        "content": "The merged timetable will be added to the list of groups"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// end::mergecommand[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// tag::updatecommand[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Updating group timetables: `update`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can automatically update your group timetables based on whatever changes have been made to your contacts\u0027"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0201942"
        },
        "content": "timetables."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Format: `update`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Update will update all your groups when you use it."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* If a contact who belongs in one of your groups is deleted, update will show who was deleted and which groups were"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0201942"
        },
        "content": "affeccted in addition to updating the group timetables."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* If the deletion of a contact results in your own contact being the only person left in the group, the group will be"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0201942"
        },
        "content": " automatically deleted. This deletion will also be reflected in the command result in addition to the people who were"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  deleted and the groups affected by their deletion."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// end::updatecommand[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// tag::filtercommand[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003d\u003d\u003d\u003d Filters contacts based on free time slots and activities: `filter`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0201942"
        },
        "content": "You can select a time slot or activity you would like to filter your contacts by. Time slot filtering filters out"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0201942"
        },
        "content": "people who are busy at the selected time slot. Activity filtering filters out people who do not have the activity in"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0201942"
        },
        "content": "their timetable or does not have the module in their enrolled modules if the activity is a module taken."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Format: `filter ACTIVITY /DAY TIME...`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Entering a module code removes contacts without the module from the list."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Entering a day and time removes contacts without that time slot free."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Day must be mon, tue, wed, thu or fri."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Only inputs after a valid day will be treated as a time. Every other input gets treated as an activity."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Time must be 8am, 9am, 10am, 11am, 12am, 1pm, 2pm, 3pm, 4pm, 5pm, 6pm or 7pm."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Contacts can be filtered by more than one activity/day and time."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* Filter feature is not case sensitive."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "E0201942"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "`filter GER1000` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Shows only contacts who have GER1000 in the timetable."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0201942"
        },
        "content": "`filter run` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Shows only contacts who have run in their timetable."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "`filter mon 10am` +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Shows only contacts who are free at mon 10am."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "`filter GER1000 mon 10 am` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0201942"
        },
        "content": "Shows only contacts who have GER1000 in their timetable and are free at mon 10am."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0201942"
        },
        "content": "// end::filtercommand[]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "// tag::freecommand[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d\u003d Filters for next free time-slot: `free`"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Want to meet up with your friends at the soonest opportunity? Or would you like to find out when is the next time you can take a break (with no scheduled activities)? `free` allows you to easily find the next available time-slot from the current time for one or more of your NSync contacts, giving you answers to these questions!"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `free f/[SELF/INDEX] ...`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::SampleTimeTable.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 1: `free f/self` +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Running this command will show your next available time-slot (from current time). +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "With reference to the time-table found in the figure above, if the current day and time is Monday 3:00pm, your next available time-slot shown is Monday 4:00pm till 8:00pm. If the current day and time is Monday 4:34pm, your next available time-slot shown is Monday 4:34pm till 8:00pm."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 2: `free f/1 f/7 f/9` +"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Running this command will show the next available time-slot (from current time) for contacts whose indices are 1, 7 and 9 respectively."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Running this command outside the day window of Monday to Friday or beyond the time of 8pm will return a time-slot from the next weekday."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "// end::freecommand[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "// tag::exportcommand[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d\u003d Export user data: `export`"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Met a new acquaintence who would like to have your contact details and time-table to schedule a common meeting time? `export` allows you to export all of a user\u0027s (or your own) details in each respective field into an encoded string. (Once you have sent the string to another NSync user, he/she can use `import` to retrieve the data within the encoded string - see `import` for more details) +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `export PUBLIC/PRIVATE SELF/INDEX`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Type \u0027public\u0027 if you would like the user who imports your contact to see the full contents of your time-table."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* Type \u0027private\u0027 if you would like the user who imports your contact to see only your free and busy time-slots respectively (i.e. specific contents of your time-table are hidden!)."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "All examples shown below are with reference to the sample time-table shown in the figure above."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 1: `export public self` +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "The importing user will see your time-table in its entirety (i.e. the full contents of the time-table), exactly as shown in the sample time-table above."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Example 2: `export private self` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "The importing user will see only the busy and free time-slots in your time-table, marked as black and white colored slots respectively, as seen in the figure below."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "image::ExportPrivateView.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "The generated string from the command will be automatically copied for you (no manual selecting and copying required)! All you have to do is to send it in its entirety to a fellow NSync user who will import it."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "When exporting a time-table with only free and busy time-slots (i.e. black and white slots), it does not matter if you select either the public or private option - the user who imports your generated string will see the same time-table."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Exporting more than 1 user\u0027s details at a time or exporting a merged time-table is currently not available (but will be implemented in future releases!)."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "// end::exportcommand[]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "// tag::importcommand[]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d\u003d\u003d Import user data: `import`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Did you receive an encoded string from a fellow NSync user? Use `import` to transfer all of the data within the string into your copy of NSync! +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Format: `import [PASTE_YOUR_ENCODED_STRING_HERE]`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Display Message 1: Import Successful! +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "If you have imported a valid contact who is currently not in your NSync (i.e. no contact with the same name), all of the imported user\u0027s details will now be found in your NSync."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "If you see only black and white colored slots in the time-table of the imported contact, it means that the exporting user could have chosen the `private` option during the `export` process. See `export` for more details."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Display Message 2: Import Successful! An existing contact has been found in NSync and has been overwritten. +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "If you have imported a valid contact who is currently already in your NSync (i.e. contact with the same name), all of the details found in the imported string will overwrite the existing ones found in your NSync, for that particular contact."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "If you have unintentionally over-written the details of an existing contact, use `undo` to get back the original details of the contact!"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "Display Message 3: Import Failed! +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "If you have missed out a character, or accidentally modified one of the characters in the string, attempting to import the invalid string will result in an error displayed. Please obtain a valid string from the contact who passed it to you."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "// end::importcommand[]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// tag::downloadCommands[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Notes Commands"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "The download function has temporarily been disabled in accordance with NUS Information Technology Acceptable use policy for IT resources Ver4.2, Clause 4.6"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "You are still able to login and view available files to be downloaded. Try out `downloadSelectNotes` without the `/file` prefix!"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "You would need to have Google Chrome installed in the default location, run Windows 8 or above and be connected to the internet to use the download commands."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "You would be unable to see your inputted command after inputting it, this is a security feature to prevent your login credentials from being compromised."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Downloading all notes from a selected module from IVLE : `downloadAllNotes`"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Downloads the your notes from IVLE, and stores them in the folder \"Notes\" +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadAllNotes downloadAllNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE]`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadExample.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Example `DownloadAllNotes` command usage."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Automatically accesses the your IVLE account using Google Chrome, and downloads all notes and resources"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "auskure"
        },
        "content": "of the specified module."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "You do not have to Enter the full module code or worry about the capitalization. Example: if you are enrolled in `CS2113` and `CS2101` entering `mod/cs21` will select `cs2101`"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* You may notice a new window of Google Chrome opening up. Do not interact with it or you might interfere with the download."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::chromeOpen.PNG[width\u003d\"100\"align\u003d\"center\"]"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* NSync might be unresponsive during the download, it is so to prevent you from accidentally introducing file corruption."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* If your download is successful, the result window of NSync will display the exact path to your newly downloaded notes."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Examples and what you might expect :"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "_Download Successful :_"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadAllSuccessful.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "_Module not found :_"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadModNotFound.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "_Password or username Incorrect :_"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadPasswordOrUsernameWrong.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Display all notes from a selected module from IVLE : `downloadSelectNotes` without prefix `\"file/\"`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "auskure"
        },
        "content": "Displays all the available notes of a selected +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadSelectNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE]`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Currently the files are not sorted in any order. In a future version we will make its sorted by file type"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileExample.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Example `DownloadSelectFile` *without* `file/` prefix usage"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* All available notes from the selected module would be sourced and displayed"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* if a file is not shown, it could be either a private folder or a submission folder, consult your lecturer for more information"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Examples and what you might expect :"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "_File Fetch Successful :_"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileSuccess1.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileSuccess2.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "the number on the left of the file represents the file ID, it is static.  Example: _\"0:LP41_More_UML_Inheritence.pptx\"_"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    0 is the file index."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Downloading selective notes from a selected module from IVLE : `downloadSelectNotes` with prefix `\"file/\"`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Download a selective number of notes from IVLE, and stores them in the folder \"notes\"."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `downloadSelectNotes [user/IVLE USERNAME] [pass/IVLE PASSWORD] [mod/ENROLLED MODULE] [file/0,1,2...n]`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Use `downloadSelectFile` without the `file\\` prefix to obtain the file indexes."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectExample.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Example `DownloadSelectFile` *with* `file/` prefix usage"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* The files would be downloaded one by one from IVLE to your \"notes\" folder."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* if you entered a mix of invalid and valid file IDs, NSync will only only download the correct files, up till it encounters a invalid ID."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    Example: file/0,1,2,90000000,3"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    if 0,1,2,3 are valid file IDs, only file 0,1,2 will be downloaded."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Examples and what you might expect :"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "_Download Successful :_"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectSuccess.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*_File* not found :_"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::downloadSelectFileNotFound.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// end::downloadCommands[]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// tag::showNotesCommand[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d\u003d\u003d Show all downloaded notes: `showNotes`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "auskure"
        },
        "content": "Displays all the downloaded notes in the UI +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Format: `showNotes`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "the files are displayed in the order that it is in your directory"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* It recursively searches your `notes` folder and displays all the files available"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Examples of usage:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::showNotes1.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::showNotes2.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::showNotes3.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "// end::showNotesCommand[]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "auskure"
        },
        "content": "// tag::clearNotes[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all downloaded notes : `clearNotes`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "auskure"
        },
        "content": "Clears all downloaded notes. +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `clearNotes`"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "auskure"
        },
        "content": "// end::clearNotes[]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "auskure"
        },
        "content": "// tag::deleteSelectNotes[]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting notes from one or more selected modules : `deleteSelectNotes`"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "auskure"
        },
        "content": "Deletes the notes that belong to the specified module, from storage +"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "auskure"
        },
        "content": "Format: `deleteSelectNotes [ENROLLED MODULE]1..`"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "auskure"
        },
        "content": "****"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Deletes notes of the `ENROLLED MODULE`."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "auskure"
        },
        "content": "* The notes of the `ENROLLED MODULE` would be deleted, if they were downloaded using the command"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "auskure"
        },
        "content": "`downloadAllnotes` or  `downloadSelectNotes`."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "auskure"
        },
        "content": "****"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "auskure"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `deleteSelectNotes CS2100` +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "auskure"
        },
        "content": "Deletes the notes belonging to the module CS2100."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `deleteSelectNotes CS2105 CS2106` +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "auskure"
        },
        "content": "Deletes the notes belongs to the modules CS2105 and CS2106."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `deleteSelectNotes CS` +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "auskure"
        },
        "content": "Deletes the notes belongs to modules that have \"CS\" in their names"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `deleteSelectNotes PL3232` +"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "auskure"
        },
        "content": "Will not delete anything if \"PL3232\" does not exist as your downloaded notes."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "auskure"
        },
        "content": "* `deleteSelectNotes PL3232 CS2106` +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "auskure"
        },
        "content": "Will not delete anything if \"PL3232\" does not exist as your downloaded notes, however notes"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "auskure"
        },
        "content": "belonging to \"CS2106\" would be deleted."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "auskure"
        },
        "content": "// end::deleteSelectNotes[]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d Upcoming Features"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "auskure"
        },
        "content": "NSync will automatically encrypt your data upon exiting the program. +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "auskure"
        },
        "content": "Before exiting, NSync will prompt you for a password, which it uses to encrypt your data. +"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "auskure"
        },
        "content": "Upon start up, NSync will prompt you for the same password, which it uses to decrypt your data."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "auskure"
        },
        "content": "****"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Searches ST\u0027s friends for the same module code"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "auskure"
        },
        "content": "* Parses the information and displays it as a list"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "auskure"
        },
        "content": "****"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "auskure"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "auskure"
        },
        "content": "NSync will only encrypt you data if you enter a password when prompted upon exit.  If no password is entered, NSync"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "auskure"
        },
        "content": "will not encrypt your data"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d\u003d Display of notes in the Graphical User interface upon download `[coming in v2.0]`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "auskure"
        },
        "content": "NSync will automatically display your notes, after the download has completed. +"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "auskure"
        },
        "content": "This allows you to have an immediate idea of exactly what you downloaded."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "auskure"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "image::automaticallyDisplayedNotes.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "auskure"
        },
        "content": "The downloaded notes can be transferred in the same way."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "auskure"
        },
        "content": "*Q*: What is IVLE? +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "auskure"
        },
        "content": "*A*: According to the National University of Singapore (NUS), Integrated Virtual Learning Environment (IVLE) is a NUS\u0027 custom designed and built Learning Management System"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "auskure"
        },
        "content": "for the NUS community. It is designed to facilitate and supplement teaching at the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Add* `add n/NAME p/PHONE e/EMAIL a/ADDRESS [t/TAG]...[em/ENROLLED MODULE]...` +"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "auskure"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague em/CS2101 em/CS2113`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Clear Notes* : `clearNotes`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Delete selected notes* : `deleteSelectedNotes [ENROLLED MODULE]1..\" +"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "auskure"
        },
        "content": "e.g. `deleteSelectedNotes CS2105 CS2106`"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Download All Notes* : `downloadAllNotes user/e1234567 pass/password1 mod/CS2113`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Download Selected Notes (selected notes)* : `downloadSelectNotes user/e1234567 pass/password1 mod/CS2113 file/1,2,3...`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Download Selected Notes (show all notes)* : `downloadSelectNotes user/e1234567 pass/password1 mod/CS2113`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Show notes* : `showNotes`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]... [em/ENROLLED MODULE]...` +"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Merge Timetables* : `merge [index 1] [index 2] \u003cadd more indices if required\u003e`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "e.g. `merge 1 2 5`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      }
    ],
    "authorContributionMap": {
      "E0201942": 112,
      "BearPerson1": 163,
      "auskure": 128,
      "-": 206,
      "leegengyu": 114
    }
  },
  {
    "path": "docs/team/BearPerson1.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d Hu Yi Qing - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ":imagesdir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d [blue]#PROJECT: NSync#"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d [blue]#Overview#"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "NSync is a student lifestyle management and utility application built apon AddressBook - Level 4. The application uses a Command-Line interface to interact with the user. It aims to increase the efficiency of time consuming tasks that predominantly exist in a students life."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "This document includes the contributions of Hu Yi Qing across the duration of the project."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d [blue]#Summary of contributions#"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Major Enhancement* : Added the ability to download notes from IVLE automatically."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** What it does: Allows user to download all notes of a certain module using the `downloadAllNotes` command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "or view all the available files and select which files to download with the `downloadSelectNotes` command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Justification: This feature streamlines notes downloads by simplifying it to 1-2 lines of command input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Highlights: Selenium Web-driver libraries is used to implement this feature. The libraries has several conflicts with the existing code base; which required special care to resolve."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Credits: Selenium WebDriver."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Minor Enhancement* : Added the ability to view the notes download using the `showNotes`."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** What it does: Displays notes downloaded."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Justification: User could view notes without going into directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Code contributed* : [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dbearperson1[Functional Code and Test Code]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "* *Other Contributions :*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Additional enhancements:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*** Implemented auto extraction of ChromeDrivers from the NSync.jar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*** Implemented auto creation of additional file paths from NSync.jar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*** Reviewed multiple pull requests: (Examples: https://github.com/CS2113-AY1819S1-W12-2/main/pull/145[#145],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "https://github.com/CS2113-AY1819S1-W12-2/main/pull/151[#151])"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*** Reported bugs for other teams: (Examples:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "https://github.com/CS2113-AY1819S1-T12-2/main/issues/154[1],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "https://github.com/CS2113-AY1819S1-T12-2/main/issues/166[2])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*** Responded to bug reports: (Examples:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "https://github.com/CS2113-AY1819S1-W12-2/main/issues/129[1],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "https://github.com/CS2113-AY1819S1-W12-2/main/issues/128[2])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Integrated third party library (apache.commons.io) to project"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "*** Integrated third party library (Selenium WebDriver) to project"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d [blue]#Contributions to the User Guide#"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "****"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Displayed below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "****"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddownloadCommands]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dshowNotesCommand]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u003d\u003d [blue]#Contributions to the Developer Guide#"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "Displayed below are sections I contributed to the Developer Guide. They showcase my ability to write documentation targeting Developers, as well as construct UML diagrams."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddownloadCommands]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dshowNotesCommand]"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 56,
      "-": 11,
      "leegengyu": 18
    }
  },
  {
    "path": "docs/team/auskure.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d Loh Wei Jie, Oscar - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "This portfolio showcases my ability to produce functional code and documentation, for a team-based NUS"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": " software engineering project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d PROJECT: NSync"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "NSync is a desktop-based utility application used by NUS students, with tailored tools for timetable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "coordination and notes acquisition, allowing for streamlining of work processes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Major enhancement*: Notes Deletion"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "** What it does: In a single command, the user is able to delete the notes previously downloaded using"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": " NSync, allowing him to quickly and conveniently free up storage space."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Justification: Because my teammate has already implemented an automated notes downloader, allowing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "the user to download large folders conveniently, it is important to have an equally convenient method"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "to delete notes.  This removes the need for the user to manually go to storage to delete his own"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "notes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Highlights: As this enhancement involves interaction with actual storage, a good understanding of"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "how `Model` and `Storage` components work together, is required."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "Existing file manipulation libraries such as java.io and java nio libraries were incorporated into this"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "enhancement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Minor enhancement*: Alphabetised contact list in the address book"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "** What it does: When the user adds a new contact to your contact list, the contact is added in an alphabetic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": " order automatically.  This is opposed to the original implementation, which simply appends the new"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": " contact to the end of the contact list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Justification:  Alphabetisation allows the contact list to appear more organized."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Highlights: Understanding of time complexity of algorithms is required."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "For the sorting algorithms, the existing library java.util was incorporated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Code contributed*: https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dauskure[Functional and test code]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Project management: Successfully assigned and managed `issues` for all team members, and matched them to corresponding deadlines."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Documentation: Organized the User Guide into a more reader friendly format +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "https://github.com/CS2113-AY1819S1-W12-2/main/pull/61[#61]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "** Community: Pull requests meticulously reviewed +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "https://github.com/CS2113-AY1819S1-W12-2/main/pull/72[#72] +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "https://github.com/CS2113-AY1819S1-W12-2/main/pull/148[#148]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "|_The following shows my contributions to the user guide, in relation to functions `clearNotes` and"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "`deleteSelectNotes`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "include::../UserGuide.adoc[tag\u003dclearNotes]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeleteSelectNotes]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "|_The following shows my contributions to the user guide, in relation to the alphabetised contact list enhancement."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "This showcases my ability to write technical documentation and the technical"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "   depth of my contributions to the project._"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstorageComponent]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsortingofpersons]"
      }
    ],
    "authorContributionMap": {
      "auskure": 46,
      "-": 29
    }
  },
  {
    "path": "docs/team/e0201942.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Lim Zhi Hui Alden - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "NSync was designed to streamline the average NUS student\u0027s life by automating notes downloads and aiding in meeting scheduling by"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "automating the search for common free time slots between contacts. NSync is a desktop application that uses a command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": " line interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: Schedule synchronizer."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** What it does: It allows a user to store timetables in the address book. Group contacts with a merged timetable can"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": " be created from multiple contacts. Group contacts can be automatically updated when any timetable changes or"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": " deletions are made."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "update."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Justification: This will allow users to easily find a time slot to arrange for meet ups for social or work related"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": " reasons because finding a common time slot can be an annoying experience when it involves too many people. It also"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": " ensures that keeping it updated is not a hassle."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Highlights: The implementation of the timetable had 2 major hurdles. First was finding a way for the timetable to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "be properly displayed on the UI. This required a lot of trial and error to get the timetable to be displayed in the"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "way I envisioned it. Secondly, storing the timetable was an interesting and educational experience. Because the"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "timetable is essentially a map of lists of time slots, when it gets converted to XML format, the values inside the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "list actually are lost. This issue led to me learning that a class needed to be created to wrap the list so it could"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "store properly."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* *Minor enhancement*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "** Contacts can be filtered based on their free time slots or activities present in their"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "timetable or enrolled modules that they have."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003de0201942[Functional and test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "code]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*** Bug reports of NSync reviewed and commented on and fixed those relevant to me: All issues from #99 to #135"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*** Adjusted the UI to display timetables for each contact and have separate lists for group contacts, individual"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "contacts and self contact."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*** Edited delete and find functions to be able to be able to select which list, merged or main, to delete or find from."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*** Reported bugs and suggestions for team T16-3 in the class: #111, #118, #120, #124, #126"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "include::../UserGuide.adoc[tag\u003dchangecommand]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmergecommand]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfiltercommand]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdatecommand]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dchangetimeslot]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmergetimetable]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "*UI Class Diagram*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "image::UiDeveloperGuide.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 37,
      "-": 42
    }
  },
  {
    "path": "docs/team/leegengyu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Lee Geng Yu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "This portfolio documents my contributions to a NUS Software Engineering project."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "\u003d\u003d PROJECT: NSync"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "NSync is a desktop application with a command-line interface that helps NUS students resolve the problem of scheduling meetings (and inefficient notes downloading) between their peers, team mates and friends in a simple and fuss-free manner."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Main Feature Implemented*: Feature to *export and import user details*."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** What it does: Allows the user to `export` and `import` all the details of a particular contact. These details include the name, contact number, email, address and time-table of the contact."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Justification: Each user has to key in all of their contacts\u0027 individual details previously, which is a very time-consuming process. This time-saving feature allows the user and his/her contacts to key in their own details in a one-time fashion, before exporting their own details and exchanging it with each other for importing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Highlights: This enhancement builds upon all of the existing user details, and requires an in-depth understanding of the workings of the `Logic` and `Model` components. The implementation required coalescing all of a user\u0027s details during exporting, as well as decoding it into the respective fields subsequently during importing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "* *Code contributed*: [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003dleegengyu[Functional and test code]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** *Minor Feature Implemented*: Added the feature to *find the next immediate free time-slot*."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Allows the user to find the next immediate `free` time-slot for himself, and/or his contacts from the current time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Managed releases for NSync: `v1.2`, `v1.3`, `v1.3(PE)`, `v1.4` on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Bug reports of NSync reviewed (with non-trivial review comments): All issues from  https://github.com/CS2113-AY1819S1-W12-2/main/issues/99[#99] to https://github.com/CS2113-AY1819S1-W12-2/main/issues/135[#135]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Contributed to forum discussions: https://github.com/nusCS2113-AY1819S1/forum/issues/14[#14], https://github.com/nusCS2113-AY1819S1/forum/issues/27[#27]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "*** Reported bugs and suggestions for team T09-4 in the class: https://github.com/CS2113-AY1819S1-T09-4/main/issues/129[#129],  https://github.com/CS2113-AY1819S1-T09-4/main/issues/131[#131], https://github.com/CS2113-AY1819S1-T09-4/main/issues/133[#133], https://github.com/CS2113-AY1819S1-T09-4/main/issues/136[#136], https://github.com/CS2113-AY1819S1-T09-4/main/issues/138[#138], https://github.com/CS2113-AY1819S1-T09-4/main/issues/140[#140], https://github.com/CS2113-AY1819S1-T09-4/main/issues/141[#141], https://github.com/CS2113-AY1819S1-T09-4/main/issues/143[#143]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "|_Given below are 3 sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfreecommand]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexportcommand]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimportcommand]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "|_Given below is a section I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dupdategrouptimetables]"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "leegengyu": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.loadFolders;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.NotesDownloaded;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.ReadOnlyNotesDownloaded;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.storage.NotesDownloadStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.storage.NotesDownloadStorageHelper;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Test commit to see if Travis detects commits after re-configuring."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloadStorage notesDownloadStorage \u003d new NotesDownloadStorageHelper(userPrefs.getNotesFolderPath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, notesDownloadStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ReadOnlyAddressBook initialAddressBookData;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ReadOnlyNotesDownloaded initalNotesDownloadedData;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        AddressBook initialDataWithSelf;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "            initialAddressBookData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            initialDataWithSelf \u003d new AddressBook();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            initialDataWithSelf.setSelf();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "            initialAddressBookData \u003d new AddressBook(initialDataWithSelf);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            initialDataWithSelf \u003d new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            initialDataWithSelf.setSelf();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "            initialAddressBookData \u003d new AddressBook(initialDataWithSelf);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initalNotesDownloadedData \u003d new NotesDownloaded(loadFolders(userPrefs.getNotesFolderPath()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new ModelManager(initialAddressBookData, initalNotesDownloadedData, userPrefs);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 6,
      "BearPerson1": 3,
      "auskure": 16,
      "-": 200,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String appTitle \u003d \"NSync\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"There is no such person with the index that \""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"you have entered. Please try again.\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX_PARAMETER \u003d \"You have entered an invalid index parameter.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Please try again.\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_INVALID_PRIVACY_PARAMETER \u003d \"Please enter either \u0027public\u0027 or \u0027private\u0027\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"after \u0027export\u0027.\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW \u003d \"%1$d persons/groups listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"MODULE CODE NOT FOUND\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_UNABLE_REACH_IVLE \u003d \"UNABLE TO LOGIN TO IVLE AT THIS TIME\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_SUCCESS \u003d \"\\r\\nDownloaded file at \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_CHROME_DRIVER_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        \"chromeDrivers are not found, please check if you have installed the application correctly\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_EXTRACTION_JAR_FAIL \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \"Extracting chromeDrivers or setting up Notes folder has failed\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_SELECT_SUCCESS \u003d \"Here are your the files available for: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_USERNAME_PASSWORD_ERROR \u003d \"You have entered a wrong username or Password.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_DYNAMIC_WAITING_INTERRUPTED \u003d \"Waiting for the files have been interrupted\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_SELECT_NO_FILES_SELECTED \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \"Please select a file after the \\\"file/\\\" tag. Ie: file/(0,1,2...n))\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_FILE_DOES_NOT_EXIST_ERROR \u003d \"A file you selected does not exist,\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"download Incomplete\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_DOWNLOAD_DISABLED \u003d \"The download function has temporarily been disabled \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"in accordance with\\r\\nNUS Information Technology Acceptable use policy for IT resources Ver4.2,\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        + \" Clause 4.6\\r\\nUsers are still able to use downloadSelectNotes to view available files to be downloaded.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String NEWLINE_SEPARATOR \u003d \"\\r\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_FILE_LOCATION_ERROR \u003d \"The folder \\\"notes\\\" is not found!\" + NEWLINE_SEPARATOR"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + \"please download some notes to continue using showNotes\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_FILE_INDEX_ERROR \u003d \"You have entered an invalid file index, please try again!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "BearPerson1": 14,
      "-": 12,
      "leegengyu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public int getTwoBased() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return zeroBasedIndex + 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 4,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/NotesEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "/** Indicates the notes downloaded has changed*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class NotesEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String NO_MODULE \u003d \"empty\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final String event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Set\u003cString\u003e moduleCodes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesEvent(String event, Set\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.moduleCodes \u003d moduleCodes;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String getEvent() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Set getModuleCodes() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return moduleCodes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String getSingleModuleCode() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (moduleCodes.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return NO_MODULE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Iterator\u003cString\u003e iterator \u003d moduleCodes.iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return iterator.next();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return \"notes manipulated: \" + event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Writes, reads, relocates and deletes files"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String DIRECTORY_INDICATOR \u003d \"/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String PARAM_CURRENT_DIRECTORY \u003d \"user.dir\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final Integer STRING_START_INDEX \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final Integer STRING_SECOND_INDEX \u003d 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Helps to find the current directory"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static String currentDirectory() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return System.getProperty(PARAM_CURRENT_DIRECTORY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static boolean isDirectoryExists(Path directory) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Files.exists(directory) \u0026\u0026 Files.isDirectory(directory);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Helps to find all valid folders in a chosen directory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static Set\u003cString\u003e loadFolders(Path directory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File targetDirectory \u003d new File(currentDirectory() + DIRECTORY_INDICATOR + directory.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e folderNames \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        //user currently has no downloaded notes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!isDirectoryExists(directory)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return folderNames;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String currentName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d targetDirectory.listFiles();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File tempFolder : filesList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (tempFolder.isHidden() || tempFolder.isFile()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "            currentName \u003d tempFolder.getName();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "            folderNames.add(currentName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return folderNames;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a string that does not include a DIRECTORY_INDICATOR"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @param name A string representing a folder/file name, and hence, should not have \"/\" within the name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static String cleanName(String name) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!name.contains(DIRECTORY_INDICATOR)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return name.substring(name.lastIndexOf(DIRECTORY_INDICATOR) + STRING_SECOND_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a string that only contains the module code."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @param name A string representing a folder/file name, which could include both the module code and the"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *             module title.  They are always separated by a \" \"."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static String cleanModuleCode(String name) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!name.contains(SPACE)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return name.substring(STRING_START_INDEX, name.indexOf(SPACE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Creates a directory if it does not exist."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IOException if the directory cannot be created."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void createDirectoryIfMissing(Path directory) throws IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (isDirectoryExists(directory)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (Files.exists(directory)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(directory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Moves all files in a given folder, to a designated folder"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void relocateFiles(Path folder, String designatedFolder) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File currentDirectory \u003d new File(folder.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String targetFolder \u003d currentDirectory.toString() + DIRECTORY_INDICATOR"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                + designatedFolder + DIRECTORY_INDICATOR;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String currentName;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d currentDirectory.listFiles();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File file : filesList) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isDirectory() || file.isHidden()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "auskure"
        },
        "content": "            currentName \u003d file.getName();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "auskure"
        },
        "content": "            file.renameTo(new File(targetFolder + currentName));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Deletes all files in a given folder"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void deleteAllFiles(Path folder) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File currentDirectory \u003d new File(folder.toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d currentDirectory.listFiles();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File file : filesList) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "auskure"
        },
        "content": "            //No bookkeeping files stored by the Operating System should be deleted"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isHidden()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "auskure"
        },
        "content": "            String[] directoryContents \u003d file.list();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isDirectory() \u0026\u0026 directoryContents !\u003d null) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "auskure"
        },
        "content": "                recursiveDelete(file);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "auskure"
        },
        "content": "            file.delete();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Deletes all files in a given folder"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void deleteSelectedFolders(Path folder, Set\u003cString\u003e folderNames) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File currentDirectory \u003d new File(folder.toString());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String currentName;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d currentDirectory.listFiles();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Boolean isTarget;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File tempFolder : filesList) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "auskure"
        },
        "content": "            currentName \u003d tempFolder.getName();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "auskure"
        },
        "content": "            isTarget \u003d false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "auskure"
        },
        "content": "            for (String name : folderNames) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "auskure"
        },
        "content": "                if (currentName.contains(name)) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    isTarget \u003d true;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "auskure"
        },
        "content": "            //No bookkeeping files stored by the Operating System should be deleted"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (tempFolder.isHidden()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (!isTarget) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "auskure"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "auskure"
        },
        "content": "            String[] directoryContents \u003d tempFolder.list();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (tempFolder.isDirectory() \u0026\u0026 directoryContents !\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "auskure"
        },
        "content": "                recursiveDelete(tempFolder);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempFolder.delete();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Helps to delete notes in an occupied folder"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static void recursiveDelete(File file) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (file.isDirectory()) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "auskure"
        },
        "content": "            File[] directoryContents \u003d file.listFiles();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (directoryContents !\u003d null) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "auskure"
        },
        "content": "                for (File content : directoryContents) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    recursiveDelete(content);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "auskure"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 4,
      "BearPerson1": 1,
      "auskure": 174,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/UnzipUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.zip.ZipEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.zip.ZipInputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Helper functions for handling downloaded zip files"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class UnzipUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final int PARAM_BUFFER_SIZE \u003d 1024;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final int PARAM_MININUM_SIZE \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final int PARAM_OFFSET \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String ZIP_POSTFIX \u003d \".zip\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns if {@code unzipFilePath, targetFilePath and targetFileKeyword} is able to be found"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * e.g. user/main/toUnzip, user/main/target, zipped"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The zipped file will then be deleted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IOException if zipped file cannot be found, or if the buffered stream used to write the file is"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * corrupted"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void unzipFile(Path absoluteDownloadFilePath, String moduleCode) throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String currentDirectoryPath \u003d absoluteDownloadFilePath.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String fullTargetFilePath \u003d currentDirectoryPath + \"/\" + moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File currentDirectory \u003d new File(currentDirectoryPath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final File targetFile \u003d getFile(currentDirectory, ZIP_POSTFIX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String inputZipFile \u003d currentDirectoryPath + \"/\" + targetFile.getName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String outputZipFolder \u003d fullTargetFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "        unZip(inputZipFile, outputZipFolder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        targetFile.delete();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the target file if it exists within the current directory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static File getFile(File curDir, String keyWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File targetFile \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String currentName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File[] filesList \u003d curDir.listFiles();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (File file : filesList) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (file.isFile()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "                currentName \u003d file.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "                if (currentName.contains(keyWord)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    targetFile \u003d file;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return targetFile;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Unzips the target file if it exists within the current directory."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IOException in the unlikely case that the buffered stream is corrupted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static void unZip(String zipFile, String outputFolder) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        byte[] buffer \u003d new byte[PARAM_BUFFER_SIZE];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "            //create output directory is not exists"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "            File folder \u003d new File(outputFolder);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (!folder.exists()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "                folder.mkdir();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "            // Acquiring the content of the zip file through an input stream"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "            FileInputStream fileInputStream \u003d new FileInputStream(zipFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "            ZipInputStream zipinputstream \u003d new ZipInputStream(fileInputStream);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "            // Acquiring the list entries of the zip file"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "            ZipEntry zipEntry \u003d zipinputstream.getNextEntry();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "            // Unzipping the folder"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "            while (zipEntry !\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "                String fileName \u003d zipEntry.getName();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "                File newFile \u003d new File(outputFolder + File.separator + fileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "                //create all non exists folders"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "                //else you will hit FileNotFoundException for compressed folder"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "                new File(newFile.getParent()).mkdirs();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "                FileOutputStream fileOutputStream \u003d new FileOutputStream(newFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "                int len;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "                while ((len \u003d zipinputstream.read(buffer)) \u003e PARAM_MININUM_SIZE) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    fileOutputStream.write(buffer, PARAM_OFFSET, len);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "                fileOutputStream.close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "                zipEntry \u003d zipinputstream.getNextEntry();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "            zipinputstream.closeEntry();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "            zipinputstream.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Only add history if the previous command was not a download command,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // this is because download commands involve sensitive information"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!userInput.contains(DownloadAllNotesCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \u0026\u0026 !userInput.contains(DownloadSelectNotesCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 5,
      "-": 59,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"[\" + PREFIX_ENROLLED_MODULE + \"ENROLLED MODULE]...\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + PREFIX_ENROLLED_MODULE + \"CS2101 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + PREFIX_ENROLLED_MODULE + \"CS2113T\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_CANNOT_ADD_MERGED_TAG \u003d \"Person cannot be created with a merged tag.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_CANNOT_ADD_SELF_TAG \u003d \"Self contact already exists, this person cannot be \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"created with a self tag.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 4,
      "auskure": 5,
      "-": 66,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ChangeTimeSlotCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Edits an existing person\u0027s timetable in the address book."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ChangeTimeSlotCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"change\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Changes the selected time slot \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"DAY(mon, tue, wed, thu, fri) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"TIME(8am, 9am, 10am, 11am, 12pm, 1pm, 2pm, 3pm, 4pm, 5pm, 6pm, 7pm) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Activity \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + \"mon \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"8am \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"CS2107\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Time slot changed: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_EDIT_SELF_SUCCESS \u003d \"Time slot changed: Self\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_NOTHING_CHANGED \u003d \"No time slot was changed\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY \u003d \"Invalid Day. \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Invalid Time. \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String reference;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String[] actions;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ChangeTimeSlotCommand(String index, String[] actions) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(actions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.reference \u003d index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.actions \u003d actions;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToChange;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int index \u003d Integer.parseInt(reference);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (index - 1 \u003e\u003d lastShownList.size() || index \u003c 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personToChange \u003d lastShownList.get(index - 1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (!reference.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personToChange \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots \u003d personToChange.getTimeSlots();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e changedTimeSlots;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (createNewUpdatedTimetable(timeSlots) !\u003d null) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            changedTimeSlots \u003d createNewUpdatedTimetable(timeSlots);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new CommandException(MESSAGE_NOTHING_CHANGED);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person newPerson \u003d new Person(personToChange.getName(), personToChange.getPhone(), personToChange.getEmail(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                personToChange.getAddress(), personToChange.getTags(), personToChange.getEnrolledModules(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                changedTimeSlots);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.updatePerson(personToChange, newPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!reference.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, newPerson));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_SELF_SUCCESS));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                || (other instanceof ChangeTimeSlotCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 reference.equals(((ChangeTimeSlotCommand) other).reference)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 Arrays.equals(actions, (((ChangeTimeSlotCommand) other).actions)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a changed timetable based on the user input and the timetable of the person to change."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e createNewUpdatedTimetable(Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e changedTimeSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String day \u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String time \u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Boolean didTimetableChange \u003d false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String d : days) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            List\u003cTimeSlots\u003e toAdd;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            toAdd \u003d copyDay(timeSlots.get(d));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            changedTimeSlots.put(d, toAdd);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 1; i \u003c actions.length; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String activity;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day \u003d actions[i];"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                time \u003d actions[i];"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                activity \u003d actions[i];"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (!changedTimeSlots.get(day).get(changeTimeToIndex(time)).toString().equalsIgnoreCase(activity)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    changedTimeSlots.get(day).set(changeTimeToIndex(time), new TimeSlots(activity));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    didTimetableChange \u003d true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (didTimetableChange) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return changedTimeSlots;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Copies the timeslots in a day of a timetable."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private List\u003cTimeSlots\u003e copyDay(List\u003cTimeSlots\u003e toCopy) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (TimeSlots toAdd : toCopy) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            finalSlots.add(toAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalSlots;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Converts from a time to its corresponding index."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private int changeTimeToIndex(String time) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (time.equalsIgnoreCase(\"8am\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 0;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"9am\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"10am\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 2;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"11am\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 3;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"12pm\")) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 4;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"1pm\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 5;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"2pm\")) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 6;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"3pm\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 7;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"4pm\")) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 8;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"5pm\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 9;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"6pm\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 10;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"7pm\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 11;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return 11;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        AddressBook clearedAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        clearedAddressBook.setSelf();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.resetAddressBookData(clearedAddressBook);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Deletes all downloaded notes from the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class ClearNotesCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearNotes\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All notes have been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "        model.clearNotesData(COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsMergedPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Parameters: LIST (Main, Merged) INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" merged 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_DELETE_MERGED_SUCCESS \u003d \"Deleted Group: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String targetList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public DeleteCommand(String targetList, Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.targetList \u003d targetList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (targetList.equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (targetList.equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (targetList.equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MERGED_SUCCESS, personToDelete.getName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 17,
      "-": 50,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteSelectNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.ReadOnlyNotesDownloaded;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Deletes all downloaded notes from the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class DeleteSelectNotesCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteSelectNotes\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" : Deletes selected notes. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"MODULE NAME...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"CS2101 \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "            + \"CS2113\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_DELETE_ALL_NOTES_SUCCESS \u003d \"The following notes have been deleted: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_DELETE_ALL_NOTES_CAUTION \u003d \"\\nThe following entries are invalid: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_UNAVAILABLE_NOTES \u003d \"Please enter names of modules you have already downloaded\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        + \"Run `showNotes` if you do not know which notes you have \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Set\u003cString\u003e requestModuleCodes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Set\u003cString\u003e invalidModuleCodes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Set\u003cString\u003e finalModuleCodes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public DeleteSelectNotesCommand(Set requestModuleCodes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.requestModuleCodes \u003d requestModuleCodes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.invalidModuleCodes \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.finalModuleCodes \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        removeInvalidModuleCodes(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (requestModuleCodes.isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new CommandException(MESSAGE_UNAVAILABLE_NOTES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        getFullModuleNames(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        model.deleteSelectedNotes(COMMAND_WORD, finalModuleCodes);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new CommandResult(MESSAGE_DELETE_ALL_NOTES_SUCCESS + finalModuleCodes.toString()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                        + MESSAGE_DELETE_ALL_NOTES_CAUTION + invalidModuleCodes.toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Removes module names that are not available in storage"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private void removeInvalidModuleCodes(Model model) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ReadOnlyNotesDownloaded notesDownloaded \u003d model.getNotesList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesList \u003d notesDownloaded.getNotesList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "        boolean isValid;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (Iterator\u003cString\u003e iterator \u003d requestModuleCodes.iterator(); iterator.hasNext();) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "            String request \u003d iterator.next();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "            isValid \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "            for (String tempNotes : notesList) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "                if (tempNotes.contains(request)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    isValid \u003d true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (!isValid) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "                invalidModuleCodes.add(request);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "                iterator.remove();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Replaces any partial module names with full module names."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private void getFullModuleNames(Model model) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ReadOnlyNotesDownloaded notesDownloaded \u003d model.getNotesList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesList \u003d notesDownloaded.getNotesList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (Iterator\u003cString\u003e iterator \u003d requestModuleCodes.iterator(); iterator.hasNext();) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "            String request \u003d iterator.next();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "            for (String tempNotes : notesList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "                if (tempNotes.contains(request)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    finalModuleCodes.add(tempNotes);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "                || (other instanceof DeleteSelectNotesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "                \u0026\u0026 requestModuleCodes.equals(((DeleteSelectNotesCommand) other).requestModuleCodes)); // state check"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownloadAbstract.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.util.FileUtil.currentDirectory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.By;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.Point;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebElement;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.chrome.ChromeDriver;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.chrome.ChromeOptions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.support.ui.Select;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAbstract is an abstract class that does the basic setting up of Selenium chrome drivers. Implementation of"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAllNotesCommand and DownloadSelectNotesCommand extends on this class"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAbstract extends on the command class"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public abstract class DownloadAbstract extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String MAC_CHROME_DRIVER_DIRECTORY \u003d \"macChromeDriver\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String MAC_CHROME_DRIVER_NAME \u003d \"chromedriver\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String WINDOWS_CHROME_DRIVER_DIRECTORY \u003d \"windowsChromeDriver\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String WINDOWS_CHROME_DRIVER_NAME \u003d \"chromedriver.exe\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String DOWNLOAD_FILE_PATH \u003d \"/notes\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_TITLE \u003d \"IVLE\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String WINDOWS_OS_NAME \u003d \"Windows\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String MAC_OS_NAME \u003d \"Mac\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_ADDRESS \u003d \"https://ivle.nus.edu.sg\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String DOWNLOAD_FILE_ONGOING_EXTENSION \u003d \"crdownload\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_USERNAME_FIELD_ID \u003d \"ctl00_ctl00_ContentPlaceHolder1_userid\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_PASSWORD_FIELD_ID \u003d \"ctl00_ctl00_ContentPlaceHolder1_password\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_LOGIN_BUTTON_ID \u003d \"ctl00_ctl00_ContentPlaceHolder1_btnSignIn\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_DOWNLOAD_PAGE_ADDRESS \u003d \"https://ivle.nus.edu.sg/v1/File/download_all.aspx\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String IVLE_MODULE_LIST_FIELD_ID \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            \"ctl00_ctl00_ctl00_ContentPlaceHolder1_ContentPlaceHolder1_ContentPlaceHolder1_ddlModule\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected static final String NEWLINE_SEPARATOR \u003d \"\\r\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String username;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String password;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String moduleCode;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String currentDirectoryPath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected String downloadPath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isDownloadDisabled \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadAbstract(String username, String password, String moduleCode) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.moduleCode \u003d moduleCode.toLowerCase();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.currentDirectoryPath \u003d currentDirectory();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.downloadPath \u003d currentDirectoryPath + DOWNLOAD_FILE_PATH;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * extractFilesFromJar makes the notes folder to store the notes for the user if it doesnt exists."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * as well as extract the relevant chromedriver files from inside the jar to outside the jar to be able to be used."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * this method should only run when running from a fresh jar file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void extractFilesFromJar() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File notesFolder \u003d new File(currentDirectoryPath + DOWNLOAD_FILE_PATH);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!notesFolder.exists()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            notesFolder.mkdir();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        URL resource \u003d classLoader.getResource(WINDOWS_CHROME_DRIVER_DIRECTORY + \"/\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + WINDOWS_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File chromeDriverDir \u003d new File(WINDOWS_CHROME_DRIVER_DIRECTORY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!chromeDriverDir.exists()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            chromeDriverDir.mkdirs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File windowsChromeDriver \u003d new File(WINDOWS_CHROME_DRIVER_DIRECTORY"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + File.separator + WINDOWS_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!windowsChromeDriver.exists()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            windowsChromeDriver.createNewFile();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            org.apache.commons.io.FileUtils.copyURLToFile(resource, windowsChromeDriver);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        resource \u003d classLoader.getResource(MAC_CHROME_DRIVER_DIRECTORY + \"/\" + MAC_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromeDriverDir \u003d new File(MAC_CHROME_DRIVER_DIRECTORY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!chromeDriverDir.exists()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            chromeDriverDir.mkdirs();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File macChromeDriver \u003d new File(MAC_CHROME_DRIVER_DIRECTORY + File.separator"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + MAC_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!macChromeDriver.exists()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            macChromeDriver.createNewFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            org.apache.commons.io.FileUtils.copyURLToFile(resource, macChromeDriver);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * initializeChromeDriverPaths dynamically sets the download path of the files and location of chromeDriver"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * so that its relative to where this project is stored and what OS the user is using."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * downloadPath will change from the root directory location of the application to the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * location of the tempDownloadStorage"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void initializeChromeDriverPaths() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (System.getProperty(\"os.name\").contains(WINDOWS_OS_NAME)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            System.setProperty(\"webdriver.chrome.driver\", currentDirectoryPath + \"/\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    + WINDOWS_CHROME_DRIVER_DIRECTORY + \"/\" + WINDOWS_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } else if (System.getProperty(\"os.name\").contains(MAC_OS_NAME)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            System.setProperty(\"webdriver.chrome.driver\", currentDirectoryPath + \"/\" + MAC_CHROME_DRIVER_DIRECTORY"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    + \"/\" + MAC_CHROME_DRIVER_NAME);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * initializeWebDriver sets the download path of the chromeDriver"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * Additionally, chromeDriver has disabled headless downloading as a new security feature, thus the alternative"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * to having the chrome windows blocking the UI is to shift it to a unviewable location at the bottom of the screen."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected WebDriver initializeWebDriver() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        HashMap\u003cString, Object\u003e chromePrefs \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromePrefs.put(\"profile.default_content_settings.popups\", 0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromePrefs.put(\"download.default_directory\", downloadPath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        chromePrefs.put(\"browser.setDownloadBehavior\", \"allow\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ChromeOptions options \u003d new ChromeOptions();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        options.setExperimentalOption(\"prefs\", chromePrefs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebDriver driver \u003d new ChromeDriver(options);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.manage().window().setPosition(new Point(-2000, 0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return driver;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * isModuleExisting checks if the module explicitly provided by the user is Available to the user."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @return true if found, false if not."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isModuleExisting(WebDriver driver) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.get(IVLE_DOWNLOAD_PAGE_ADDRESS);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        Select dropDown \u003d new Select(driver.findElement(By.id(IVLE_MODULE_LIST_FIELD_ID)));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e itemsModules \u003d dropDown.getOptions();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        int itemCount \u003d itemsModules.size();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *i starts at 1 because 0 is reserved for \"select module\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *an iterator is used because the dropDown element is selected by index,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *thus search is more logical to be sequential."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 1; i \u003c itemCount; i++) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (isModuleMatching(itemsModules.get(i).getText().toLowerCase())) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                moduleCode \u003d itemsModules.get(i).getText();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                dropDown.selectByIndex(i);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * isModuleMatching is a helper function of isModuleExisting, it iterates through the moduleCode as provided by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * the user, and checks it character by character against all the mods that IVLE displays."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param input is the string checked against the mod field that the user provided"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @return true if it exists on IVLE, else not."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isModuleMatching(String input) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            for (int i \u003d 0; i \u003c moduleCode.length(); i++) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                if (input.charAt(i) !\u003d moduleCode.charAt(i)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (StringIndexOutOfBoundsException sioobe) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * isLoggedIn checks if user has successfully logged in with the provided credentials."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected boolean isLoggedIn(WebDriver driver) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return !(driver.getTitle().contains(IVLE_TITLE));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * loginIvle attempts to login to IVLE with the provided credentials."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current WebDriver session"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void loginIvle(WebDriver driver) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.get(IVLE_ADDRESS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_USERNAME_FIELD_ID)).sendKeys(username);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_PASSWORD_FIELD_ID)).sendKeys(password);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_LOGIN_BUTTON_ID)).click();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected abstract void downloadFiles(WebDriver driver);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * dynamicWaiting implements \"busy waiting\" to prevent premature termination of chromeDriver in event that"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * the file download size requires more time than the default timeout of chromeDriver"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void dynamicWaiting() throws InterruptedException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String[] keyExtentions \u003d {DOWNLOAD_FILE_ONGOING_EXTENSION};"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            Thread.sleep(100);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } while (!org.apache.commons.io.FileUtils.listFiles"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                (new File(downloadPath), keyExtentions, false).isEmpty());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * initializeDownloadFolder deletes instances of \"downloading\" file types, to prevent dynamicWaiting running"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * indefinitely"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void initializeDownloadFolder() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File folder \u003d new File(downloadPath);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File[] filesList \u003d folder.listFiles();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 0; i \u003c filesList.length; i++) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            File currentFile \u003d filesList[i];"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (currentFile.getName().endsWith(DOWNLOAD_FILE_ONGOING_EXTENSION)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                filesList[i].delete();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 254
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownloadAllNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.By;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAllNotesCommand Will download all the notes from a selected module and store it in the \"notes\" folder."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAllNotesCommand extends on DownloadAbstract that extends on command."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadAllNotesCommand extends DownloadAbstract {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"downloadAllNotes\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To download all your notes from IVLE:\" + NEWLINE_SEPARATOR"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + COMMAND_WORD + \"user/(IVLE username) pass/(IVLE password) mod/(moduleCode)\" + NEWLINE_SEPARATOR"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + \"Example: user/e0123456 pass/******** mod/CS2113\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String CHECKBOX_XPATH_VALUE \u003d \"//input[@type\u003d\u0027checkbox\u0027]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String IVLE_DOWNLOAD_PAGE_BUTTON_ID \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            \"ctl00_ctl00_ctl00_ContentPlaceHolder1_ContentPlaceHolder1_ContentPlaceHolder1_btnDownloadSel\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadAllNotesCommand(String username, String password, String moduleCode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        super(username, password, moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            extractFilesFromJar();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EXTRACTION_JAR_FAIL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            initializeChromeDriverPaths();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CHROME_DRIVER_NOT_FOUND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebDriver driver \u003d initializeWebDriver();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            loginIvle(driver);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NoSuchElementException nse) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNABLE_REACH_IVLE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!isLoggedIn(driver)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_USERNAME_PASSWORD_ERROR + NEWLINE_SEPARATOR + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!isModuleExisting(driver)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MODULE_NOT_FOUND + NEWLINE_SEPARATOR + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         * Updated to disable download operations, if isDownloadDisabled\u003d\u003dtrue."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         * Function will not proceed after this if statement."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (isDownloadDisabled) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_DOWNLOAD_DISABLED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        initializeDownloadFolder();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        downloadFiles(driver);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            dynamicWaiting();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DYNAMIC_WAITING_INTERRUPTED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        model.addNotes(COMMAND_WORD, moduleCode);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return new CommandResult(moduleCode + Messages.MESSAGE_DOWNLOAD_SUCCESS"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + downloadPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * downloadFiles selects all the available files to be downloaded and then selects the \"download files\" button"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void downloadFiles(WebDriver driver) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e checkBoxList \u003d driver.findElements(By.xpath(CHECKBOX_XPATH_VALUE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (WebElement checkBox : checkBoxList) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (!checkBox.isSelected()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                checkBox.click();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.findElement(By.id(IVLE_DOWNLOAD_PAGE_BUTTON_ID)).click();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 108,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DownloadSelectNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.By;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebDriver;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.openqa.selenium.WebElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadSelectCommand has 2 functions depending on the existance of PREFIX_SELECT_FILE. If PREFIX_SELECT_FILE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * exists it displays all available notes for that module, else, it will follow the index supplied after"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * PREFIX_SELECT_FILE to download the files and store it in the \"notes folder\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadSelectCommand extends on DownloadAbstract that extends on Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadSelectNotesCommand extends DownloadAbstract {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"downloadSelectNotes\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"To display all available notes:\" + NEWLINE_SEPARATOR + COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + \" user/(IVLE username) pass/(IVLE password) mod/(moduleCode)\" + NEWLINE_SEPARATOR"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + \"Example: user/e0123456 pass/******** mod/CS2113\" + NEWLINE_SEPARATOR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + \"To select and download the notes(by file index):\" + NEWLINE_SEPARATOR + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + \" user/(IVLE username) pass/(IVLE password) mod/(moduleCode) file/0,1,2...n(file index)\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + \"Example: user/e0123456 pass/******** mod/CS2113 file/0,1,2\" + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String WORKBIN_CSS_SELECTOR_ID \u003d \"a[href^\u003d\\\"/workbin\\\"]\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String TREEVIEW_CLASS_ID \u003d \"TreeView\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String FILE_DOWNLOAD_LINK_ATTRIBUTE_ID \u003d \"href\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String FILE_INDEX_SEPARATOR \u003d \",\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String fileIndexInput;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private ArrayList\u003cInteger\u003e fileSelect \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String availableDownloadFiles;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * secondary constructor to handle execution if user enters values with the PREFIX_SELECT_FILE prefix."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadSelectNotesCommand(String username, String password, String moduleCode, String fileIndexInput) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        super(username, password, moduleCode);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        this.fileIndexInput \u003d fileIndexInput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadSelectNotesCommand(String username, String password, String moduleCode) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        super(username, password, moduleCode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        fileSelect \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            for (String id : fileIndexInput.split(FILE_INDEX_SEPARATOR)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                fileSelect.add(Integer.parseInt(id));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_FILE_INDEX_ERROR + NEWLINE_SEPARATOR + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            extractFilesFromJar();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_EXTRACTION_JAR_FAIL);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            initializeChromeDriverPaths();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_CHROME_DRIVER_NOT_FOUND);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebDriver driver \u003d initializeWebDriver();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            loginIvle(driver);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NoSuchElementException nse) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_UNABLE_REACH_IVLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!isLoggedIn(driver)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_USERNAME_PASSWORD_ERROR + NEWLINE_SEPARATOR + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!isModuleExisting(driver)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_MODULE_NOT_FOUND + NEWLINE_SEPARATOR + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (fileSelect \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            availableDownloadFiles \u003d getFileNames(driver);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_DOWNLOAD_SELECT_SUCCESS + moduleCode"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    + NEWLINE_SEPARATOR + availableDownloadFiles);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         * Updated to disable download operations, if isDownloadDisabled\u003d\u003dtrue."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         * Function will not proceed after this if statement."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (isDownloadDisabled) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_DOWNLOAD_DISABLED);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        initializeDownloadFolder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            downloadFiles(driver);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (IndexOutOfBoundsException iobe) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_FILE_DOES_NOT_EXIST_ERROR + NEWLINE_SEPARATOR + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            dynamicWaiting();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (InterruptedException ie) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DYNAMIC_WAITING_INTERRUPTED);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        driver.close();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        model.addNotes(COMMAND_WORD, moduleCode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return new CommandResult(moduleCode + Messages.MESSAGE_DOWNLOAD_SUCCESS"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + downloadPath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * If user did not enter specified file name after the PREFIX_SELECT_FILES, program will search all available"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * files of the selected module and parse it into a string."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @return A string parsed with all the available files from that module."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String getFileNames(WebDriver driver) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebElement treeview \u003d driver.findElement(By.className(TREEVIEW_CLASS_ID));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e fileResult \u003d treeview.findElements(By.cssSelector(WORKBIN_CSS_SELECTOR_ID));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String result \u003d new String();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 0; i \u003c fileResult.size(); i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            result +\u003d (i + \": \" + fileResult.get(i).getText() + NEWLINE_SEPARATOR);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            //below statements are for debug. todo: remove when publishing"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            //System.out.println(fileResult.get(i).getText()); // filename"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            //System.out.println(fileResult.get(i).getAttribute(\"href\")); // link"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * Download files, download all the selected files mentioned after the PREFIX_SELECTED_FILES to the specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * download location"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param driver is the current existing WebDriver session"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    protected void downloadFiles(WebDriver driver) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        WebElement treeview \u003d driver.findElement(By.className(TREEVIEW_CLASS_ID));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        List\u003cWebElement\u003e fileResult \u003d treeview.findElements(By.cssSelector(WORKBIN_CSS_SELECTOR_ID));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int fileId : fileSelect) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            driver.get(fileResult.get(fileId).getAttribute(FILE_DOWNLOAD_LINK_ATTRIBUTE_ID));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 165
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\" + \"[\" + PREFIX_ENROLLED_MODULE + \"MODULE]...\" + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_EDIT_SELF_SUCCESS \u003d \"You have edited your own contact card.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public EditCommand(String index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToEdit;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (index.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personToEdit \u003d lastShownList.get(0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (Integer.parseInt(index) \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personToEdit \u003d lastShownList.get(Integer.parseInt(index) - 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (index.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(MESSAGE_EDIT_SELF_SUCCESS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e updatedEnrolledModules \u003d editPersonDescriptor.getEnrolledModules()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "                .orElse(personToEdit.getEnrolledModules());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e updatedTimeSlots \u003d personToEdit.getTimeSlots();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "                updatedEnrolledModules, updatedTimeSlots);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "        private Map\u003cString, EnrolledModule\u003e enrolledModules;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        private Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "            setEnrolledModules(toCopy.enrolledModules);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            setTimeSlots(toCopy.timeslots);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, enrolledModules);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * Sets {@code enrolledModules} to this object\u0027s {@code enrolledModules}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * A defensive copy of {@code enrolledModules} is used internally."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public void setEnrolledModules(Map\u003cString, EnrolledModule\u003e enrolledModules) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (enrolledModules !\u003d null) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "auskure"
        },
        "content": "                this.enrolledModules \u003d enrolledModules;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "auskure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "auskure"
        },
        "content": "                this.enrolledModules \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * Returns an unmodifiable map of enrolled modules, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "auskure"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code enrolledModules} is null."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public Optional\u003cMap\u003cString, EnrolledModule\u003e\u003e getEnrolledModules() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "auskure"
        },
        "content": "            if (enrolledModules !\u003d null) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return Optional.of(Collections.unmodifiableMap(enrolledModules));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "auskure"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return Optional.empty();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        public void setTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (timeslots !\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                this.timeslots \u003d timeslots;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                this.timeslots \u003d TimeSlots.initTimeSlots();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        public Map\u003cString, List\u003cTimeSlots\u003e\u003e getTimeSlots() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return timeslots;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u0026\u0026 getEnrolledModules().equals(e.getEnrolledModules());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 40,
      "auskure": 23,
      "-": 213,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.awt.datatransfer.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.awt.datatransfer.StringSelection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ByteArrayOutputStream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ObjectOutputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Export a person into string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Export a person\u0027s full details \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"into a string, which is used for import (into another NSync). \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Parameters: PUBLIC/PRIVATE, SELF/INDEX\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" public 1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String privacy;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ExportCommand(String privacy, String index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.privacy \u003d privacy;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Calls getSerializedString to get a Base64 string for the person selected through the index."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * This generated string is copied to the user\u0027s clipboard for convenience (easy pasting)."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws CommandException if the index given is invalid"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person myPerson;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (index.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            myPerson \u003d filteredPersonList.get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int num;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                num \u003d Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(String.format(\"You have entered an invalid number for the INDEX parameter. \""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    + \"Please enter a valid index.\\n\" + MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                (new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (num \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            myPerson \u003d filteredPersonList.get(num);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlotsNew;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person newPerson \u003d myPerson;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!privacy.equalsIgnoreCase(\"public\")) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            timeSlotsNew \u003d changeToBusy(myPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            newPerson \u003d new Person(myPerson.getName(), myPerson.getPhone(), myPerson.getEmail(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                myPerson.getAddress(), myPerson.getTags(), myPerson.getEnrolledModules(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                timeSlotsNew);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String serializedString \u003d getSerializedString(newPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        StringSelection ss \u003d new StringSelection(serializedString);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Clipboard clipboard \u003d Toolkit.getDefaultToolkit().getSystemClipboard();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        clipboard.setContents(ss, null);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String outputToUser \u003d serializedString + \"\\n\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser +\u003d \"The generated string has been copied onto your clip-board.\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new CommandResult(outputToUser);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Generates the Base64 String for the Person object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private String getSerializedString(Serializable o) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        try (ObjectOutputStream oos \u003d new ObjectOutputStream(baos)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            oos.writeObject(o);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            oos.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return Base64.getEncoder().encodeToString(baos.toByteArray());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return \"Error generating string. Please try again.\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Changes all time slots that have activities to a busy slot."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Map changeToBusy(Person source) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots \u003d source.getTimeSlots();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlotsNew \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e timeNew \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            List\u003cTimeSlots\u003e daySlots \u003d timeSlots.get(day);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            timeSlotsNew.put(day, timeNew);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots activity \u003d daySlots.get(i);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (!activity.toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    activity \u003d new TimeSlots(\"busy\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeNew.add(activity);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeNew.add(new TimeSlots(activity.toString()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            timeNew \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return timeSlotsNew;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!(other instanceof ExportCommand)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ExportCommand e \u003d (ExportCommand) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return this.privacy.equals(e.privacy)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \u0026\u0026 this.index.equals(e.index);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FilterCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.TimetableContainsModulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book who has any of the modules or time slots inputted."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Filters the list to based on free time slots and \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"modules taken \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Parameters: ACTIVITY/DAY TIME...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2101 mon 10am\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final TimetableContainsModulePredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FilterCommand(TimetableContainsModulePredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        model.getFilteredPersonList().filtered(new IsNotSelfOrMergedPredicate()).size()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 6,
      "-": 42,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Parameters: LIST(main, merged) KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"main \" + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "-": 40,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FreeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Checks for common free time slot for 1 or multiple people."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class FreeCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"free\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Displays the next available time slot for person(s) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"listed by their index number. \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Parameter: \" + PREFIX_FREE + \"[SELF/INDEX]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_FREE + \"self \" + PREFIX_FREE + \"1 \" + PREFIX_FREE + \"2\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private static final String MESSAGE_NOT_FREED \u003d \"There are no common free time slots found.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final List\u003cString\u003e indices;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Calendar myCal \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public FreeCommand(List\u003cString\u003e indices) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        lastShownList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // Check if inputs are valid"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // Checking could not be done in parser as Model is only available here"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String index : indices) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (index.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                currentIndex \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_INDEX_PARAMETER + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (currentIndex \u003c\u003d 0 || currentIndex \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // remove the first person from the list as we have reference to him in personFirst"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person personFirst;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (indices.get(0).equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            personFirst \u003d model.getFilteredPersonList().filtered(new IsSelfPredicate()).get(0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            personFirst \u003d lastShownList.get(Integer.parseInt(indices.get(0)) - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        indices.remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // start generation of output string to user"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String outputToUser \u003d \"The next available time-slot for\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser +\u003d \" \" + personFirst.getName() + \",\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // if trying to find free slots for more than 1 person, use the merge algorithm to create a merged timetable to"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // find a common free slot(s)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (indices.size() \u003e 0) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (String x : indices) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                Person personTemp;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (x.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    personTemp \u003d model.getFilteredPersonList().filtered(new IsSelfPredicate()).get(0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    personTemp \u003d lastShownList.get(Integer.parseInt(x) - 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                personFirst \u003d mergeTimetables(personFirst, personTemp, 0);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                outputToUser +\u003d \" \" + personTemp.getName() + \",\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            // only finding 1 person free slot, so use the merge algorithm to compare both the same person"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            // to change the time slots to free or busy tag"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            personFirst \u003d mergeTimetables(personFirst, personFirst, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser \u003d outputToUser.substring(0, outputToUser.length() - 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        outputToUser \u003d outputToUser + \" is: \";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Calendar rightNow \u003d getCurrentTime();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        int day \u003d rightNow.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // if today is saturday or sunday, loop back to monday"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        int dayToCheck;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        boolean isToday \u003d true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (day \u003d\u003d Calendar.SATURDAY || day \u003d\u003d Calendar.SUNDAY) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            isToday \u003d false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (day \u003d\u003d Calendar.MONDAY) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (day \u003d\u003d Calendar.TUESDAY) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (day \u003d\u003d Calendar.WEDNESDAY) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 2;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (day \u003d\u003d Calendar.THURSDAY) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 3;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck \u003d 4;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        int hourNow \u003d rightNow.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (hourNow \u003e\u003d 20) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            //after 8pm, loop to next day"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck++;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck %\u003d 5;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            hourNow \u003d 8;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            isToday \u003d false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cInteger\u003e listFoundSlot \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // loop for 6 days, the 6th day is to look for time that is on this day but hours before current hour"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (int i \u003d 0; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int timeSlotIndex \u003d 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int currentHourIndex \u003d hourNow - 8;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            listFoundSlot.clear();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            boolean found \u003d false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int prevIndex \u003d -1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            List\u003cTimeSlots\u003e timeslotToCheck \u003d personFirst.getTimeSlots().get(days[dayToCheck]);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (TimeSlots x : timeslotToCheck) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (x.toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    // do not add hours that are before current time if it is today"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    if ((isToday \u0026\u0026 (!(timeSlotIndex \u003c currentHourIndex))) || (!isToday)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        // finding consecutive slots"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        if (found \u003d\u003d false) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            found \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            prevIndex \u003d timeSlotIndex;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            if (timeSlotIndex - prevIndex !\u003d 1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                                prevIndex \u003d timeSlotIndex;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                        listFoundSlot.add(timeSlotIndex);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                timeSlotIndex++;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String timeFrom;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String timeTo;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            DateFormat sdf \u003d new SimpleDateFormat(\"EEE hh:mm aa\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (listFoundSlot.size() \u003e 0) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                // found a free slot"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                int foundHour \u003d listFoundSlot.get(0) + 8;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                int endHour \u003d (listFoundSlot.get(listFoundSlot.size() - 1) + 9);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (!(isToday \u0026\u0026 (foundHour \u003d\u003d hourNow))) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    isToday \u003d false;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (isToday) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeFrom \u003d sdf.format(rightNow.getTime());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeTo \u003d getTimeFormatted(endHour);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    outputToUser +\u003d timeFrom + \" - \" + timeTo;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    return new CommandResult(outputToUser);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeFrom \u003d getTimeFormatted(foundHour);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    timeTo \u003d getTimeFormatted(endHour);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    outputToUser +\u003d days[dayToCheck] + \" \" + timeFrom + \" - \" + timeTo;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                return new CommandResult(outputToUser);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck++;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            dayToCheck %\u003d 5;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            hourNow \u003d 8;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            isToday \u003d false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // if after 6 loops and we are not able to find a common timeslot, returns message"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // to inform user that there is no common free timeslot"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new CommandResult(MESSAGE_NOT_FREED);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public Calendar getCurrentTime() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (myCal \u003d\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            myCal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return myCal;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void setCurrentTime(Calendar tCal) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        myCal \u003d tCal;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Formats the time into readable String"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @param Hour"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private String getTimeFormatted(int hours) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String amPm \u003d \"AM\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (hours \u003e 12) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            hours %\u003d 12;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            amPm \u003d \"PM\";"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (hours \u003d\u003d 12) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            amPm \u003d \"PM\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return hours + \":00 \" + amPm;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Merges 2 people into a single person with a merged timetable."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Person mergeTimetables(Person person1, Person person2, int index) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Name mergedName \u003d new Name(\"a\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Phone phone \u003d new Phone(\"99999999\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Email email \u003d new Email(\"notimportant@no\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            address \u003d new Address(person1.getName().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            address \u003d new Address(person1.getAddress().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Set\u003cTag\u003e mergedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        mergedTags.add(new Tag(\"merged\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e mergedSlots \u003d mergeTimeSlots(person1.getTimeSlots(), person2.getTimeSlots());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new Person(mergedName, phone, email, address, mergedTags, enrolledClassMap,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            mergedSlots);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    //@@author leegengyu-reused"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    //Reused from MergeCommand.java"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Creates a new merged timetable from 2 timetables."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e mergeTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e slots1,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                                                        Map\u003cString, List\u003cTimeSlots\u003e\u003e slots2) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] mon1 \u003d slots1.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] mon2 \u003d slots2.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] tue1 \u003d slots1.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] tue2 \u003d slots2.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] wed1 \u003d slots1.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] wed2 \u003d slots2.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] thu1 \u003d slots1.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] thu2 \u003d slots2.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] fri1 \u003d slots1.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        TimeSlots[] fri2 \u003d slots2.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalMon;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalTue;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalWed;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalThu;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalFri;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e finalSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalMon \u003d compareTimeSlots(mon1, mon2);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalTue \u003d compareTimeSlots(tue1, tue2);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalWed \u003d compareTimeSlots(wed1, wed2);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalThu \u003d compareTimeSlots(thu1, thu2);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalFri \u003d compareTimeSlots(fri1, fri2);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"mon\", finalMon);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"tue\", finalTue);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"wed\", finalWed);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"thu\", finalThu);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        finalSlots.put(\"fri\", finalFri);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return finalSlots;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "content": "    //@@author leegengyu-reused"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    //Reused from UpdateMergeCommand.java"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Compares 2 lists of time slots and returns a merged list."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    List\u003cTimeSlots\u003e compareTimeSlots(TimeSlots[] day1, TimeSlots[] day2) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cTimeSlots\u003e finalDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (day1[i].toString().equalsIgnoreCase(\"free\")"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                || day1[i].toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                day1[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    Integer.parseInt(day1[i].toString());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    day1[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            if (day2[i].toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String day1BusyCount \u003d day1[i].toString();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String day2BusyCount \u003d day2[i].toString();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int totalBusyCount \u003d Integer.parseInt(day1BusyCount) + Integer.parseInt(day2BusyCount);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String newBusyCount \u003d Integer.toString(totalBusyCount);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            finalDay.add(new TimeSlots(newBusyCount));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return finalDay;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    // for JUnit testing, both commands are equal if the List\u003cString\u003e indices are equal"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else if (other instanceof FreeCommand) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (String x : indices) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                if (!x.equalsIgnoreCase(((FreeCommand) other).indices.get(index))) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "leegengyu": 366
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Import a person from a string"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": import a contact into NSync. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Parameters: YOUR_ENCODED_STRING\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \" + \"[PASTE_YOUR_ENCODED_STRING_HERE]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Import Successful!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS_OVERWRITE \u003d \"Import Successful! \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"An existing contact has been found in NSync and has been overwritten.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String MESSAGE_FAILED \u003d \"Import Failed!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final String personString;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ImportCommand(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.personString \u003d input.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Reads the input Base64 String and serialize a person object and add it into NSync"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * overwrites user data if person already exists"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person p \u003d getSerializedPerson(personString);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String outputToUser \u003d MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (model.hasPerson(p)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            model.deletePerson(p);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            outputToUser \u003d MESSAGE_SUCCESS_OVERWRITE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        model.addPerson(p);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new CommandResult(outputToUser);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Serialize a Person object from the given Base64 String"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws CommandException if the given Base64 string is bad and is unable to serialize an object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Person getSerializedPerson(String s) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            byte[] data \u003d Base64.getDecoder().decode(s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            ObjectInputStream ois \u003d new ObjectInputStream(new ByteArrayInputStream(data));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            Person p \u003d (Person) ois.readObject();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return p;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new CommandException(MESSAGE_FAILED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return this.personString.equalsIgnoreCase(((ImportCommand) obj).personString);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MergeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MERGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Merges the timetables of multiple people"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MergeCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"merge\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Merges the timetables of selected people \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Parameters: INDEX (must be positive integer) + GROUP NAME (must not be empty)\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + PREFIX_MERGE + \"[INDEX] \" + PREFIX_NAME + \"[GROUP NAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"for all timetables you want to merge.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_MERGE + \"1 \" + PREFIX_MERGE + \"2 \" + PREFIX_NAME"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"GES PROJECT\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_MERGE_TIMETABLE_SUCCESS \u003d \"Timetables Merged\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Invalid index. Index selected does not exist.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_UPDATE_GROUP_SUCCESS \u003d \"Group has been edited: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_INDEX_NEEDS_TO_BE_NUMBER \u003d \"Invalid index. Index needs to be a positive \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"integer\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_NO_GROUP_NAME \u003d \"No group name entered.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final List\u003cInteger\u003e indices;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public MergeCommand(List\u003cInteger\u003e indices, String name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.indices \u003d indices;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e selfList \u003d ((ObservableList\u003cPerson\u003e) lastShownList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] personsToMerge \u003d new Person[lastShownList.size()];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Integer index : indices) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (index \u003e lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int it : indices) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it \u003e mainList.size() - 1 || it \u003c 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        MergeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personsToMerge[i] \u003d mainList.get(it);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge[i] \u003d selfList.get(0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        i++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 0; j \u003c i - 1; j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personsToMerge[j + 1] \u003d mergeTimetables(personsToMerge[j], personsToMerge[j + 1], j);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (model.hasPerson(personsToMerge[i - 1])) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            model.updatePerson(personsToMerge[i - 1], personsToMerge[i - 1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            model.commitAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_UPDATE_GROUP_SUCCESS, name));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(personsToMerge[i - 1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_MERGE_TIMETABLE_SUCCESS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                || (other instanceof MergeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 indices.equals(((MergeCommand) other).indices) \u0026\u0026 name.equals(((MergeCommand) other).name));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Merges 2 people into a single person with a merged timetable"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Person mergeTimetables(Person person1, Person person2, int index) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name mergedName \u003d name;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Phone phone \u003d new Phone(\"99999999\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d new Email(\"notimportant@no\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getName().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getAddress().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Set\u003cTag\u003e mergedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTags.add(new Tag(\"merged\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e mergedSlots \u003d mergeTimeSlots(person1.getTimeSlots(), person2.getTimeSlots());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new Person(mergedName, phone, email, address, mergedTags, enrolledClassMap,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                mergedSlots);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a new merged timetable from 2 timetables."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e mergeTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e slots1,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                                        Map\u003cString, List\u003cTimeSlots\u003e\u003e slots2) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon1 \u003d slots1.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon2 \u003d slots2.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue1 \u003d slots1.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue2 \u003d slots2.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed1 \u003d slots1.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed2 \u003d slots2.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu1 \u003d slots1.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu2 \u003d slots2.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri1 \u003d slots1.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri2 \u003d slots2.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalMon;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalTue;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalWed;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalThu;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalFri;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e finalSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalMon \u003d compareTimeSlots(mon1, mon2);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalTue \u003d compareTimeSlots(tue1, tue2);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalWed \u003d compareTimeSlots(wed1, wed2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalThu \u003d compareTimeSlots(thu1, thu2);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalFri \u003d compareTimeSlots(fri1, fri2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"mon\", finalMon);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"tue\", finalTue);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"wed\", finalWed);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"thu\", finalThu);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"fri\", finalFri);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalSlots;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Compares 2 lists of time slots and returns a merged list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    List\u003cTimeSlots\u003e compareTimeSlots(TimeSlots[] day1, TimeSlots[] day2) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day1[i].toString().equalsIgnoreCase(\"free\")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    || day1[i].toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day1[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    Integer.parseInt(day1[i].toString());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    day1[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day2[i].toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day1BusyCount \u003d day1[i].toString();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day2BusyCount \u003d day2[i].toString();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int totalBusyCount \u003d Integer.parseInt(day1BusyCount) + Integer.parseInt(day2BusyCount);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String newBusyCount \u003d Integer.toString(totalBusyCount);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            finalDay.add(new TimeSlots(newBusyCount));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalDay;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 136,
      "auskure": 2,
      "-": 64,
      "leegengyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        filteredPersonList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 3,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowNotesCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.util.FileUtil.currentDirectory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * ShowNotesCommand locates the \"notes\" folder as specified by the DownloadAbstract class, it then recursively"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * searches for the files and sorts them based on the file type: Directory or file. And appends tabs and spaces"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * according to the depth of the file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * ShowNotesCommand extends on the Command class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class ShowNotesCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showNotes\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String DIRECTORY_IDENTIFIER \u003d \"Directory: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String FILE_IDENTIFIER \u003d \"File: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String NEWLINE_SEPARATOR \u003d \"\\r\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static final String NOTES_PATH_EXTENSION \u003d DownloadAbstract.DOWNLOAD_FILE_PATH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String currentDirPath \u003d currentDirectory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String notesPath \u003d currentDirPath + NOTES_PATH_EXTENSION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String notesResult \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private String messageShownotesSuccess \u003d \"Here are your Notes stored in:\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            + NEWLINE_SEPARATOR + notesPath + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private int defaultTabCount \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static String getNotesPathExtension() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return NOTES_PATH_EXTENSION;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            getDirectoryFileValues(new File(notesPath), defaultTabCount);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_FILE_LOCATION_ERROR);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return new CommandResult(messageShownotesSuccess + notesResult);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * recursively searches for all the files and parses it into notesResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param dir   the current starting directory."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * @param count used to keeptrack of the number of tabs."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void getDirectoryFileValues(File dir, int count) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File[] files \u003d dir.listFiles();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (count \u003d\u003d 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            notesResult +\u003d LINE_SEPARATOR + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *  tabPlaceholder is used to insert tabs to make it look more visually appealing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         *  Count is recursively increased, ie: the deeper the directory, the more tabs the files would have."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String tabPlaceholder \u003d \"\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            tabPlaceholder +\u003d \"\\t\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        for (File currentFile : files) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (currentFile.isDirectory()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    notesResult +\u003d LINE_SEPARATOR + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                notesResult +\u003d tabPlaceholder + DIRECTORY_IDENTIFIER + currentFile.getName() + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                getDirectoryFileValues(currentFile, count + 1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                notesResult +\u003d tabPlaceholder + FILE_IDENTIFIER + currentFile.getName() + NEWLINE_SEPARATOR;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateMergedCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsMergedPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Updates all the groups you have with the lastest timetables from the contacts in the group."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class UpdateMergedCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_UPDATE_SUCCESS \u003d \"Groups updated\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_PERSONS \u003d \"Groups updated. \\nContacts who were in\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \" \" + \"groups were detected to have been deleted.\\nList of deleted contacts and affected groups: \\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_GROUPS \u003d \"Some groups have been deleted because \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            + \"all members except yourself have been removed from your contacts: \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mergedList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                (new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, ArrayList\u003cString\u003e\u003e removedPersons \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e removedGroups \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int l \u003d 0; l \u003c mergedList.size(); l++) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            boolean personCheck \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Person merged \u003d mergedList.get(l);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Address people \u003d merged.getAddress();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Name groupName \u003d merged.getName();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String groupNameString \u003d groupName.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String peopleString \u003d people.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            peopleString \u003d peopleString.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String[] persons \u003d peopleString.split(\"\\\\s*(\u003d\u003e|,|\\\\s)\\\\s\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Person[] personsToMerge \u003d new Person[persons.length + 1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String name : persons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String[] splitName \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (!name.equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    List\u003cString\u003e getPerson \u003d new ArrayList\u003c\u003e(Arrays.asList(splitName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    List\u003cPerson\u003e singlePersonList \u003d ((FilteredList\u003cPerson\u003e) mainList).filtered"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            (new NameContainsKeywordsPredicate(getPerson));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (singlePersonList.size() \u003c 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        if (removedPersons.get(name) \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            removedPersons.put(name, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        removedPersons.get(name).add(groupNameString);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    Person person \u003d singlePersonList.get(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    personsToMerge[i] \u003d person;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    personCheck \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (!personCheck) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                model.deletePerson(merged);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                removedGroups.add(groupNameString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            List\u003cPerson\u003e selfList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personsToMerge[i] \u003d selfList.get(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (int j \u003d 0; j \u003c i - 1; j++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                personsToMerge[j + 1] \u003d mergeTimetables(personsToMerge[j], personsToMerge[j + 1], j, groupName);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            model.updatePerson(personsToMerge[i - 1], personsToMerge[i - 1]);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!removedPersons.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String outputPersons \u003d createCorrectOutput(removedPersons);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (!removedGroups.isEmpty()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String outputGroups \u003d createCorrectOutputGroups(removedGroups);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return new CommandResult(MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_PERSONS + outputPersons"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        + MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_GROUPS + outputGroups);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_PERSONS + outputPersons);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new CommandResult(MESSAGE_UPDATE_SUCCESS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Merges 2 people into a single person with a merged timetable"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Person mergeTimetables(Person person1, Person person2, int index, Name name) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name mergedName \u003d name;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Phone phone \u003d new Phone(\"99999999\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Email email \u003d new Email(\"notimportant@no\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getName().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getAddress().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Set\u003cTag\u003e mergedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTags.add(new Tag(\"merged\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e mergedSlots \u003d mergeTimeSlots(person1.getTimeSlots(), person2.getTimeSlots());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, seedu.address.model.enrolledmodule.EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new Person(mergedName, phone, email, address, mergedTags, enrolledClassMap,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                mergedSlots);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a new merged timetable from 2 timetables."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e mergeTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e slots1,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                                        Map\u003cString, List\u003cTimeSlots\u003e\u003e slots2) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon1 \u003d slots1.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon2 \u003d slots2.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue1 \u003d slots1.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue2 \u003d slots2.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed1 \u003d slots1.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed2 \u003d slots2.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu1 \u003d slots1.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu2 \u003d slots2.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri1 \u003d slots1.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri2 \u003d slots2.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalMon;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalTue;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalWed;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalThu;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalFri;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e finalSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalMon \u003d compareTimeSlots(mon1, mon2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalTue \u003d compareTimeSlots(tue1, tue2);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalWed \u003d compareTimeSlots(wed1, wed2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalThu \u003d compareTimeSlots(thu1, thu2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalFri \u003d compareTimeSlots(fri1, fri2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"mon\", finalMon);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"tue\", finalTue);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"wed\", finalWed);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"thu\", finalThu);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"fri\", finalFri);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalSlots;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Compares 2 lists of time slots and returns a merged list."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    List\u003cTimeSlots\u003e compareTimeSlots(TimeSlots[] day1, TimeSlots[] day2) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day1[i].toString().equalsIgnoreCase(\"free\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    || day1[i].toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day1[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    Integer.parseInt(day1[i].toString());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    day1[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day2[i].toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day1BusyCount \u003d day1[i].toString();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day2BusyCount \u003d day2[i].toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int totalBusyCount \u003d Integer.parseInt(day1BusyCount) + Integer.parseInt(day2BusyCount);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String newBusyCount \u003d Integer.toString(totalBusyCount);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            finalDay.add(new TimeSlots(newBusyCount));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalDay;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Takes a map of the contacts who have been deleted and the groups affected by their deletion and returns the"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * correct output"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    String createCorrectOutput(Map\u003cString, ArrayList\u003cString\u003e\u003e removedPersons) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Iterator\u003cMap.Entry\u003cString, ArrayList\u003cString\u003e\u003e\u003e it \u003d removedPersons.entrySet().iterator();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Map.Entry\u003cString, ArrayList\u003cString\u003e\u003e removedName \u003d it.next();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            output \u003d output + removedName.getKey() + \":\" + \" \";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            ArrayList\u003cString\u003e removedModules \u003d removedName.getValue();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String affectedGroup : removedModules) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (affectedGroup.equalsIgnoreCase(removedModules.get(removedModules.size() - 1))) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    output \u003d output + affectedGroup + \"\\n\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    output \u003d output + affectedGroup + \", \";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Takes a list of groups that have been deleted and returns the correct output"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    String createCorrectOutputGroups(List\u003cString\u003e removedGroups) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : removedGroups) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (!it.equalsIgnoreCase(removedGroups.get(removedGroups.size() - 1))) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                output \u003d output + it + \", \";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                output \u003d output + it;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 250
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.AddCommand.MESSAGE_CANNOT_ADD_MERGED_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                            PREFIX_ADDRESS, PREFIX_TAG, PREFIX_ENROLLED_MODULE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledModuleList \u003d ParserUtil.parseEnrolledModules("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        argMultimap.getAllValues(PREFIX_ENROLLED_MODULE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag tagCheck : tagList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (tagCheck.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new ParseException(MESSAGE_CANNOT_ADD_MERGED_TAG);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, enrolledModuleList, TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8,
      "auskure": 7,
      "-": 60,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ChangeTimeSlotCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ClearNotesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.DeleteSelectNotesCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ShowNotesCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.UpdateMergedCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Time Table Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        case ChangeTimeSlotCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new ChangeTimeSlotCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case FreeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new FreeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        case MergeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            return new MergeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        case UpdateMergedCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new UpdateMergedCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Download Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case ClearNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return new ClearNotesCommand();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case DeleteSelectNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return new DeleteSelectNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case DownloadAllNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return new DownloadAllNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "        case DownloadSelectNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return new DownloadSelectNotesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        case ShowNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new ShowNotesCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 19,
      "BearPerson1": 2,
      "auskure": 12,
      "-": 95,
      "leegengyu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ChangeTimeSlotCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.ChangeTimeSlotCommand.MESSAGE_INVALID_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.ChangeTimeSlotCommand.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.ChangeTimeSlotCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ChangeTimeSlotCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ChangeTimeSlotCommandParser implements Parser\u003cChangeTimeSlotCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ChangeTimeSlotCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] actions \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (actions.length \u003c 4) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (actions.length % 3 !\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index \u003d actions[0];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 1; i \u003c actions.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (isInvalidDay(actions[i])) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_DAY + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (i % 3 \u003d\u003d 2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (isInvalidTime(actions[i])) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    throw new ParseException(MESSAGE_INVALID_TIME + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new ChangeTimeSlotCommand(index, actions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Checks if the day inputted is valid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    Boolean isInvalidDay(String day) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!day.equalsIgnoreCase(\"mon\") \u0026\u0026 !day.equalsIgnoreCase(\"tue\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !day.equalsIgnoreCase(\"wed\") \u0026\u0026 !day.equalsIgnoreCase(\"thu\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !day.equalsIgnoreCase(\"fri\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Checks if the time inputted is valid"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    Boolean isInvalidTime(String time) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!time.equalsIgnoreCase(\"8am\") \u0026\u0026 !time.equalsIgnoreCase(\"9am\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"10am\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"11am\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"12pm\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"1pm\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"2pm\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"3pm\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"4pm\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"5pm\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"6pm\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 !time.equalsIgnoreCase(\"7pm\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final Prefix PREFIX_ENROLLED_MODULE \u003d new Prefix(\"em/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MERGE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"user/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"pass/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_MODULECODE \u003d new Prefix(\"mod/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final Prefix PREFIX_SELECT_FILE \u003d new Prefix(\"file/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final Prefix PREFIX_FREE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 4,
      "auskure": 1,
      "-": 15,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] deleteKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (deleteKeywords.length !\u003d 2) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!deleteKeywords[0].equalsIgnoreCase(\"main\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                \u0026\u0026 !deleteKeywords[0].equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(deleteKeywords[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return new DeleteCommand(deleteKeywords[0], index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 17,
      "-": 26,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteSelectNotesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DeleteSelectNotesCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Parses input arguments and creates a new DeleteSelectNotesCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class DeleteSelectNotesCommandParser implements Parser\u003cDeleteSelectNotesCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public DeleteSelectNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "            Set\u003cString\u003e moduleNames \u003d ParserUtil.parseSelectModuleNames(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return new DeleteSelectNotesCommand(moduleNames);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteSelectNotesCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DownloadAllNotesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULECODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAllNotesCommandParser parses the input that follows after the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAllNotesCommand.COMMAND_WORD that follows the prefix. and creates a new DownloadAllNotesCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadAllNotesCommandParser implements the interface parser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadAllNotesCommandParser implements Parser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadAllNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                PREFIX_MODULECODE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD, PREFIX_USERNAME, PREFIX_MODULECODE)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    DownloadAllNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULECODE).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return new DownloadAllNotesCommand(username, password, moduleCode);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DownloadSelectNotesCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULECODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SELECT_FILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadSelectNotesCommandParser parses the input that is followed after the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadSelectNotesCommand.COMMAND_WORD. Has 2 different constructors depending on the existence of the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * PREFIX_SELECT_FILE prefix and creates a new DownloadSelectNotesCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " * DownloadSelectNotesCommandParser implements interface Parser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadSelectNotesCommandParser implements Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public DownloadSelectNotesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                PREFIX_MODULECODE, PREFIX_SELECT_FILE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PASSWORD, PREFIX_USERNAME, PREFIX_MODULECODE)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                    DownloadSelectNotesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String username \u003d argMultimap.getValue(PREFIX_USERNAME).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String password \u003d argMultimap.getValue(PREFIX_PASSWORD).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String moduleCode \u003d argMultimap.getValue(PREFIX_MODULECODE).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SELECT_FILE).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            String fileSelect \u003d argMultimap.getValue(PREFIX_SELECT_FILE).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            if (fileSelect.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                        Messages.MESSAGE_DOWNLOAD_SELECT_NO_FILES_SELECTED));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new DownloadSelectNotesCommand(username, password, moduleCode, fileSelect);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            return new DownloadSelectNotesCommand(username, password, moduleCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENROLLED_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_ENROLLED_MODULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Index indexCheck;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (argMultimap.getPreamble().equalsIgnoreCase(\"self\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                indexCheck \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                index \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "        parseEnrolledModulesForEdit(argMultimap.getAllValues(PREFIX_ENROLLED_MODULE))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "                .ifPresent(editPersonDescriptor::setEnrolledModules);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : tagSet) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"self\") || it.equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new ParseException(\"Not allowed to set Self or Merged tag\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e enrolledModules} into a {@code Map\u003cString, EnrolledModule\u003e} if {@code tags}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * is non-empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * If {@code enrolledModules} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * {@code Map\u003cString, EnrolledModule\u003e} containing zero enrolledModules."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Optional\u003cMap\u003cString, EnrolledModule\u003e\u003e parseEnrolledModulesForEdit(Collection\u003cString\u003e enrolledModules)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assert enrolledModules !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (enrolledModules.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Collection\u003cString\u003e enrolledModulesMap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (enrolledModules.size() \u003d\u003d 1 \u0026\u0026 enrolledModules.contains(\"\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolledModulesMap \u003d Collections.emptySet();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolledModulesMap \u003d enrolledModules;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Optional.of(ParserUtil.parseEnrolledModules(enrolledModulesMap));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 14,
      "auskure": 31,
      "-": 79,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PRIVACY_PARAMETER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!keywords[0].equalsIgnoreCase(\"private\") \u0026\u0026 !keywords[0].equalsIgnoreCase(\"public\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                    MESSAGE_INVALID_PRIVACY_PARAMETER + ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (keywords.length \u003e 2) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new ExportCommand(keywords[0], keywords[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FilterCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.TimetableContainsModulePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FilterCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String day : days) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (keywords[i].equalsIgnoreCase(day)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (i + 1 \u003e\u003d keywords.length) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    String time \u003d keywords[i + 1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    int timeIndex \u003d changeTimeToIndex(time);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (timeIndex \u003d\u003d 13) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    keywords[i + 1] \u003d Integer.toString(timeIndex);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new FilterCommand(new TimetableContainsModulePredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Changes an inputted time into the correct index in the list of time slots in a day"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private int changeTimeToIndex(String time) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int index \u003d 13;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (time.equalsIgnoreCase(\"8am\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"9am\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"10am\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"11am\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 3;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"12pm\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 4;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"1pm\")) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 5;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"2pm\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 6;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"3pm\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 7;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"4pm\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 8;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"5pm\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 9;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"6pm\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 10;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else if (time.equalsIgnoreCase(\"7pm\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            index \u003d 11;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 56,
      "-": 26,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!nameKeywords[0].equalsIgnoreCase(\"merged\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 !nameKeywords[0].equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 5,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FreeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.commands.FreeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Parses input arguments and creates a new FreeCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class FreeCommandParser implements Parser\u003cFreeCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FreeCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * and returns an FreeCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public FreeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FREE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        List\u003cString\u003e indices \u003d argMultimap.getAllValues(PREFIX_FREE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (indices.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new FreeCommand(indices);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.commands.ImportCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new ImportCommand(args.trim());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MergeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.MergeCommand.MESSAGE_INDEX_NEEDS_TO_BE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.MergeCommand.MESSAGE_NO_GROUP_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.MergeCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MERGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FilterCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class MergeCommandParser implements Parser\u003cMergeCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public MergeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MERGE, PREFIX_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e indices \u003d argMultimap.getAllValues(PREFIX_MERGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cInteger\u003e numIndices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e name \u003d argMultimap.getAllValues(PREFIX_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int numIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (indices.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MergeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(MESSAGE_NO_GROUP_NAME + \" \" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (name.get(0).isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            throw new ParseException(MESSAGE_NO_GROUP_NAME + \" \" + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String index : indices) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                numIndex \u003d Integer.parseInt(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                numIndices.add(numIndex - 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                throw new ParseException(MESSAGE_INDEX_NEEDS_TO_BE_NUMBER + MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new MergeCommand(numIndices, name.get(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 31,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses {@code concatenatedStrings} into a {@code String[]} and returns it."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws ParseException if {@code concatenatedStrings} is empty."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e parseSelectModuleNames(String concatenatedStrings) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String trimmedIndex \u003d concatenatedStrings.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (trimmedIndex.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String[] stringArray \u003d trimmedIndex.split(\" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e moduleNames \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String tempName : stringArray) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "            moduleNames.add(tempName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return moduleNames;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses a {@code String enrolledmodule} into a {@code EnrolledModule}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws ParseException if the given {@code enrolledmodule} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static EnrolledModule parseEnrolledModule(String enrolledModule) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(enrolledModule);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String trimmedEnrolledModule \u003d enrolledModule.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!EnrolledModule.isValidEnRolledModuleName(trimmedEnrolledModule)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new ParseException(EnrolledModule.MESSAGE_ENROLLED_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new EnrolledModule(trimmedEnrolledModule);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e enrolledModules} into a {@code Map\u003cString, EnrolledModule\u003e}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Map\u003cString, EnrolledModule\u003e parseEnrolledModules(Collection\u003cString\u003e enrolledModules)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(enrolledModules);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final Map\u003cString, EnrolledModule\u003e enrolledModuleMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": "        EnrolledModule tempEnrolledModule;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String enrolledModuleName : enrolledModules) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempEnrolledModule \u003d parseEnrolledModule(enrolledModuleName);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledModuleMap.put(enrolledModuleName, tempEnrolledModule);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledModuleMap;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "auskure": 54,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (toBeCopied.getPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            setSelf();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void setSelf() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person self \u003d (new Person(new Name(\"Self\"), new Phone(\"000\"), new Email(\"self@self\"), new Address(\"self\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"self\"), new TreeMap\u003c\u003e(), TimeSlots.initTimeSlots()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        persons.add(self);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 13,
      "-": 119,
      "leegengyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void resetAddressBookData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Manipulation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void resetNotesData(ReadOnlyNotesDownloaded newData);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an unmodifiable view of the list of downloaded notes"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "    ReadOnlyNotesDownloaded getNotesList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * clears the list of notes"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void clearNotesData(String event);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * add a new entry to the list of downloaded notes"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void addNotes(String event, String moduleName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * remove existing notes from the list of downloaded notes, and deletes those notes from storage"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void deleteSelectedNotes(String event, Set\u003cString\u003e moduleNames);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 44,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final NotesDownloaded notesDownloaded;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyNotesDownloaded notesData, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded \u003d new NotesDownloaded(notesData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this(new AddressBook(), new NotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void resetAddressBookData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Manipulation \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void resetNotesData(ReadOnlyNotesDownloaded newData) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded.clear();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded.setNotes(newData.getNotesList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an unmodifiable view of the list of downloaded notes"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public ReadOnlyNotesDownloaded getNotesList() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesDownloaded;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * clears the list of notes"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void clearNotesData(String event) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded.clear();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "        indicateNotesManipulated(event);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * add a new entry to the list of downloaded notes"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void addNotes(String event, String moduleCode) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded.addNotes(moduleCode);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "auskure"
        },
        "content": "        indicateNotesManipulated(event, moduleCode);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * remove existing notes from the list of downloaded notes, and deletes those notes from storage"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteSelectedNotes(String event, Set\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded.deleteSelectedNotes(moduleCodes);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "auskure"
        },
        "content": "        indicateNotesManipulated(event, moduleCodes);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Raises an event to indicate that the current notes are manipulated"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private void indicateNotesManipulated(String event, Set\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "auskure"
        },
        "content": "        raise(new NotesEvent(event, moduleCodes));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /** Raises an event to indicate the current notes are manipulated */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private void indicateNotesManipulated(String event, String moduleCode) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e tempSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "auskure"
        },
        "content": "        tempSet.add(moduleCode);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "auskure"
        },
        "content": "        raise(new NotesEvent(event, tempSet));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /** Raises an event to indicate the current notes are manipulated */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private void indicateNotesManipulated(String event) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e tempSet \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "auskure"
        },
        "content": "        raise(new NotesEvent(event, tempSet));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "auskure"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "auskure"
        },
        "content": "                \u0026\u0026 notesDownloaded.equals(other.notesDownloaded);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 70,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/model/NotesDownloaded.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Duplicates are not allowed (by the nature of the Set Data Structure)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class NotesDownloaded implements ReadOnlyNotesDownloaded {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Set\u003cString\u003e notesList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesList \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloaded() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Creates a notesDownloaded, using the notes the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloaded(ReadOnlyNotesDownloaded toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Creates a notesDownloaded object, which keeps track of the notes downloaded,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * using the notes the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloaded(Set\u003cString\u003e toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    //// notes overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Replaces the contents of the notes list with {@code notes}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void setNotes(Set\u003cString\u003e notes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesList.clear();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesList.addAll(notes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Resets the existing data of this {@code NotesDownloaded} with {@code newData}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void resetData(ReadOnlyNotesDownloaded newData) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "        setNotes(newData.getNotesList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Resets the existing data of this {@code NotesDownloaded} with {@code newData}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void resetData(Set\u003cString\u003e newData) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        setNotes(newData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Clears the existing data of this {@code NotesDownloaded}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesList.clear();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "    //// notes-level operations"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Adds new notes to the NotesDownloaded"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * If the notes already exist, no new entry will be created."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void addNotes(String n) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesList.add(n);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Removes {@code moduleCodes} from this {@code notes}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteSelectedNotes(Set\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String tempName : moduleCodes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "            for (Iterator\u003cString\u003e iterator \u003d notesList.iterator(); iterator.hasNext();) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "                String tempNotes \u003d iterator.next();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "                if (tempNotes.contains(tempName)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "                    iterator.remove();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesList.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Set\u003cString\u003e getNotesList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Collections.unmodifiableSet(notesList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "                || (other instanceof NotesDownloaded // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "                \u0026\u0026 notesList.equals(((NotesDownloaded) other).notesList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyNotesDownloaded.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Unmodifiable view of the list of downloaded modules"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "public interface ReadOnlyNotesDownloaded {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an unmodifiable view of the modules set."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * This set will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Set\u003cString\u003e getNotesList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Path notesFolderPath \u003d Paths.get(\"notes\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Path getNotesFolderPath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesFolderPath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void setNotesFolderPath(Path notesFolderPath) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesFolderPath \u003d notesFolderPath;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 9,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/enrolledmodule/EnrolledModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.model.enrolledmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Represents a Person\u0027s enrolled module in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidEnRolledModuleName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class EnrolledModule implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String MESSAGE_ENROLLED_MODULE_CONSTRAINTS \u003d \"Enrolled Module names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String ENROLLED_MODULE_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public final String enrolledModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public final String notesStoragePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Constructs a {@code enrolled module}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @param enrolledModuleName A valid enrolled module name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public EnrolledModule(String enrolledModuleName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(enrolledModuleName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "        checkArgument(isValidEnRolledModuleName(enrolledModuleName), MESSAGE_ENROLLED_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.enrolledModuleName \u003d enrolledModuleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesStoragePath \u003d \"home/\" + enrolledModuleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns true if a given string is a valid enrolled module name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static boolean isValidEnRolledModuleName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return test.matches(ENROLLED_MODULE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "            || (other instanceof EnrolledModule // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 enrolledModuleName.equals(((EnrolledModule) other).enrolledModuleName));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledModuleName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return \u0027[\u0027 + enrolledModuleName + \u0027]\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Address implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 57,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Email implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 66,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsMergedPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class IsMergedPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public IsMergedPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag it : person.getTags()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsNotSelfOrMergedPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} does not contain merged or self tag"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class IsNotSelfOrMergedPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public IsNotSelfOrMergedPredicate() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag it : person.getTags()) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.toString().equalsIgnoreCase(\"[merged]\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    || it.toString().equalsIgnoreCase(\"[self]\")) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/IsSelfPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class IsSelfPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public IsSelfPredicate() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag it : person.getTags()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.toString().equalsIgnoreCase(\"[self]\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Name implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \"Your name input should only contain 50 characters (i.e. alphanumeric characters and spaces) at maximum, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                + \"and it should not be blank.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final int NAME_MAXIMUM_LENGTH \u003d 50;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d NAME_MAXIMUM_LENGTH;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 56,
      "leegengyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (keywords.size() \u003e 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int isMerged \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (keywords.get(0).equalsIgnoreCase(\"merged\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (tag.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        isMerged \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (isMerged \u003d\u003d 0) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (keywords.get(0).equalsIgnoreCase(\"main\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                for (Tag tag : person.getTags()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (tag.toString().equalsIgnoreCase(\"[merged]\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            || tag.toString().equalsIgnoreCase(\"[self]\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 23,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Person implements Serializable {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Map\u003cString, EnrolledModule\u003e enrolledModules \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private final Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Name, Phone, Email, Address and Tags are to be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "                  Set\u003cTag\u003e tags, Map\u003cString, EnrolledModule\u003e enrolledModules, Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        EnrolledModule tempModule;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String tempModuleName : enrolledModules.keySet()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempModule \u003d enrolledModules.get(tempModuleName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "            this.enrolledModules.put(tempModuleName, tempModule);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (timeslots !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            this.timeslots \u003d new HashMap\u003c\u003e(timeslots);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            this.timeslots \u003d TimeSlots.sampleTimeSlots();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an immutable enrolled module map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Map\u003cString, EnrolledModule\u003e getEnrolledModules() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return Collections.unmodifiableMap(enrolledModules);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an immutable timeslot map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public Map\u003cString, List\u003cTimeSlots\u003e\u003e getTimeSlots() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Collections.unmodifiableMap(timeslots);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Returns true if both persons\u0027 identity fields are identical."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean completelyEquals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "     * Returns true if both persons have the same name."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, enrolledModules, timeslots);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": "        builder.append(\" Enrolled Modules: \");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String temp : getEnrolledModules().keySet()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "            temp \u003d temp + \" \";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": "            builder.append(temp);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 12,
      "auskure": 28,
      "-": 124,
      "leegengyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Phone implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \"Your phone input should only contain numerical digits, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"and of length 3 at minimum, and 50 at maximum.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,50}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 2,
      "-": 50,
      "leegengyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimeSlots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class TimeSlots implements Serializable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] SET_VALUES \u003d {\"8am    \", \"9am    \", \"10am   \", \"11am    \", \"12pm   \","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"1pm    \", \"2pm     \", \"3pm     \", \"4pm    \", \"5pm     \", \"6pm    \", \"7pm\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] free \u003d {\"free\", \"free\", \"free\", \"free\", \"free\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"free\", \"free\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleTue \u003d {\"CS2040c\", \"CS2040c\", \"ST2332\", \"ST2332\", \"free\", \"free\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"CS2107\", \"CS2107\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleWed \u003d {\"CS2101\", \"CS2101\", \"free\", \"free\", \"GES1041\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"GES1041\", \"free\", \"free\", \"CS2113\", \"CS2113\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleThu \u003d {\"free\", \"free\", \"MA1521\", \"MA1521\", \"free\", \"free\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"CS2040c\", \"CS2040c\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] sampleFri \u003d {\"free\", \"free\", \"CS2107\", \"free\", \"free\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"free\", \"CS2101\", \"free\", \"free\", \"free\", \"free\", \"free\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private String timeslot;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @param timeslot A valid timeslot."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public TimeSlots(String timeslot) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        requireNonNull(timeslot);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.timeslot \u003d timeslot;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a map of lists of free time slots"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static Map\u003cString, List\u003cTimeSlots\u003e\u003e initTimeSlots() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e inittimeslot \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            inittimeslot.put(day, getFreeTimeSlots());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return inittimeslot;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a map of lists of sample time slots"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static Map\u003cString, List\u003cTimeSlots\u003e\u003e sampleTimeSlots() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e sampletimeslot \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"mon\", getFreeTimeSlots());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"tue\", getSampleTue());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"wed\", getSampleWed());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"thu\", getSampleThu());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        sampletimeslot.put(\"fri\", getSampleFri());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return sampletimeslot;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Gets header for timetable for the UI."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static String[] getHeader() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return SET_VALUES;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a list of free timeslots"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getFreeTimeSlots() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e freeTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : free) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            freeTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return freeTimeSlots;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a list of sample time slots for tuesday"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleTue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e tueTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleTue) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tueTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return tueTimeSlots;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a list of sample time slots for wednesday"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleWed() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e wedTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleWed) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wedTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return wedTimeSlots;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a list of sample time slots for thursday"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleThu() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e thuTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleThu) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thuTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return thuTimeSlots;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a list of sample time slots for friday"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cTimeSlots\u003e getSampleFri() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e friTimeSlots \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : sampleFri) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            friTimeSlots.add(new TimeSlots(it));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return friTimeSlots;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return timeslot.hashCode();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return timeslot;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 144,
      "leegengyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TimetableContainsModulePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "//@@E0201942"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TimetableContainsModulePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public TimetableContainsModulePredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cBoolean\u003e keywordsCheck \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int j \u003d 0; j \u003c keywords.size(); j++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            keywordsCheck.add(false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledModules \u003d new HashMap\u003c\u003e(person.getEnrolledModules());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (Tag tags : person.getTags()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (tags.toString().equalsIgnoreCase(\"[merged]\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timetable \u003d person.getTimeSlots();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        boolean timeCheck \u003d true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int modCheck \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int count \u003d keywords.size();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String day : days) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (keywords.get(i).equalsIgnoreCase(day)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    List\u003cTimeSlots\u003e daySlots \u003d timetable.get(day);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    int timeIndex \u003d Integer.parseInt(keywords.get(i + 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    TimeSlots checkSlot \u003d daySlots.get(timeIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    count \u003d count - 2;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (!checkSlot.toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        timeCheck \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String check \u003d keywords.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String day : days) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                List\u003cTimeSlots\u003e daySlots \u003d timetable.get(day);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                for (TimeSlots module : daySlots) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (check.equalsIgnoreCase(module.toString()) \u0026\u0026 !keywordsCheck.get(i).equals(true)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        modCheck++;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        keywordsCheck.set(i, true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String check \u003d keywords.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Iterator\u003cMap.Entry\u003cString, EnrolledModule\u003e\u003e it \u003d enrolledModules.entrySet().iterator();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            while (it.hasNext()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                Map.Entry\u003cString, EnrolledModule\u003e pair \u003d it.next();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                String moduleToCheck \u003d pair.getKey();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (check.equalsIgnoreCase(moduleToCheck) \u0026\u0026 !keywordsCheck.get(i).equals(true)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    modCheck++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    keywordsCheck.set(i, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return (modCheck \u003d\u003d count \u0026\u0026 timeCheck);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                || (other instanceof TimetableContainsModulePredicate"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 keywords.equals(((TimetableContainsModulePredicate) other).keywords));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 66,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final UniquePersonListHelper uniquePersonListHelper \u003d new UniquePersonListHelper();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return uniquePersonListHelper.contains(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.add(toAdd);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.edit(target, editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.remove(toRemove);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.removeAll();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (Person tempPerson : replacement) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "            uniquePersonListHelper.add(tempPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "        uniquePersonListHelper.removeAll();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (Person tempPerson : persons) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "            uniquePersonListHelper.add(tempPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "        updateInternalList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Updates the internal list, allowing it to have sorted contacts"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private void updateInternalList() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String name : uniquePersonListHelper.acquireAllNames()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "            internalList.add(uniquePersonListHelper.get(name));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 31,
      "-": 107,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonListHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": " * A supporting data structure (Treemap) that helps keep the contacts in the contact list sorted, increasing"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": " * usability."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": " * The names are sorted in an alphabetical order, with uppercase letters always being in front of lowercase letters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Therefore, a possible order of the list is \"Alice, Bob, amy, andrew\"."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class UniquePersonListHelper {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Map\u003cString, Person\u003e internalListHelper \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Set\u003cString\u003e acquireAllNames() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return internalListHelper.keySet();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns true if the ordered map contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String toCheckName \u003d nameFinder(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (internalListHelper.get(toCheckName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "            Person tempPerson \u003d internalListHelper.get(toCheckName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return toCheck.isSamePerson(tempPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Adds a person to the sorted map."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String toAddName \u003d nameFinder(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.put(toAddName, toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * {@code target} must exist in the sorted map."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void edit(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String editedPersonName \u003d nameFinder(editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String targetName \u003d nameFinder(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (internalListHelper.get(targetName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.remove(targetName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.put(editedPersonName, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the person in the contact list, given the name."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Person get(String name) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return internalListHelper.get(name);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Removes the equivalent person from the sorted map."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * The person must exist in the sorted map."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String toRemoveName \u003d nameFinder(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (internalListHelper.get(toRemoveName) \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.remove(toRemoveName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Removes all contacts currently in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "        internalListHelper.clear();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the name of the given person contact."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private String nameFinder(Person person) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return person.getName().toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class Tag implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 5,
      "-": 46,
      "leegengyu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"friends\"), getEnrolledModuleMap(\"CS2101\", \"CS2113T\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), getEnrolledModuleMap(\"CS2105\", \"CS2106\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"neighbours\"), getEnrolledModuleMap(\"CS2101\", \"CS2113T\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"family\"), getEnrolledModuleMap(\"CS3235\", \"CS3236\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "                getTagSet(\"classmates\"), getEnrolledModuleMap(\"CS1010\", \"CS1231\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"colleagues\"), getEnrolledModuleMap(\"CS2101\", \"CS2113T\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                TimeSlots.sampleTimeSlots()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            new Person(new Name(\"Self\"), new Phone(\"9999999\"), new Email(\"self@self\"), new Address(\"self\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"self\"), new TreeMap\u003c\u003e(), TimeSlots.initTimeSlots())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a enrolled class map containing the list of strings given."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Map\u003cString, EnrolledModule\u003e getEnrolledModuleMap(String... strings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "        EnrolledModule tempEnrolledModule;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String enrolledClassName : strings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempEnrolledModule \u003d new EnrolledModule(enrolledClassName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolledClassMap.put(tempEnrolledModule.enrolledModuleName, tempEnrolledModule);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledClassMap;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 5,
      "auskure": 17,
      "-": 56,
      "leegengyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ListWrapper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlAccessorType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Wraps a list so it can be properly saved even when in a map."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "@XmlAccessorType(XmlAccessType.FIELD)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ListWrapper {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @XmlElementWrapper"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private ArrayList\u003cXmlAdaptedTimeSlots\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void setList(ArrayList\u003cXmlAdaptedTimeSlots\u003e list) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.list \u003d list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public ArrayList\u003cXmlAdaptedTimeSlots\u003e getList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 22,
      "leegengyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NotesDownloadStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Represents the storage component for the downloaded notes"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "public interface NotesDownloadStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Path getNotesFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void deleteAllNotes() throws IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void deleteSelectedNotes(Set\u003cString\u003e moduleNames) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void relocateNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void unzipNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/NotesDownloadStorageHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.cleanModuleCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.cleanName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.createDirectoryIfMissing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.deleteAllFiles;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.deleteSelectedFolders;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.FileUtil.relocateFiles;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.commons.util.UnzipUtil.unzipFile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class NotesDownloadStorageHelper implements NotesDownloadStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Path notesFilePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Path absoluteNotesFilePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloadStorageHelper(Path notesFilePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesFilePath \u003d notesFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.absoluteNotesFilePath \u003d notesFilePath.toAbsolutePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Path getNotesFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Deletes all notes in the notes folder"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteAllNotes() throws IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "        createDirectoryIfMissing(absoluteNotesFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "        deleteAllFiles(absoluteNotesFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Deletes selected notes in the notes folder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteSelectedNotes(Set moduleNames) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        createDirectoryIfMissing(absoluteNotesFilePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        deleteSelectedFolders(absoluteNotesFilePath, moduleNames);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Relocates notes to their appropriate folders"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void relocateNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "        moduleName \u003d cleanName(moduleName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        moduleName \u003d cleanModuleCode(moduleName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path moduleDirectory \u003d Paths.get(notesFilePath.toString(), moduleName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        createDirectoryIfMissing(moduleDirectory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "        relocateFiles(absoluteNotesFilePath, moduleName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Unzips newly downloaded notes in the notes folder"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void unzipNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "        moduleName \u003d cleanName(moduleName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "        moduleName \u003d cleanModuleCode(moduleName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        unzipFile(absoluteNotesFilePath, moduleName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, NotesDownloadStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    Path getNotesFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void deleteAllNotes() throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void deleteSelectedNotes(Set\u003cString\u003e moduleNames) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void relocateNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void unzipNotes(String moduleName) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Depending on the type of the event, this executes operations on notes"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Raises {@link IOException} if there was an error during saving."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "    void handleNotesManipulationEvent(NotesEvent notesEvent) throws IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 25,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.events.model.NotesEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.ClearNotesCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DeleteSelectNotesCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadAllNotesCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.commands.DownloadSelectNotesCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private NotesDownloadStorage notesDownloadStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "                          NotesDownloadStorage notesDownloadStorage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.notesDownloadStorage \u003d notesDownloadStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Download methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public Path getNotesFilePath() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesDownloadStorage.getNotesFilePath();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteAllNotes() throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloadStorage.deleteAllNotes();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteSelectedNotes(Set\u003cString\u003e moduleNames) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloadStorage.deleteSelectedNotes(moduleNames);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void relocateNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloadStorage.relocateNotes(moduleName);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void unzipNotes(String moduleName) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloadStorage.unzipNotes(moduleName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void handleNotesManipulationEvent(NotesEvent notesEvent) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(notesEvent, \"all notes manipulated\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String commandWord \u003d notesEvent.getEvent();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final String moduleCode \u003d notesEvent.getSingleModuleCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "        //switch-case syntax is used here, to easily allow for future expandability."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "            switch (commandWord) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "            case ClearNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "                deleteAllNotes();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "            case DeleteSelectNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": "                deleteSelectedNotes(notesEvent.getModuleCodes());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": "            case DownloadAllNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "                unzipNotes(moduleCode);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "            case DownloadSelectNotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "                relocateNotes(moduleCode);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "                throw new IOException();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 72,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEnrolledModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " * JAXB-friendly adapted version of the EnrolledModule."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class XmlAdaptedEnrolledModule {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private String enrolledModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Constructs an XmlAdaptedEnrolledModule."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedEnrolledModule() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Constructs a {@code XmlAdaptedEnrolledModule} with the given {@code enrolledModuleName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedEnrolledModule(String enrolledModuleName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.enrolledModuleName \u003d enrolledModuleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Converts a given EnrolledModule into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedEnrolledModule(EnrolledModule source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        enrolledModuleName \u003d source.enrolledModuleName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Converts this jaxb-friendly adapted EnrolledModule object into the model\u0027s EnrolledModule object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public EnrolledModule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!EnrolledModule.isValidEnRolledModuleName(enrolledModuleName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new IllegalValueException(EnrolledModule.MESSAGE_ENROLLED_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new EnrolledModule(enrolledModuleName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (!(other instanceof XmlAdaptedEnrolledModule)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return enrolledModuleName.equals(((XmlAdaptedEnrolledModule) other).enrolledModuleName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlElementWrapper;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private List\u003cXmlAdaptedEnrolledModule\u003e enrolled \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @XmlElementWrapper"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Map\u003cString, ListWrapper\u003e timeslots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public XmlAdaptedPerson() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged, List\u003cXmlAdaptedEnrolledModule\u003e enrolled, Map\u003cString,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ListWrapper\u003e timeslots) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        if (enrolled !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "            this.enrolled \u003d new ArrayList\u003c\u003e(enrolled);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        this.timeslots \u003d new HashMap\u003c\u003e(timeslots);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "        XmlAdaptedEnrolledModule tempXmlClass;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String nameTemp : source.getEnrolledModules().keySet()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "            tempXmlClass \u003d new XmlAdaptedEnrolledModule(nameTemp);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "            enrolled.add(tempXmlClass);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        timeslots \u003d toXmlAdaptedTimeSlots(source.getTimeSlots());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Changes all the time slots in a map of lists into their xml adapted form."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static Map\u003cString, ListWrapper\u003e toXmlAdaptedTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e source) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, ListWrapper\u003e timeslots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            ArrayList\u003cXmlAdaptedTimeSlots\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            ListWrapper wrapper \u003d new ListWrapper();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wrapper.setList(toAdd);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            for (TimeSlots i : source.get(day)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                toAdd.add(new XmlAdaptedTimeSlots(i));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timeslots.put(day, wrapper);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return timeslots;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Changes all the enrolled modules in a list into their xml adapted form."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static List\u003cXmlAdaptedEnrolledModule\u003e toXmlAdaptedEnrolledModules(Map\u003cString, EnrolledModule\u003e source) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Iterator\u003cMap.Entry\u003cString, EnrolledModule\u003e\u003e it \u003d source.entrySet().iterator();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cXmlAdaptedEnrolledModule\u003e enrolledModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Map.Entry\u003cString, EnrolledModule\u003e pair \u003d it.next();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledModules.add(new XmlAdaptedEnrolledModule(pair.getValue()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return enrolledModules;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final List\u003cEnrolledModule\u003e personEnrolledModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (XmlAdaptedEnrolledModule enrolledClass : enrolled) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": "            personEnrolledModules.add(enrolledClass.toModelType());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        final Map\u003cString, List\u003cTimeSlots\u003e\u003e personTimeSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            List\u003cTimeSlots\u003e toAdd \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (XmlAdaptedTimeSlots i : timeslots.get(day).getList()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                toAdd.add(i.toModelType());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personTimeSlots.put(day, toAdd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "auskure"
        },
        "content": "        final Map\u003cString, EnrolledModule\u003e modelEnrolledClasses \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (EnrolledModule tempClass : personEnrolledModules) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "auskure"
        },
        "content": "            modelEnrolledClasses.put(tempClass.enrolledModuleName, tempClass);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        final Map\u003cString, List\u003cTimeSlots\u003e\u003e modelTimeSlots \u003d new HashMap\u003c\u003e(personTimeSlots);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelEnrolledClasses,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            modelTimeSlots);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 enrolled.equals(otherPerson.enrolled)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \u0026\u0026 timeslots.equals(otherPerson.timeslots);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 32,
      "auskure": 29,
      "-": 134,
      "leegengyu": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        tagName \u003d source.getTagName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTimeSlots.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class XmlAdaptedTimeSlots {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private String timeSlot;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public XmlAdaptedTimeSlots() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public XmlAdaptedTimeSlots(String timeSlot) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.timeSlot \u003d timeSlot;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public XmlAdaptedTimeSlots(TimeSlots source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        timeSlot \u003d source.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public TimeSlots toModelType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new TimeSlots(timeSlot);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!(other instanceof XmlAdaptedTimeSlots)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return timeSlot.equals(((XmlAdaptedTimeSlots) other).timeSlot);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 55,
      "leegengyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        \"https://www.google.com.sg/webhp?hl\u003den\u0026sa\u003dX\u0026ved\u003d0ahUKEwj6i6PVlJ3eAhXNfn0KHRJ_DTAQPAgH\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    // \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        loadPage(SEARCH_PAGE_URL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "-": 70,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private MergedTimetablePanel mergedTimetablePanel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private SelfCardPanel selfCardPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private StackPane mergedTimetablePlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private StackPane selfPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTimetablePanel \u003d new MergedTimetablePanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTimetablePlaceholder.getChildren().add(mergedTimetablePanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        selfCardPanel \u003d new SelfCardPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        selfPlaceholder.getChildren().add(selfCardPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public MergedTimetablePanel getMergedTimetablePanel() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return mergedTimetablePanel;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 19,
      "-": 196
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MergedTimetablePanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsMergedPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class MergedTimetablePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"MergedTimetablePanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MergedTimetablePanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private ListView\u003cPerson\u003e timetable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public MergedTimetablePanel(ObservableList\u003cPerson\u003e timetableList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetableList \u003d timetableList.filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setConnections(timetableList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e timetableList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setItems(timetableList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(new TimetableCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \"pink\", \"black\", \"grey\", \"maroon\", \"navy\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //@@E0201942"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private FlowPane enrolledClasses;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane header;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane monday;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tuesday;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane wednesday;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane thursday;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane friday;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String tempEnrolledClassName : person.getEnrolledModules().keySet()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "            Label enrolledModule \u003d new Label(tempEnrolledClassName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledModule.setPrefSize(51, 10);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledModule.getStyleClass().add(getColor(tempEnrolledClassName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledClasses.getChildren().add(enrolledModule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : TimeSlots.getHeader()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            Label day \u003d new Label(it);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.setPrefSize(58, 10);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            header.getChildren().add(day);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] mon \u003d new String[12];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] tue \u003d new String[12];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] wed \u003d new String[12];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] thu \u003d new String[12];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] fri \u003d new String[12];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            mon[i] \u003d person.getTimeSlots().get(\"mon\").get(i).toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tue[i] \u003d person.getTimeSlots().get(\"tue\").get(i).toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wed[i] \u003d person.getTimeSlots().get(\"wed\").get(i).toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thu[i] \u003d person.getTimeSlots().get(\"thu\").get(i).toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            fri[i] \u003d person.getTimeSlots().get(\"fri\").get(i).toString();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(mon, monday);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(tue, tuesday);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(wed, wednesday);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(thu, thursday);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(fri, friday);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //Takes the mods for the day and adds them to the FlowPane"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void getMod(String[] mods, FlowPane day) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String it : mods) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            Label slot \u003d new Label(it);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            slot.setPrefSize(51, 25);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"busy\")) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else if (it.equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                slot.getStyleClass().add(getColor(it));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            day.getChildren().add(slot);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    //Returns a colour based on the module code"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getColor(String tagName) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reads tags from a person, changes them to labels and adds colour"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 42,
      "auskure": 4,
      "-": 111,
      "leegengyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personList \u003d personList.filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SelfCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class SelfCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"pink\", \"black\", \"grey\", \"maroon\", \"navy\"};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane enrolledClasses;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane header;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane monday;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane tuesday;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane wednesday;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane thursday;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane friday;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public SelfCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name selfName \u003d person.getName();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Phone selfPhone \u003d person.getPhone();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Address selfAddress \u003d person.getAddress();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Email selfEmail \u003d person.getEmail();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        id.setText(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (selfName.equals(new Name(\"Self\"))) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            name.setText(\"Self\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            name.setText(selfName.toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (selfPhone.equals(new Phone(\"000\"))) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            phone.setText(\" \");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            phone.setText(selfPhone.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (selfAddress.equals(new Address(\"self\"))) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address.setText(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address.setText(selfAddress.toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (selfEmail.equals(new Email(\"self@self\"))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            email.setText(\" \");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            email.setText(selfEmail.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String tempEnrolledClassName : person.getEnrolledModules().keySet()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label enrolledClass \u003d new Label(tempEnrolledClassName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledClass.setPrefSize(51, 10);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledClass.getStyleClass().add(getColor(tempEnrolledClassName));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            enrolledClasses.getChildren().add(enrolledClass);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : TimeSlots.getHeader()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label day \u003d new Label(it);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.setPrefSize(58, 10);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            header.getChildren().add(day);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] mon \u003d new String[12];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] tue \u003d new String[12];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] wed \u003d new String[12];"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] thu \u003d new String[12];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] fri \u003d new String[12];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            mon[i] \u003d person.getTimeSlots().get(\"mon\").get(i).toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tue[i] \u003d person.getTimeSlots().get(\"tue\").get(i).toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wed[i] \u003d person.getTimeSlots().get(\"wed\").get(i).toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thu[i] \u003d person.getTimeSlots().get(\"thu\").get(i).toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            fri[i] \u003d person.getTimeSlots().get(\"fri\").get(i).toString();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(mon, monday);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(tue, tuesday);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(wed, wednesday);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(thu, thursday);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(fri, friday);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Takes the mods for the day and adds them to the FlowPane"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void getMod(String[] mods, FlowPane day) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : mods) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label slot \u003d new Label(it);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            slot.setPrefSize(51, 25);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"busy\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else if (it.equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(getColor(it));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.getChildren().add(slot);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Returns a colour based on the module code"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static String getColor(String tagName) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        SelfCard card \u003d (SelfCard) other;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 179,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SelfCardPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class SelfCardPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"MergedTimetablePanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MergedTimetablePanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private ListView\u003cPerson\u003e timetable;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public SelfCardPanel(ObservableList\u003cPerson\u003e selfList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        selfList \u003d selfList.filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setConnections(selfList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e timetableList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setItems(timetableList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetable.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            timetable.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                setGraphic(new SelfCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimetableCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class TimetableCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final String[] TAG_COLOR_STYLES \u003d {\"white\", \"yellow\", \"darkorange\", \"maroon\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \"black\"};"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane header;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane monday;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane tuesday;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane wednesday;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane thursday;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FlowPane friday;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public TimetableCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        address.setText(person.getAddress().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : TimeSlots.getHeader()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label day \u003d new Label(it);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.setPrefSize(58, 10);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            header.getChildren().add(day);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] mon \u003d new String[12];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] tue \u003d new String[12];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] wed \u003d new String[12];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] thu \u003d new String[12];"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] fri \u003d new String[12];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            mon[i] \u003d person.getTimeSlots().get(\"mon\").get(i).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            tue[i] \u003d person.getTimeSlots().get(\"tue\").get(i).toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            wed[i] \u003d person.getTimeSlots().get(\"wed\").get(i).toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            thu[i] \u003d person.getTimeSlots().get(\"thu\").get(i).toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            fri[i] \u003d person.getTimeSlots().get(\"fri\").get(i).toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(mon, monday);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(tue, tuesday);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(wed, wednesday);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(thu, thursday);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        getMod(fri, friday);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Takes the mods for the day and adds them to the FlowPane"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void getMod(String[] mods, FlowPane day) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String it : mods) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Label slot \u003d new Label(it);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            slot.setPrefSize(51, 25);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (it.equalsIgnoreCase(\"busy\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"black\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            } else if (it.equalsIgnoreCase(\"0\") || it.equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(\"white\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(\" \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.getStyleClass().add(getColor(it));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                slot.setText(it);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            day.getChildren().add(slot);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    //Returns a colour based on the module code"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static String getColor(String tagName) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int tagIndex \u003d Integer.parseInt(tagName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (tagIndex \u003c\u003d 4) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return TAG_COLOR_STYLES[tagIndex];"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return TAG_COLOR_STYLES[4];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (!(other instanceof TimetableCard)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimetableCard card \u003d (TimetableCard) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 148,
      "leegengyu": 2
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .red {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: red;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .yellow {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: yellow;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .blue {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: blue;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .orange {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: orange;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .brown {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: brown;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .green {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: green;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .pink {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: pink;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .black {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": " #tags .grey {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "  #tags .white {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: white;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "  #tags .navy {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: navy;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "  #tags .maroon {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: maroon;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0201942"
        },
        "content": " #tags .grey1 {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0201942"
        },
        "content": "      -fx-text-fill: black;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0201942"
        },
        "content": "      -fx-background-color: #E5E5E5;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey2 {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        -fx-text-fill: white;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        -fx-background-color: #CCCCCC;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey3 {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0201942"
        },
        "content": "          -fx-text-fill: black;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0201942"
        },
        "content": "          -fx-background-color: #B2B2B2;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey4 {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #999999;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey5 {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #7F7F7F;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey6 {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #666666;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  #tags .grey7 {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #4C4C4C;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "E0201942"
        },
        "content": "#tags .darkorange {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-text-fill: white;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            -fx-background-color: #FF8C00;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "E0201942"
        },
        "content": " }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "E0201942"
        },
        "content": " #tags .maroon {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0201942"
        },
        "content": "             -fx-text-fill: white;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "E0201942"
        },
        "content": "             -fx-background-color: #800000;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "E0201942"
        },
        "content": "  }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 40,
      "-": 401
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"selfPlaceholder\" prefHeight\u003d\"320\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane2\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"mergedTimetablePlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003cVBox fx:id\u003d\"timetableList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 7,
      "-": 63
    }
  },
  {
    "path": "src/main/resources/view/MergedTimetablePanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cListView fx:id\u003d\"timetable\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e\u003cFlowPane id\u003d\"tags\" fx:id\u003d\"enrolledClasses\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"header\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"monday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"tuesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"wednesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"thursday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"friday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 40
    }
  },
  {
    "path": "src/main/resources/view/SelfCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e\u003cFlowPane id\u003d\"tags\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                                                                          fx:id\u003d\"enrolledClasses\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                                                                          prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"header\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"monday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"tuesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"wednesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"thursday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"friday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 43
    }
  },
  {
    "path": "src/main/resources/view/SelfCardList.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cListView fx:id\u003d\"selfList\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8
    }
  },
  {
    "path": "src/main/resources/view/TimetableCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"header\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"monday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"tuesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"wednesday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"thursday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cFlowPane id\u003d\"tags\" fx:id\u003d\"friday\" prefHeight\u003d\"30\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 38
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots isPrivate \u003d\"false\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots isPrivate\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 194,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 97,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 194,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots isPrivate\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 97,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003cname\u003eSelf\u003c/name\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003cphone\u003e000\u003c/phone\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003cemail\u003eself@self\u003c/email\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003caddress\u003eself\u003c/address\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctagged\u003eself\u003c/tagged\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 873,
      "-": 50
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cenrolled\u003eCS2107\u003c/enrolled\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 98,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cenrolled\u003eCS2107\u003c/enrolled\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 98,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003centry\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003cvalue\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003e"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003c/list\u003e"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/value\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/entry\u003e"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1008,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003cenrolled\u003eCS2107\u003c/enrolled\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003ctimeslots\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003ethu\u003c/key\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003etue\u003c/key\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003ewed\u003c/key\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003efri\u003c/key\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003centry\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003ckey\u003emon\u003c/key\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003cvalue\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003clist\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003etest\u003c/list\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    \u003clist\u003efree\u003c/list\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u003c/list\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            \u003c/value\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        \u003c/entry\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    \u003c/timeslots\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "E0201942": 98,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "auskure": 1,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : NSync\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.FileAndFolderCreation.DIFFERENT_SAMPLE_DIRECTORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.FileAndFolderCreation.EMPTY_SAMPLE_DIRECTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.FileAndFolderCreation.SAMPLE_DIRECTORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.FileAndFolderCreation.endTestState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.FileAndFolderCreation.initialiseTestState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2100_MODULE_CODE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2100_MODULE_CODE_UNLCLEANED;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2101_MODULE_CODE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2102_MODULE_CODE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS3100_MODULE_CODE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS3235_MODULE_CODE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getMultipleTypicalModuleCodes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getZeroModuleCodes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Contains tests for all commands in FileUtil"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String VALID_DIRECTORY_NAME \u003d \"src\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String INVALID_DIRECTORY_NAME \u003d \"invalid\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String VALID_FILE_NAME \u003d \"copyright.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String DIFFERENT_VALID_FILE_NAME \u003d \"gradle.properties\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String INVALID_FILE_NAME \u003d \"invalid.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String CLEANED_FILE_NAME \u003d \"EmptySampleDirectory\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"src/test/data/FileUtilTest/EmptySampleDirectory\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"a\\0\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String SAMPLE_CONTENT \u003d \"Mary had a little lamb\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String DIRECTORY_INDICATOR \u003d \"/\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final String PARAM_CURRENT_DIRECTORY \u003d \"user.dir\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final Path VALID_FILE \u003d Paths.get(VALID_FILE_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final Path INVALID_FILE \u003d Paths.get(INVALID_FILE_NAME);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final Path VALID_DIRECTORY \u003d Paths.get(VALID_DIRECTORY_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private static final Path INVALID_DIRECTORY \u003d Paths.get(INVALID_DIRECTORY_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Set\u003cString\u003e sampleDirectories \u003d getMultipleTypicalModuleCodes();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Set\u003cString\u003e emptySampleDirectory \u003d getZeroModuleCodes();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void currentDirectory() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // currentDirectory has to be equals to what the System Call returns"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.currentDirectory().equals(System.getProperty(PARAM_CURRENT_DIRECTORY)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void isFileExists() throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // valid file -\u003e true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(VALID_FILE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // invalid file -\u003e false as invalid file"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(INVALID_FILE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // valid directory -\u003e false as not a file"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(VALID_DIRECTORY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // invalid directory -\u003e false as not a file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(INVALID_DIRECTORY));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void isDirectoryExists() throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // valid directory -\u003e true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(VALID_DIRECTORY));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // invalid directory -\u003e false as invalid directory"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(INVALID_DIRECTORY));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // valid file -\u003e false as not a directory"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(VALID_FILE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // invalid file -\u003e false as not a directory"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(INVALID_FILE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void loadFolders() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e testDirectories;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // valid empty directory -\u003e empty Set\u003cString\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testDirectories \u003d FileUtil.loadFolders(EMPTY_SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(testDirectories.equals(emptySampleDirectory));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // valid non-empty directory -\u003e filled set of strings, with the same elements"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testDirectories \u003d FileUtil.loadFolders(SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(testDirectories.equals(sampleDirectories));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // valid different non-empty directory -\u003e filled set of strings, with the same elements"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testDirectories \u003d FileUtil.loadFolders(DIFFERENT_SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(testDirectories.equals(sampleDirectories));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // invalid directory -\u003e empty Set\u003cString\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testDirectories \u003d FileUtil.loadFolders(INVALID_DIRECTORY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(testDirectories.equals(emptySampleDirectory));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void isValidPath() throws IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isValidPath(VALID_FILE_PATH));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isValidPath(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "   public void cleanName() throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String testName;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testName} does not contain a \"/\" -\u003e testName unchanged"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testName \u003d VALID_DIRECTORY_NAME;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.cleanName(testName).equals(VALID_DIRECTORY_NAME));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testName} contains a \"/\" -\u003e the part before the \"/\" (inclusive) is removed"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testName \u003d VALID_FILE_PATH;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.cleanName(testName).equals(CLEANED_FILE_NAME));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void cleanModuleCode() throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String testModuleCode;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testModuleCode} does not contain a \" \" -\u003e testModuleCode unchanged"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testModuleCode \u003d CS2100_MODULE_CODE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.cleanModuleCode(testModuleCode).equals(CS2100_MODULE_CODE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testModuleCode} does not contain a \" \" -\u003e  the part after the \" \"(inclusive) is removed"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testModuleCode \u003d CS2100_MODULE_CODE_UNLCLEANED;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.cleanModuleCode(testModuleCode).equals(CS2100_MODULE_CODE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * These tests integrates tests for both createIfMissing and deleteAllNotes,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * as they are required to be tested together"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Simple commands such as FileUtil.isFileExists are also incorporated into the tests."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void createIfMissing() throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFile \u003d Paths.get(VALID_FILE_PATH, VALID_FILE_NAME);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testParentDirectory \u003d Paths.get(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testFile} does not exist"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testFile} will be created if it does not exist."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createIfMissing(testFile);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // no extra {@code testFile} will be created if it already exists."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createIfMissing(testFile);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File tempFile \u003d new File(FileUtil.currentDirectory() + DIRECTORY_INDICATOR + VALID_FILE_PATH"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                + DIRECTORY_INDICATOR + VALID_FILE_NAME);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "auskure"
        },
        "content": "        tempFile.delete();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that testFile is now deleted, and that the folder is cleaned for the next tests"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * These tests integrates tests for both createDirectoryIfMissing and deleteAllNotes,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * as they are required to be tested together"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Simple commands such as FileUtil.isDirectoryExists are also incorporated into the tests."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void createDirectoryIfMissing() throws IOException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testDirectory \u003d Paths.get(VALID_FILE_PATH, VALID_DIRECTORY_NAME);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testParentDirectory \u003d Paths.get(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testDirectory} does not exist"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testDirectory));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testDirectory} will be created if it does not exist."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testDirectory);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testDirectory));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // no extra {@code testDirectory} will be created if it already exists."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testDirectory);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File tempFile \u003d new File(FileUtil.currentDirectory() + DIRECTORY_INDICATOR + VALID_FILE_PATH"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                    + DIRECTORY_INDICATOR + VALID_DIRECTORY_NAME);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "auskure"
        },
        "content": "        tempFile.delete();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testDirectory));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that testDirectory is now deleted"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteAllFiles(testParentDirectory);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testDirectory));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * These tests integrates tests for both createFile and deleteAllNotes,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * as they are required to be tested together"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Simple commands such as FileUtil.isFileExists are also incorporated into the tests."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void createFile() throws IOException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFile \u003d Paths.get(VALID_FILE_PATH, VALID_FILE_PATH, VALID_FILE_NAME);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testParentDirectory \u003d Paths.get(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testFile} does not exist"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testFile} will be created if it does not exist."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createFile(testFile);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // no extra {@code testFile} will be created if it already exists."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createFile(testFile);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "auskure"
        },
        "content": "        File tempFile \u003d new File(FileUtil.currentDirectory() + DIRECTORY_INDICATOR + VALID_FILE_PATH"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                    + DIRECTORY_INDICATOR + VALID_FILE_PATH + DIRECTORY_INDICATOR + VALID_FILE_NAME);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "auskure"
        },
        "content": "        tempFile.delete();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testDirectory} and all parent directories are now deleted"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteAllFiles(testParentDirectory);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * These tests integrates tests for both createParentDirsOfFile and deleteAllNotes,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * as they are required to be tested together"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Simple commands such as FileUtil.isDirectoryExists are also incorporated into the tests."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void createParentDirsOfFile() throws IOException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFile \u003d Paths.get(VALID_FILE_PATH, VALID_FILE_PATH, VALID_FILE_NAME);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testParent \u003d Paths.get(VALID_FILE_PATH, VALID_DIRECTORY_NAME);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testMainParentDirectory \u003d Paths.get(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testFile} does not exist"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testParent));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // {@code testParent} will be created if it does not exist."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createParentDirsOfFile(testFile);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testParent));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testMainParentDirectory} and all parent directories are now deleted"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteAllFiles(testMainParentDirectory);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that no {@code testParent} will be created if the entered file does not have a parent"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testFile \u003d Paths.get(VALID_FILE_PATH, VALID_FILE_NAME);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createParentDirsOfFile(testFile);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testParent));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testDirectory} and all parent directories are now deleted"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteAllFiles(testMainParentDirectory);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * These tests integrates tests for both readFromFile and writeToFile and deleteAllNotes,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * as they are required to be tested together"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void readAndWriteFiles() throws IOException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFile \u003d Paths.get(VALID_FILE_PATH, VALID_FILE_NAME);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testParentDirectory \u003d Paths.get(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String testContent;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testFile} does not exist"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure writeToFile creates a file"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.writeToFile(testFile, SAMPLE_CONTENT);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that the content is written and hence, read correctly."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "auskure"
        },
        "content": "        testContent \u003d FileUtil.readFromFile(testFile);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(testContent.equals(SAMPLE_CONTENT));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testDirectory} and all parent directories are now deleted"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteAllFiles(testParentDirectory);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFile));"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * These tests integrates tests for both relocateFiles and deleteAllNotes,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * as they are required to be tested together."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * This is ideal for deleteAllFiles as deletion of non-empty folders is involved."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void relocateFilesAndDeleteAllFiles() throws IOException {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFolder \u003d Paths.get(VALID_FILE_PATH, VALID_DIRECTORY_NAME);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFileOneSource \u003d Paths.get(VALID_FILE_PATH, VALID_FILE_NAME);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFileTwoSource \u003d Paths.get(VALID_FILE_PATH, DIFFERENT_VALID_FILE_NAME);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFileOneTarget \u003d Paths.get(VALID_FILE_PATH, VALID_DIRECTORY_NAME, VALID_FILE_NAME);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFileTwoTarget \u003d Paths.get(VALID_FILE_PATH, VALID_DIRECTORY_NAME, DIFFERENT_VALID_FILE_NAME);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testParentDirectory \u003d Paths.get(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Create {@code testFileOneSource, testFileTwoSource and testFolder}"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createIfMissing(testFileOneSource);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createIfMissing(testFileTwoSource);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testFolder);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testFileOneSource, testFileTwoSource and testFolder} exist"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(testFileOneSource));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(testFileTwoSource));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolder));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.relocateFiles(testParentDirectory, VALID_DIRECTORY_NAME.toString());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testFileOneSource and testFileTwoSource} do not exist in their source paths anymore."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFileOneSource));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFileTwoSource));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testFileOneTarget and testFileTwoTarget} exist in their target paths."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(testFileOneTarget));"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isFileExists(testFileTwoTarget));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testDirectory} and all parent directories are now deleted"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteAllFiles(testParentDirectory);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isFileExists(testFolder));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * These tests integrates tests for both deleteSelectFiles and deleteAllNotes,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * as they are required to be tested together."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void deleteSelectFiles() throws IOException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "auskure"
        },
        "content": "        initialiseTestState();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFolderOneToDelete \u003d Paths.get(VALID_FILE_PATH, CS2100_MODULE_CODE);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFolderTwoToDelete \u003d Paths.get(VALID_FILE_PATH, CS2101_MODULE_CODE);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFolderThreeToDelete \u003d Paths.get(VALID_FILE_PATH, CS2102_MODULE_CODE);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFolderOneToStay \u003d Paths.get(VALID_FILE_PATH, CS3100_MODULE_CODE);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testFolderTwoToStay \u003d Paths.get(VALID_FILE_PATH, CS3235_MODULE_CODE);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path testParentDirectory \u003d Paths.get(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Create {@code testFileOneSource, testFileTwoSource and }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testFolderOneToDelete);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testFolderTwoToDelete);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testFolderThreeToDelete);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testFolderOneToStay);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.createDirectoryIfMissing(testFolderTwoToStay);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that all relevant folders required for the test exists"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolderOneToDelete));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolderTwoToDelete));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolderThreeToDelete));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolderOneToStay));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolderTwoToStay));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteSelectedFolders(testParentDirectory, getMultipleTypicalModuleCodes());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that folders to be deleted are deleted, and folders meant to stay is kept."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderOneToDelete));"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderTwoToDelete));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderThreeToDelete));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolderOneToStay));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(FileUtil.isDirectoryExists(testFolderTwoToStay));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // To ensure that {@code testDirectory} and all parent directories are now deleted"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "auskure"
        },
        "content": "        FileUtil.deleteAllFiles(testParentDirectory);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderOneToDelete));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderTwoToDelete));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderThreeToDelete));"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderOneToStay));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(FileUtil.isDirectoryExists(testFolderTwoToStay));"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "auskure"
        },
        "content": "        endTestState();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 412,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.toXmlAdaptedTimeSlots;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.storage.ListWrapper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.storage.XmlAdaptedEnrolledModule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final List\u003cXmlAdaptedEnrolledModule\u003e VALID_MODULES \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Collections.singletonList(new XmlAdaptedEnrolledModule(\"CS2107\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, List\u003cTimeSlots\u003e\u003e blankTimeSlots \u003d TimeSlots.initTimeSlots();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, ListWrapper\u003e VALID_TIMESLOTS \u003d toXmlAdaptedTimeSlots(blankTimeSlots);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 13,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String deleteCommand \u003d \"delete main 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 5,
      "auskure": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 3,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.ReadOnlyNotesDownloaded;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public void resetAddressBookData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        public ReadOnlyNotesDownloaded getNotesList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public void resetNotesData(ReadOnlyNotesDownloaded newData) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\"); }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public void clearNotesData(String event) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public void addNotes(String event, String moduleName) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "auskure"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "auskure"
        },
        "content": "        public void deleteSelectedNotes(String event, Set\u003cString\u003e moduleNames) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "auskure"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "auskure": 25,
      "-": 203
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ChangeTimeSlotCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsSelfPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ChangeTimeSlotCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                    getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_validContactChange_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e changedTimeSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e monday;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] actions \u003d {\"1\", \"mon\", \"10am\", \"GER1000\"};"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index \u003d \"1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToChange \u003d mainList.get(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timeSlots \u003d personToChange.getTimeSlots();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        monday \u003d timeSlots.get(\"mon\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        monday.set(3, new TimeSlots(\"GER1000\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            changedTimeSlots.put(day, timeSlots.get(day));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person changedPerson \u003d new Person(personToChange.getName(), personToChange.getPhone(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                personToChange.getEmail(), personToChange.getAddress(), personToChange.getTags(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                personToChange.getEnrolledModules(), changedTimeSlots);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updatePerson(personToChange, changedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertContactChangeSuccess(index, actions, personToChange);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_validSelfChange_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e selfList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsSelfPredicate());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] days \u003d {\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"};"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e changedTimeSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e monday;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] actions \u003d {\"1\", \"mon\", \"10am\", \"GER1000\"};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index \u003d \"self\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToChange \u003d selfList.get(0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timeSlots \u003d personToChange.getTimeSlots();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        monday \u003d timeSlots.get(\"mon\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        monday.set(3, new TimeSlots(\"GER1000\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (String day : days) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            changedTimeSlots.put(day, timeSlots.get(day));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person changedPerson \u003d new Person(personToChange.getName(), personToChange.getPhone(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                personToChange.getEmail(), personToChange.getAddress(), personToChange.getTags(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                personToChange.getEnrolledModules(), changedTimeSlots);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updatePerson(personToChange, changedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertSelfChangeSuccess(index, actions);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_noTimeSlotChanged_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timeSlots;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e monday;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] actions \u003d {\"1\", \"mon\", \"10am\", \"free\"};"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index \u003d \"1\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToChange \u003d mainList.get(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timeSlots \u003d personToChange.getTimeSlots();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        monday \u003d timeSlots.get(\"mon\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots mon10amSlot \u003d monday.get(3);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        actions[3] \u003d mon10amSlot.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertNothingChangedFailure(index, actions);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] actions \u003d {\"0\", \"mon\", \"10am\"};"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index \u003d \"0\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertIndexSelectionFailure(index, actions, expectedMessage);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int overLimit \u003d mainList.size() + 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        index \u003d Integer.toString(overLimit);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertIndexSelectionFailure(index, actions, expectedMessage);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        index \u003d \"hi\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertIndexSelectionFailure(index, actions, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        index \u003d \" \";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertIndexSelectionFailure(index, actions, expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code ChangeTimeSlotCommand} with the given {@code index} and {@code actions}, and checks that the"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * correct person has the correct time slot changed in the correct way."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertContactChangeSuccess(String index, String[] actions, Person personToChange) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ChangeTimeSlotCommand changeCommand \u003d new ChangeTimeSlotCommand(index, actions);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d String.format(ChangeTimeSlotCommand.MESSAGE_EDIT_PERSON_SUCCESS, personToChange);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(changeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code ChangeTimeSlotCommand} with the given {@code index} and {@code actions}, and checks that the"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * self contact has the correct time slot changed in the correct way."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void assertSelfChangeSuccess(String index, String[] actions) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ChangeTimeSlotCommand changeCommand \u003d new ChangeTimeSlotCommand(index, actions);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d ChangeTimeSlotCommand.MESSAGE_EDIT_SELF_SUCCESS;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(changeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code ChangeTimeSlotCommand} with the given {@code index}, {@code actions}, and checks that a"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * {@code CommandException}is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void assertNothingChangedFailure(String index, String[] actions) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ChangeTimeSlotCommand changeCommand \u003d new ChangeTimeSlotCommand(index, actions);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d ChangeTimeSlotCommand.MESSAGE_NOTHING_CHANGED;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandFailure(changeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code ChangeTimeSlotCommand} with the given {@code index}, {@code actions}, and checks that a"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * {@code CommandException}is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertIndexSelectionFailure(String index, String[] actions, String expectedMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ChangeTimeSlotCommand changeCommand \u003d new ChangeTimeSlotCommand(index, actions);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandFailure(changeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 184,
      "auskure": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.model.util.SampleDataUtil.getTagSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.resetAddressBookData(new AddressBook());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person self \u003d new Person(new Name(\"Self\"), new Phone(\"000\"), new Email(\"self@self\"), new Address(\"self\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"self\"), new TreeMap\u003c\u003e(), TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.addPerson(self);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.resetAddressBookData(new AddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person self \u003d new Person(new Name(\"Self\"), new Phone(\"000\"), new Email(\"self@self\"), new Address(\"self\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                getTagSet(\"self\"), new TreeMap\u003c\u003e(), TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.addPerson(self);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 17,
      "auskure": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearNotesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class ClearNotesCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * checks ClearNotes executes correctly on an empty notesDownloaded, within an empty model."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_emptyNotesDownloaded_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.clearNotesData(ClearNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(new ClearNotesCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                ClearNotesCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * checks ClearNotes executes correctly on an non-empty notesDownloaded, within a non-empty model."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_nonEmptyNotesDownloaded_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.clearNotesData(ClearNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(new ClearNotesCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                ClearNotesCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.NotesDownloaded;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String INCORRECT_USERNAME \u003d \"dummy\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String INCORRECT_PASSWORD \u003d \"dummy\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String INCORRECT_MODULE_CODE \u003d \"dummy\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String CORRECT_MODULE_CODE \u003d \"cs2113\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String CORRECT_FILE_INDEX \u003d \"0\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String INCORRECT_FILE_INDEX \u003d \"10000000\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public static final String VERY_INCORRECT_FILE_INDEX \u003d \"10000000000000000000000000000000000000000000000\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTimeSlots()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .withEnrolledModules().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimeSlots()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloaded expectedNotesDownloaded \u003d new NotesDownloaded(actualModel.getNotesList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "            assertEquals(expectedNotesDownloaded, actualModel.getNotesList());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 10,
      "BearPerson1": 2,
      "auskure": 3,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(\"main\", INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(\"main\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 10,
      "auskure": 6,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteSelectNotesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.logic.commands.DeleteSelectNotesCommand.MESSAGE_DELETE_ALL_NOTES_CAUTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.logic.commands.DeleteSelectNotesCommand.MESSAGE_DELETE_ALL_NOTES_SUCCESS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.logic.commands.DeleteSelectNotesCommand.MESSAGE_UNAVAILABLE_NOTES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getAdvancedMixedValidityModuleCodes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getAllDifferentModuleCodes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getAllTypicalModuleCodes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getMultipleDifferentModuleCodes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getMultipleTypicalModuleCodes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getOneDifferentModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getOneTypicalModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getOneTypicalModulePrefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getSimpleMixedValidityModuleCodes;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalModuleCodesWithLevel2000ComputerScienceModulePrefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getZeroModuleCodes;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Contains integration tests (interaction with the Model and ClearNotes) and unit tests for"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": " * {@code DeleteSelectNotesCommandTest}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class DeleteSelectNotesCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * checks DeleteSelectNotes executes correctly, given a single valid moduleCode."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_validSingleDelete_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e validNotesToDelete \u003d getOneTypicalModuleCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e invalidNotesToDelete \u003d getZeroModuleCodes();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(validNotesToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DELETE_ALL_NOTES_SUCCESS + validNotesToDelete.toString()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                     + MESSAGE_DELETE_ALL_NOTES_CAUTION + invalidNotesToDelete.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.deleteSelectedNotes(DeleteSelectNotesCommand.COMMAND_WORD, validNotesToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(deleteSelectNotesCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Tests for the capability of DeleteSelectNotes, to handle requests containing multiple moduleCodes"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_validMultipleDelete_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e validNotesToDelete \u003d getMultipleTypicalModuleCodes();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e invalidNotesToDelete \u003d getZeroModuleCodes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(validNotesToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DELETE_ALL_NOTES_SUCCESS + validNotesToDelete.toString()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                    + MESSAGE_DELETE_ALL_NOTES_CAUTION + invalidNotesToDelete.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.deleteSelectedNotes(DeleteSelectNotesCommand.COMMAND_WORD, validNotesToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(deleteSelectNotesCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Tests for the capability of DeleteSelectNotes, to handle requests containing valid and invalid moduleCodes."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * In this simple version, the test contains one valid moduleCode, and one moduleCode not yet in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * notesDownloaded, which makes it invalid."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_validSimplePartialDelete_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesToDelete \u003d getSimpleMixedValidityModuleCodes();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e validNotesToDelete \u003d getOneTypicalModuleCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e invalidNotesToDelete \u003d getOneDifferentModuleCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(notesToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DELETE_ALL_NOTES_SUCCESS + validNotesToDelete.toString()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                    + MESSAGE_DELETE_ALL_NOTES_CAUTION + invalidNotesToDelete.toString();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.deleteSelectedNotes(DeleteSelectNotesCommand.COMMAND_WORD, notesToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(deleteSelectNotesCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Tests for the capability of DeleteSelectNotes, to handle requests containing valid and invalid moduleCodes."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * In this advanced version, the test contains multiple valid moduleCode, and multiple moduleCode not yet in"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * notesDownloaded, which makes them invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_validAdvancedPartialDelete_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesToDelete \u003d getAdvancedMixedValidityModuleCodes();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e validNotesToDelete \u003d getAllTypicalModuleCodes();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e invalidNotesToDelete \u003d getAllDifferentModuleCodes();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(notesToDelete);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DELETE_ALL_NOTES_SUCCESS + validNotesToDelete.toString()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                  + MESSAGE_DELETE_ALL_NOTES_CAUTION + invalidNotesToDelete.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.deleteSelectedNotes(DeleteSelectNotesCommand.COMMAND_WORD, notesToDelete);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(deleteSelectNotesCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Tests for the capability of DeleteSelectNotes, to handle requests containing an invalid moduleCode."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * We assume that this moduleCode not yet in notesDownloaded, which makes it invalid."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_invalidSingleDelete_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesToDelete \u003d getOneDifferentModuleCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(notesToDelete);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.deleteSelectedNotes(DeleteSelectNotesCommand.COMMAND_WORD, notesToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandFailure(deleteSelectNotesCommand, model, commandHistory, MESSAGE_UNAVAILABLE_NOTES);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Tests for the capability of DeleteSelectNotes, to handle requests multiple invalid moduleCodes."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * We assume that these moduleCodes are not yet in notesDownloaded, which makes them invalid."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_invalidMultipleDelete_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesToDelete \u003d getMultipleDifferentModuleCodes();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(notesToDelete);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.deleteSelectedNotes(DeleteSelectNotesCommand.COMMAND_WORD, notesToDelete);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandFailure(deleteSelectNotesCommand, model, commandHistory, MESSAGE_UNAVAILABLE_NOTES);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Tests for the capability of DeleteSelectNotes, to handle a single request, deleting multiple notes."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void execute_validMultipleDeleteByPrefix_success() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesToDelete \u003d getOneTypicalModulePrefix();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e validNotesToDelete \u003d getTypicalModuleCodesWithLevel2000ComputerScienceModulePrefix();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e invalidNotesToDelete \u003d getZeroModuleCodes();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(notesToDelete);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String expectedMessage \u003d MESSAGE_DELETE_ALL_NOTES_SUCCESS + validNotesToDelete.toString()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": "                + MESSAGE_DELETE_ALL_NOTES_CAUTION + invalidNotesToDelete.toString();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.deleteSelectedNotes(DeleteSelectNotesCommand.COMMAND_WORD, notesToDelete);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(deleteSelectNotesCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * This integration test tests for the capability of DeleteSelectNotes, to work correctly for a single request"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * after the ClearNotesCommand is run."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * After ClearNotesCommand, there are no moduleCodes in notesDownloaded, so all moduleCodes are invalid."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void executeClearNotes_invalidSingleDelete_failure() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesToDelete \u003d getOneTypicalModuleCode();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(notesToDelete);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.clearNotesData(ClearNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(new ClearNotesCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                ClearNotesCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandFailure(deleteSelectNotesCommand, model, commandHistory, MESSAGE_UNAVAILABLE_NOTES);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * This integration test tests for the capability of DeleteSelectNotes, to work correctly for a multiple requests"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * after the ClearNotesCommand is run."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * After ClearNotesCommand, there are no moduleCodes in notesDownloaded, so all moduleCodes are invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void executeClearNotes_invalidMultipleDelete_failure() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e notesToDelete \u003d getAllTypicalModuleCodes();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteSelectNotesCommand \u003d new DeleteSelectNotesCommand(notesToDelete);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel.clearNotesData(ClearNotesCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(new ClearNotesCommand(), model, commandHistory,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "auskure"
        },
        "content": "                ClearNotesCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandFailure(deleteSelectNotesCommand, model, commandHistory, MESSAGE_UNAVAILABLE_NOTES);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e oneModuleCode \u003d getOneTypicalModuleCode();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e oneDifferentModuleCode \u003d getOneDifferentModuleCode();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e multipleModuleCodes \u003d getMultipleTypicalModuleCodes();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mutipleDifferentModuleCodes \u003d getMultipleDifferentModuleCodes();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteNotesFirstCommand \u003d new DeleteSelectNotesCommand(oneModuleCode);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteNotesSecondCommand \u003d new DeleteSelectNotesCommand(oneDifferentModuleCode);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteNotesThirdCommand \u003d new DeleteSelectNotesCommand(multipleModuleCodes);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteNotesFourthCommand \u003d new DeleteSelectNotesCommand(mutipleDifferentModuleCodes);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // same object for one moduleCode -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(deleteNotesFirstCommand.equals(deleteNotesFirstCommand));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // same values for one moduleCode -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteNotesFirstCommandCopy \u003d new DeleteSelectNotesCommand(oneModuleCode);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(deleteNotesFirstCommand.equals(deleteNotesFirstCommandCopy));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // same object for multiple moduleCodes -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(deleteNotesThirdCommand.equals(deleteNotesThirdCommand));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // same values for multiple moduleCodes -\u003e returns true"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "auskure"
        },
        "content": "        DeleteSelectNotesCommand deleteNotesThirdCommandCopy \u003d new DeleteSelectNotesCommand(multipleModuleCodes);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(deleteNotesThirdCommand.equals(deleteNotesThirdCommandCopy));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(deleteNotesFirstCommand.equals(1));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(deleteNotesFirstCommand.equals(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different values of a single moduleCode -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(deleteNotesFirstCommand.equals(deleteNotesSecondCommand));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different values of multiple moduleCodes -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(deleteNotesThirdCommand.equals(deleteNotesFourthCommand));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 247
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DownloadAllNotesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static junit.framework.TestCase.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CORRECT_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_PASSWORD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_USERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadAllNotesCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if incorrect username and password fails correctly"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_downloadAllNotesCommand_wrongUserNameAndPass() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadAllNotesCommand command \u003d new DownloadAllNotesCommand(INCORRECT_USERNAME, INCORRECT_PASSWORD,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                CORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if incorrect module code will fail correctly"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_downloadAllNotesCommand_invalidModuleCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadAllNotesCommand command \u003d new DownloadAllNotesCommand(INCORRECT_USERNAME, INCORRECT_PASSWORD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if notes file is correctly created after execution of downloadAllNotesCommand."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_notesFilesCreated() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadAllNotesCommand command \u003d new DownloadAllNotesCommand(INCORRECT_USERNAME, INCORRECT_PASSWORD,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                CORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\") + DownloadAllNotesCommand.DOWNLOAD_FILE_PATH;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File notesFile \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertTrue(notesFile.exists());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * check if windows chrome driver is properly extracted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_windowsDriverExtracted() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadAllNotesCommand command \u003d new DownloadAllNotesCommand(INCORRECT_USERNAME, INCORRECT_PASSWORD,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                CORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + \"/\" + DownloadAllNotesCommand.WINDOWS_CHROME_DRIVER_DIRECTORY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File windowsDriverDir \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        intendedFileLocation +\u003d \"/\" + DownloadAllNotesCommand.WINDOWS_CHROME_DRIVER_NAME;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File windowsChromeDriver \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(windowsDriverDir.exists());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(windowsChromeDriver.exists());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * check if mac chrome driver is properly extracted."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_macDriverExtracted() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadAllNotesCommand command \u003d new DownloadAllNotesCommand(INCORRECT_USERNAME, INCORRECT_PASSWORD,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                CORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + \"/\" + DownloadAllNotesCommand.MAC_CHROME_DRIVER_DIRECTORY;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File macDriverDir \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        intendedFileLocation +\u003d \"/\" + DownloadAllNotesCommand.MAC_CHROME_DRIVER_NAME;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File macChromeDriver \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(macDriverDir.exists());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(macChromeDriver.exists());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * check if notes download is clear of files of the \"crdownload\" file type."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_checkNotesFolderClearForDownload() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadAllNotesCommand command \u003d new DownloadAllNotesCommand(INCORRECT_USERNAME, INCORRECT_PASSWORD,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                CORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadAllNotesCommand.DOWNLOAD_FILE_PATH;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File notesFile \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String[] filesInNotesFile \u003d notesFile.list();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            for (String files : filesInNotesFile) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                assertFalse(files.contains(DownloadAllNotesCommand.DOWNLOAD_FILE_ONGOING_EXTENSION));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"A crdownload file exist\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 137,
      "leegengyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DownloadSelectNotesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static junit.framework.TestCase.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CORRECT_FILE_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CORRECT_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_FILE_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_MODULE_CODE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_PASSWORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INCORRECT_USERNAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VERY_INCORRECT_FILE_INDEX;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class DownloadSelectNotesCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if incorrect username and password fails correctly"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_downloadSelectNotesCommand_wrongUserNameAndPass() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME, INCORRECT_PASSWORD,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                CORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if incorrect module code will fail correctly"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_downloadSelectNotesCommand_invalidModuleCodeFailure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_PASSWORD, INCORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if extremely long, un-parsable file Index will fail correctly"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_downloadSelectNotesCommand_veryInvalidFileIndex() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_PASSWORD, CORRECT_MODULE_CODE, VERY_INCORRECT_FILE_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_FILE_INDEX_ERROR"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if un-findable file Index will fail correctly"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_downloadSelectNotesCommand_invalidFileName() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_PASSWORD, INCORRECT_MODULE_CODE, INCORRECT_FILE_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * checks if notes file is correctly created after execution of downloadSelectNotesCommand."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_notesFilesCreated() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_PASSWORD, INCORRECT_MODULE_CODE, CORRECT_FILE_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\") + DownloadAllNotesCommand.DOWNLOAD_FILE_PATH;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File notesFile \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertTrue(notesFile.exists());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * check if windows chrome driver is properly extracted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_windowsDriverExtracted() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_PASSWORD, INCORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + \"/\" + DownloadAllNotesCommand.WINDOWS_CHROME_DRIVER_DIRECTORY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File windowsDriverDir \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        intendedFileLocation +\u003d \"/\" + DownloadAllNotesCommand.WINDOWS_CHROME_DRIVER_NAME;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File windowsChromeDriver \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(windowsDriverDir.exists());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(windowsChromeDriver.exists());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * check if mac chrome driver is properly extracted."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_macDriverExtracted() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_PASSWORD, INCORRECT_MODULE_CODE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + \"/\" + DownloadAllNotesCommand.MAC_CHROME_DRIVER_DIRECTORY;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File macDriverDir \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        intendedFileLocation +\u003d \"/\" + DownloadAllNotesCommand.MAC_CHROME_DRIVER_NAME;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File macChromeDriver \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(macDriverDir.exists());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            assertTrue(macChromeDriver.exists());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"MacDirectory was not created\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * check if notes download is clear of files of the \"crdownload\" file type."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_checkNotesFolderClearForDownload() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        DownloadSelectNotesCommand command \u003d new DownloadSelectNotesCommand(INCORRECT_USERNAME,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                INCORRECT_PASSWORD, INCORRECT_MODULE_CODE, CORRECT_FILE_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadAllNotesCommand.DOWNLOAD_FILE_PATH;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_USERNAME_PASSWORD_ERROR"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                + DownloadSelectNotesCommand.NEWLINE_SEPARATOR + DownloadSelectNotesCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File notesFile \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String[] filesInNotesFile \u003d notesFile.list();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            for (String files : filesInNotesFile) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "                assertFalse(files.contains(DownloadAllNotesCommand.DOWNLOAD_FILE_ONGOING_EXTENSION));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "            throw new AssertionError(\"A crdownload file exist\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        model.getAddressBook()), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(mainList.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person lastPerson \u003d mainList.get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(indexLastPerson.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        model.getAddressBook()), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new EditPersonDescriptor());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person editedPerson \u003d mainList.get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        model.getAddressBook()), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personInFilteredList \u003d mainList.get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                    model.getAddressBook()), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person firstPerson \u003d mainList.get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(INDEX_SECOND_PERSON.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(outOfBoundIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(outOfBoundIndex.getOneBased()),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        model.getAddressBook()), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(outOfBoundIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                        model.getAddressBook()), model.getNotesList(), new UserPrefs());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()),"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                DESC_AMY);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()),"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                copyDescriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(Integer.toString(INDEX_SECOND_PERSON.getOneBased()),"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                DESC_AMY)));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                DESC_BOB)));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 44,
      "auskure": 14,
      "-": 218
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static org.assertj.core.api.Fail.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ByteArrayInputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.io.ObjectInputStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Base64;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExportCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private String theString \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void setUp() throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ExportCommand ec \u003d new ExportCommand(\"public\", \"1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandResult cr \u003d ec.execute(model, commandHistory);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String exportString \u003d cr.feedbackToUser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // remove string that informs user that the string is copied"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        exportString \u003d exportString.replaceAll(\"The generated string has been copied onto your clip-board.\", \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        exportString \u003d exportString.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        theString \u003d exportString;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_exportedStringIsPersonClass() throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        byte[] data \u003d Base64.getDecoder().decode(theString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ObjectInputStream ois \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            ois \u003d new ObjectInputStream(new ByteArrayInputStream(data));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            Person p \u003d (Person) ois.readObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (ClassNotFoundException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            fail(\"Unable to find Person Class\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FilterCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimetableContainsModulePredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                    getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_validTimeToFilter_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"tue\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"2\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimetableContainsModulePredicate predicate \u003d new TimetableContainsModulePredicate(keywords);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFilterSuccess(predicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_validActivityToFilter_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"CS2040c\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimetableContainsModulePredicate predicate \u003d new TimetableContainsModulePredicate(keywords);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFilterSuccess(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_validActivityAndTimeToFilter_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"CS2040c\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"mon\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"3\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimetableContainsModulePredicate predicate \u003d new TimetableContainsModulePredicate(keywords);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFilterSuccess(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_validMultipleActivitiesAndTimesToFilter_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"CS2040c\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"mon\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"3\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"GER1000\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"mon\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"4\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimetableContainsModulePredicate predicate \u003d new TimetableContainsModulePredicate(keywords);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFilterSuccess(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code FilterCommand} with the given {@code predicate}, and checks that"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * the address book is filtered correctly."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertFilterSuccess(TimetableContainsModulePredicate predicate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        FilterCommand filterCommand \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, ((FilteredList\u003cPerson\u003e)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                mainList).filtered(predicate).size());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(filterCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 95,
      "auskure": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_zeroKeywords_selfFound() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"main\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 7,
      "auskure": 2,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FreeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class FreeCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void setUp() throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        model \u003d new ModelManager(TypicalPersons.getFreeAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        expectedModel \u003d new ModelManager(TypicalPersons.getFreeAddressBook(), getTypicalNotesDownloaded(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_freeWholeDay() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        list.add(\"1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        FreeCommand fc \u003d new FreeCommand(list);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(2018, 10, 8); // thursday"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        fc.setCurrentTime(cal);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(fc, model, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \"The next available time-slot for John Doe is: thu 8:00 AM - 8:00 PM\", expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_freeMiddleOfDay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        list.add(\"1\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        FreeCommand fc \u003d new FreeCommand(list);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(2018, 10, 8); // thursday"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 12);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(Calendar.MINUTE, 34);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        fc.setCurrentTime(cal);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(fc, model, commandHistory,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \"The next available time-slot for John Doe is: Thu 12:34 PM - 8:00 PM\", expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_freeMiddleOfDay_self() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        list.add(\"self\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        FreeCommand fc \u003d new FreeCommand(list);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(2018, 10, 8); // thursday"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 12);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(Calendar.MINUTE, 34);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        fc.setCurrentTime(cal);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(fc, model, commandHistory,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            \"The next available time-slot for Self is: Thu 12:34 PM - 8:00 PM\", expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_freeWrapToMon() throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        list.add(\"1\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        FreeCommand fc \u003d new FreeCommand(list);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(2018, 10, 10); // saturday"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        fc.setCurrentTime(cal);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandResult result \u003d fc.execute(model, commandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String theString \u003d result.feedbackToUser;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        if (!theString.contains(\": mon\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            fail(\"did not wrap to monday\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_busyMiddleOfDay() throws CommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        list.add(\"1\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        FreeCommand fc \u003d new FreeCommand(list);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Calendar cal \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(2018, 10, 8); // thursday"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(Calendar.HOUR_OF_DAY, 12);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        cal.set(Calendar.MINUTE, 34);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        fc.setCurrentTime(cal);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String[] action \u003d new String[4];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        action[0] \u003d \"1\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        action[1] \u003d \"thu\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        action[2] \u003d \"12pm\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        action[3] \u003d \"CS1234\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // using ChangeTimeSlotCommand to change time slot"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ChangeTimeSlotCommand change \u003d new ChangeTimeSlotCommand(\"1\", action);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        change.execute(model, commandHistory);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandResult result \u003d fc.execute(model, commandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String theString \u003d result.feedbackToUser;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // busy at 12.34 pm; hence next free time-slot is 1pm"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertEquals(\"The next available time-slot for John Doe is: thu 1:00 PM - 8:00 PM\", theString);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code ExportCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private CommandHistory commandHistory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    // valid person string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private String theString \u003d \"\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private String nonDuplicate \u003d \"rO0ABXNyACFzZWVkdS5hZGRyZXNzLm1vZGVsLnBlcnNvbi5QZXJzb27Kp3XsSBScIQIAB\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"0wAB2FkZHJlc3N0ACRMc2VlZHUvYWRkcmVzcy9tb2RlbC9wZXJzb24vQWRkcmVzcztMAAVlbWFpbHQAIkxzZWVkdS9h\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"ZGRyZXNzL21vZGVsL3BlcnNvbi9FbWFpbDtMAA9lbnJvbGxlZE1vZHVsZXN0AA9MamF2YS91dGlsL01hcDtMAARuYW1\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"ldAAhTHNlZWR1L2FkZHJlc3MvbW9kZWwvcGVyc29uL05hbWU7TAAFcGhvbmV0ACJMc2VlZHUvYWRkcmVzcy9tb2RlbC\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"9wZXJzb24vUGhvbmU7TAAEdGFnc3QAD0xqYXZhL3V0aWwvU2V0O0wACXRpbWVzbG90c3EAfgADeHBzcgAic2VlZHUuY\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"WRkcmVzcy5tb2RlbC5wZXJzb24uQWRkcmVzc+68QhHGjRwVAgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL1N0cmluZzt4\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"cHQAGzMxMSwgQ2xlbWVudGkgQXZlIDIsICMwMi0yNXNyACBzZWVkdS5hZGRyZXNzLm1vZGVsLnBlcnNvbi5FbWFpbDw\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"rPd7n2s8jAgABTAAFdmFsdWVxAH4ACXhwdAARam9obmRAZXhhbXBsZS5jb21zcgARamF2YS51dGlsLlRyZWVNYXAMw\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"fY+LSVq5gMAAUwACmNvbXBhcmF0b3J0ABZMamF2YS91dGlsL0NvbXBhcmF0b3I7eHBwdwQAAAACdAAGQ1MyMTAxc3I\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"AMXNlZWR1LmFkZHJlc3MubW9kZWwuZW5yb2xsZWRtb2R1bGUuRW5yb2xsZWRNb2R1bGX5iWPuIhxbmwIAAkwAEmVucm\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"9sbGVkTW9kdWxlTmFtZXEAfgAJTAAQbm90ZXNTdG9yYWdlUGF0aHEAfgAJeHBxAH4AEnQAC2hvbWUvQ1MyMTAxdAAHQ\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"1MyMTEzVHNxAH4AE3EAfgAWdAAMaG9tZS9DUzIxMTNUeHNyAB9zZWVkdS5hZGRyZXNzLm1vZGVsLnBlcnNvbi5OYW1lo\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"7cOEQAgTZMCAAFMAAhmdWxsTmFtZXEAfgAJeHB0AAhKb2huIERvZXNyACBzZWVkdS5hZGRyZXNzLm1vZGVsLnBlcnNvb\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"i5QaG9uZU1oyTjSxPD8AgABTAAFdmFsdWVxAH4ACXhwdAAIOTg3NjU0MzJzcgARamF2YS51dGlsLkhhc2hTZXS6RIWVl\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"ri3NAMAAHhwdwwAAAAQP0AAAAAAAAJzcgAbc2VlZHUuYWRkcmVzcy5tb2RlbC50YWcuVGFnDqZZdHVM1NACAAFMAAd0YW\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"dOYW1lcQB+AAl4cHQACW93ZXNNb25leXNxAH4AIXQAB2ZyaWVuZHN4c3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYN\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"EDAAJGAApsb2FkRmFjdG9ySQAJdGhyZXNob2xkeHA/QAAAAAAABncIAAAACAAAAAV0AAN0aHVzcgATamF2YS51dGlsLkFy\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"cmF5TGlzdHiB0h2Zx2GdAwABSQAEc2l6ZXhwAAAADHcEAAAADHNyACRzZWVkdS5hZGRyZXNzLm1vZGVsLnBlcnNvbi5Ua\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"W1lU2xvdHNgQiduaNr7LQIAAUwACHRpbWVzbG90cQB+AAl4cHQABGZyZWVzcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfg\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"ArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAteHQAA2ZyaXNxAH4AKQAAAAx3BAAAAAxzcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQ\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"B+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC14dAADdHVlc3EAfgApAAAADHcEAAAADHNxAH4AK3EAfgAtc\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArc\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"QB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXh0AANtb25zcQB+ACkAAAAMdwQAAAAM\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"c3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgA\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"rcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAteHQAA3dlZHNxAH4\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"AKQAAAAx3BAAAAAxzcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgA\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"rcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC1zcQB+ACtxAH4ALXNxAH4AK3EAfgAtc3EAfgArcQB+AC\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        + \"14eA\u003d\u003d\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void setUp() throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        theString \u003d \"rO0ABXNyACFzZWVkdS5hZGRyZXNzLm1vZGVsLnBlcnNvbi5QZXJzb27Kp3XsSBScIQIAB0wAB2FkZHJlc3N0ACRM\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"c2VlZHUvYWRkcmVzcy9tb2RlbC9wZXJzb24vQWRkcmVzcztMAAVlbWFpbHQAIkxzZWVkdS9hZGRyZXNzL21vZGVsL3Bl\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"cnNvbi9FbWFpbDtMAA9lbnJvbGxlZE1vZHVsZXN0AA9MamF2YS91dGlsL01hcDtMAARuYW1ldAAhTHNlZWR1L2FkZHJlc\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"3MvbW9kZWwvcGVyc29uL05hbWU7TAAFcGhvbmV0ACJMc2VlZHUvYWRkcmVzcy9tb2RlbC9wZXJzb24vUGhvbmU7TAAEdG\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"Fnc3QAD0xqYXZhL3V0aWwvU2V0O0wACXRpbWVzbG90c3EAfgADeHBzcgAic2VlZHUuYWRkcmVzcy5tb2RlbC5wZXJzb2\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"4uQWRkcmVzc+68QhHGjRwVAgABTAAFdmFsdWV0ABJMamF2YS9sYW5nL1N0cmluZzt4cHQAHzEyMywgSnVyb25nIFdlc3Q\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"gQXZlIDYsICMwOC0xMTFzcgAgc2VlZHUuYWRkcmVzcy5tb2RlbC5wZXJzb24uRW1haWw8Kz3e59rPIwIAAUwABXZhbHVl\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"cQB+AAl4cHQAEWFsaWNlQGV4YW1wbGUuY29tc3IAEWphdmEudXRpbC5UcmVlTWFwDMH2Pi0lauYDAAFMAApjb21wYXJhdG\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"9ydAAWTGphdmEvdXRpbC9Db21wYXJhdG9yO3hwcHcEAAAAAHhzcgAfc2VlZHUuYWRkcmVzcy5tb2RlbC5wZXJzb24uTmFt\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"ZaO3DhEAIE2TAgABTAAIZnVsbE5hbWVxAH4ACXhwdAANQWxpY2UgUGF1bGluZXNyACBzZWVkdS5hZGRyZXNzLm1vZGVsLn\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"BlcnNvbi5QaG9uZU1oyTjSxPD8AgABTAAFdmFsdWVxAH4ACXhwdAAIOTQzNTEyNTNzcgARamF2YS51dGlsLkhhc2hTZXS6\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"RIWVlri3NAMAAHhwdwwAAAAQP0AAAAAAAAB4c3IAEWphdmEudXRpbC5IYXNoTWFwBQfawcMWYNEDAAJGAApsb2FkRmFjdG\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"9ySQAJdGhyZXNob2xkeHA/QAAAAAAABncIAAAACAAAAAV0AAN0aHVzcgATamF2YS51dGlsLkFycmF5TGlzdHiB0h2Zx2GdAw\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"ABSQAEc2l6ZXhwAAAADHcEAAAADHNyACRzZWVkdS5hZGRyZXNzLm1vZGVsLnBlcnNvbi5UaW1lU2xvdHNgQiduaNr7LQIAAU\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"wACHRpbWVzbG90cQB+AAl4cHQABGZyZWVzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxA\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"H4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAf\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"gAheHQAA2ZyaXNxAH4AHQAAAAx3BAAAAAxzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxA\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"H4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfg\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"Ahc3EAfgAfcQB+ACF4dAADdHVlc3EAfgAdAAAADHcEAAAADHNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAf\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"gAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXh0AANtb25zcQB+AB0AAAAMdwQAAAAMc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxA\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"H4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAf\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"gAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgAheHQAA3dlZHNxAH4AHQAAAAx3BAAAAAxzcQB+AB9xAH4AIXNxAH\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgA\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            + \"hc3EAfgAfcQB+ACFzcQB+AB9xAH4AIXNxAH4AH3EAfgAhc3EAfgAfcQB+ACF4eA\u003d\u003d\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_importStringIsInvalid() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // corrupting the string by adding an extra character"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        theString +\u003d \"a\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ImportCommand ic \u003d new ImportCommand(theString);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandTestUtil.assertCommandFailure(ic, model, commandHistory, ImportCommand.MESSAGE_FAILED);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_importNotDuplicate() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // using add example command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ImportCommand ic \u003d new ImportCommand(nonDuplicate);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        tagSet.add(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        tagSet.add(new Tag(\"owesMoney\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        enrolledMap.put(\"CS2101\", new EnrolledModule(\"CS2101\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        enrolledMap.put(\"CS2113T\", new EnrolledModule(\"CS2113T\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person p \u003d new Person(new Name(\"John Doe\"), new Phone(\"98765432\"), new Email(\"johnd@example.com\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            new Address(\"311, Clementi Ave 2, #02-25\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            tagSet, enrolledMap, TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        expectedModel.addPerson(p);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(ic, model, commandHistory, ImportCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void execute_importDuplicate() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ImportCommand ic \u003d new ImportCommand(theString);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person p \u003d expectedModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        expectedModel.deletePerson(p);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        expectedModel.addPerson(p);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        CommandTestUtil.assertCommandSuccess(ic, model, commandHistory,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            ImportCommand.MESSAGE_SUCCESS_OVERWRITE, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 3,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/MergeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.testutil.MergedBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class MergeCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                    getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_validIndexForMerge_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String groupName \u003d \"Merge\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e personsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(mainList.size() - 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge.add(mainList.get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge.add(mainList.get(mainList.size() - 1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        MergedBuilder mergedBuilder \u003d new MergedBuilder(personsToMerge, groupName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person newGroup \u003d mergedBuilder.getMergedPerson();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.addPerson(newGroup);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertMergeSuccess(indices, groupName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_invalidIndexForMerge_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String groupName \u003d \"invalidIndex\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cInteger\u003e indexOverLimit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cInteger\u003e indexUnderLimit \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int overLimit \u003d mainList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indexOverLimit.add(overLimit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertIndexSelectionFailure(indexOverLimit, groupName, MergeCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int underLimit \u003d -1;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indexUnderLimit.add(underLimit);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertIndexSelectionFailure(indexUnderLimit, groupName, MergeCommand.MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_editExistingGroup_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String groupName \u003d \"Edit\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e personsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge.add(mainList.get(INDEX_FIRST_PERSON.getOneBased()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge.add(mainList.get(INDEX_SECOND_PERSON.getOneBased()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        MergedBuilder mergedBuilder \u003d new MergedBuilder(personsToMerge, groupName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person newGroup \u003d mergedBuilder.getMergedPerson();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.addPerson(newGroup);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.addPerson(newGroup);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertGroupEditSuccess(indices, groupName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code MergeCommand} with the given {@code index}, and checks that correct contacts are merged"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * correctly."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertMergeSuccess(List\u003cInteger\u003e indices, String groupName) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        MergeCommand mergeCommand \u003d new MergeCommand(indices, groupName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d String.format(MergeCommand.MESSAGE_MERGE_TIMETABLE_SUCCESS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(mergeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code MergeCommand} with the given {@code index}, and checks that correct {@code CommandException}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * is thrown"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertIndexSelectionFailure(List\u003cInteger\u003e indices, String groupName, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        MergeCommand mergeCommand \u003d new MergeCommand(indices, groupName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandFailure(mergeCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Executes a {@code MergeCommand} with the given {@code index}, and checks that correct group is updated correctly."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertGroupEditSuccess(List\u003cInteger\u003e indices, String groupName) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        MergeCommand mergeCommand \u003d new MergeCommand(indices, groupName);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d String.format(MergeCommand.MESSAGE_UPDATE_GROUP_SUCCESS, groupName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(mergeCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 132,
      "auskure": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "auskure": 2,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(mainList.size());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 11,
      "auskure": 2,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowNotesCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "//@@author BearPerson1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "public class ShowNotesCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     * test if properly detects file location"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    public void execute_showNotes_properlyFindNotesFolderSuccess() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        String intendedFileLocation \u003d System.getProperty(\"user.dir\") + ShowNotesCommand.getNotesPathExtension();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        File notesFolder \u003d new File(intendedFileLocation);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "        assertTrue(notesFolder.exists());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BearPerson1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BearPerson1": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                            getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateMergedCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getTypicalNotesDownloaded;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsMergedPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.testutil.MergedBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class UpdateMergedCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "            getTypicalNotesDownloaded(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private String groupName \u003d \"test\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e personsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(mainList.size() - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge.add(mainList.get(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge.add(mainList.get(mainList.size() - 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        MergedBuilder mergedBuilder \u003d new MergedBuilder(personsToMerge, groupName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person newGroup \u003d mergedBuilder.getMergedPerson();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.addPerson(newGroup);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.addPerson(newGroup);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_updateAfterTimetableChange_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d expectedModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mergedList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToChange \u003d mainList.get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e timetableToChange \u003d personToChange.getTimeSlots();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e dayToChange \u003d timetableToChange.get(\"mon\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        dayToChange.set(1, new TimeSlots(\"test\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personToChange \u003d mergedList.get(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timetableToChange \u003d personToChange.getTimeSlots();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        dayToChange \u003d timetableToChange.get(\"mon\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots changedTimeSlot \u003d dayToChange.get(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String newBusyNum \u003d changedTimeSlot.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int newBusyNumInt \u003d Integer.parseInt(newBusyNum);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        changedTimeSlot \u003d new TimeSlots(Integer.toString(newBusyNumInt));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        dayToChange.set(1, changedTimeSlot);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertUpdateTimeSlotSuccess();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_updateAfterDeletionChange_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d expectedModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mergedList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e personsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cString\u003e\u003e removedPersons \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToDelete \u003d mainList.get(mainList.size() - 1);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person groupToUpdate \u003d mergedList.get(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        personsToMerge.add(mainList.get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        new MergedBuilder(personsToMerge, groupName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e affectedModules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name deletedPersonName \u003d personToDelete.getName();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name affectedModuleName \u003d groupToUpdate.getName();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        affectedModules.add(affectedModuleName.toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        removedPersons.put(deletedPersonName.toString(), affectedModules);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String output \u003d createCorrectOutput(removedPersons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertUpdateDeletionSuccess(output);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void execute_updateAfterDeletionAllMembersOfGroup_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d expectedModel.getFilteredPersonList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mergedList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList).filtered(new IsMergedPredicate());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e personsToMerge \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cString\u003e\u003e removedPersons \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToDelete1 \u003d mainList.get(mainList.size() - 1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToDelete2 \u003d mainList.get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person groupToUpdate \u003d mergedList.get(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.deletePerson(personToDelete1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        model.deletePerson(personToDelete2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.deletePerson(personToDelete1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.deletePerson(personToDelete2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.deletePerson(groupToUpdate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e affectedModules1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name deletedPersonName1 \u003d personToDelete1.getName();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name affectedModuleName \u003d groupToUpdate.getName();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        affectedModules1.add(affectedModuleName.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        removedPersons.put(deletedPersonName1.toString(), affectedModules1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e affectedModules2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name deletedPersonName2 \u003d personToDelete2.getName();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        affectedModules2.add(affectedModuleName.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        removedPersons.put(deletedPersonName2.toString(), affectedModules2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String output \u003d createCorrectOutput(removedPersons);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertUpdateDeletionGroupSuccess(output, affectedModuleName.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Checks that executing update command after the time slot of a contact has changed causes model to be equal to"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * expected model."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertUpdateTimeSlotSuccess() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        UpdateMergedCommand updateMergedCommand \u003d new UpdateMergedCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d String.format(updateMergedCommand.MESSAGE_UPDATE_SUCCESS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(updateMergedCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Checks that executing update command after a contact has been deleted causes model to be equal to"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * expected model."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertUpdateDeletionSuccess(String affectedGroupsOutput) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        UpdateMergedCommand updateMergedCommand \u003d new UpdateMergedCommand();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d UpdateMergedCommand.MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_PERSONS + affectedGroupsOutput;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(updateMergedCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Checks that executing update command after a group deletion is caused by a contact deletion causes"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * model to be"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * equal to"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * expected model."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private void assertUpdateDeletionGroupSuccess(String affectedGroupsOutput, String deletedGroupsOutput) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        UpdateMergedCommand updateMergedCommand \u003d new UpdateMergedCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                UpdateMergedCommand.MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_PERSONS + affectedGroupsOutput"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        + UpdateMergedCommand.MESSAGE_UPDATE_SUCCESS_WITH_REMOVED_GROUPS + deletedGroupsOutput;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(updateMergedCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Takes a map of the contacts who have been deleted and the groups affected by their deletion and returns the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * correct output"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    String createCorrectOutput(Map\u003cString, List\u003cString\u003e\u003e removedPersons) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Iterator\u003cMap.Entry\u003cString, List\u003cString\u003e\u003e\u003e it \u003d removedPersons.entrySet().iterator();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        while (it.hasNext()) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            Map.Entry\u003cString, List\u003cString\u003e\u003e removedName \u003d it.next();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            output \u003d output + removedName.getKey() + \":\" + \" \";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            List\u003cString\u003e removedModules \u003d removedName.getValue();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            for (String affectedGroup : removedModules) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                if (affectedGroup.equalsIgnoreCase(removedModules.get(removedModules.size() - 1))) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    output \u003d output + affectedGroup + \"\\n\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    output \u003d output + affectedGroup + \", \";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 202,
      "auskure": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" main \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertEquals(new DeleteCommand(\"main\", INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertEquals(new EditCommand(Integer.toString(INDEX_FIRST_PERSON.getOneBased()), descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"main\", \"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 4,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ChangeTimeSlotCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.ChangeTimeSlotCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class ChangeTimeSlotCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private ChangeTimeSlotCommandParser parser \u003d new ChangeTimeSlotCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_validArgs_returnsChangeCommand() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String index \u003d \"1\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String[] actions \u003d {\"1\", \"mon\", \"10am\", \"GER1000\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ChangeTimeSlotCommand expectedChangeCommand \u003d new ChangeTimeSlotCommand(index, actions);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \"1 mon 10am GER1000\", expectedChangeCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_invalidDay_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"1 a 10am GER1000\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_INVALID_DAY + ChangeTimeSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"7 1 10am GER1000\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_INVALID_DAY + ChangeTimeSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"1 sat 10am GER1000\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_INVALID_DAY + ChangeTimeSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_invalidTime_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"1 mon 7am GER1000\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_INVALID_TIME + ChangeTimeSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"1 mon 8pm GER1000\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_INVALID_TIME + ChangeTimeSlotCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"1 mon 10am\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"1 mon GER1000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"1 10am GER1000\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"mon 10am GER100\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"test\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                ChangeTimeSlotCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "E0201942": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \"main 1\", new DeleteCommand(\"main\", INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 3,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String userInput \u003d Integer.toString(targetIndex.getOneBased()) + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String userInput \u003d Integer.toString(targetIndex.getOneBased()) + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String userInput \u003d Integer.toString(targetIndex.getOneBased()) + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedCommand \u003d new EditCommand(Integer.toString(targetIndex.getOneBased()), descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 17,
      "-": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PRIVACY_PARAMETER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Test scope: similar to {@code FreeCommandParserTest}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * @see FreeCommandParserTest"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_validArgs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String exportString \u003d \"public 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String privacy \u003d \"public\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String index \u003d \"1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseSuccess(parser, \" \" + exportString, new ExportCommand(privacy, index));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_invalidArgs() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // test if it throws parse exception when user enter empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_invalidArgs_noModifier() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // test if it throws parse exception when user enter empty string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            MESSAGE_INVALID_PRIVACY_PARAMETER + ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "leegengyu": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimetableContainsModulePredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private FilterCommandParser parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_validArgs_returnsFilterCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"mon\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"2\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimetableContainsModulePredicate predicate \u003d new TimetableContainsModulePredicate(keywords);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        FilterCommand expectedFilterCommand \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \"mon 10am\", expectedFilterCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.add(\"CS2040c\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedFilterCommand \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \"mon 10am CS2040c\", expectedFilterCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.set(0, \"CS2040c\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.remove(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        keywords.remove(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        expectedFilterCommand \u003d new FilterCommand(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \"CS2040c\", expectedFilterCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_invalidTime_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"mon 10\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"mon am\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"mon 8pm\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"mon 7am\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"mon\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_emptyArgs_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \" \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                FilterCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"main\", \"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \"main Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \" main\\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 3,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FreeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.FreeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class FreeCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private FreeCommandParser parser \u003d new FreeCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_validArgs() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArrayList\u003cString\u003e listIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        listIndex.add(\"1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_FREE + \"1\", new FreeCommand(listIndex));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_validArgs_differentIndex() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ArrayList\u003cString\u003e listIndex \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        listIndex.add(\"2\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        FreeCommand freeCommandOne \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        FreeCommand freeCommandTwo \u003d new FreeCommand(listIndex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            freeCommandOne \u003d parser.parse(\" \" + PREFIX_FREE + \"1\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", e);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertNotEquals(freeCommandTwo, freeCommandOne);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_invalidArgs() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseFailure(parser, \" 1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_invalidArgs_wrongPrefix() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_TAG + \"1\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, FreeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "//@@author leegengyu"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * Test scope: similar to {@code FreeCommandParserTest}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " * @see FreeCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "public class ImportCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    private ImportCommandParser parser \u003d new ImportCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_validArgs() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        //the import string does not matter, just to test if the parser is able to pass the string to the command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        String importString \u003d \"abc\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseSuccess(parser, \" \" + importString, new ImportCommand(importString));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public void parse_invalidArgs() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        // test if it throws parse exception when user enter empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leegengyu": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/MergeCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.logic.commands.MergeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class MergeCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private MergeCommandParser parser \u003d new MergeCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_validArgs_returnsMergeCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String groupName \u003d \"test\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        indices.add(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        MergeCommand expectedMergeCommand \u003d new MergeCommand(indices, groupName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseSuccess(parser, \" m/1 m/2 n/test\", expectedMergeCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_noGroupName_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \" m/1 m/2\", MergeCommand.MESSAGE_NO_GROUP_NAME + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + MergeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_indexNotANumber_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \" m/1 m/a n/test\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                MergeCommand.MESSAGE_INDEX_NEEDS_TO_BE_NUMBER + MergeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertParseFailure(parser, \"hi\", String.format(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                MergeCommand.MESSAGE_USAGE)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": " *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": "//@@author auskure"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2100_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2101_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.getDifferentNotesDownloaded;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.testutil.NotesDownloadedBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloaded notesDownloaded \u003d new NotesDownloadedBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                    .withNotes(CS2100_MODULE_CODE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                    .withNotes(CS2101_MODULE_CODE).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloaded differentNotesDownloaded \u003d new NotesDownloaded();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, notesDownloaded, userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, notesDownloaded, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different addressBook, with everything else constant -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, notesDownloaded, userPrefs)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different notesDownloaded, with everything else constant -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentNotesDownloaded, userPrefs)));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different filteredList, with everything else constant -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, notesDownloaded, userPrefs)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different notesDownloaded, with everything else constant -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager.resetNotesData(getDifferentNotesDownloaded());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, notesDownloaded, userPrefs)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": "        modelManager.resetNotesData(notesDownloaded);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // different userPrefs, with everything else constant -\u003e returns true"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, notesDownloaded, differentUserPrefs)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 101,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.SELF;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            .withPerson(SELF).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            .withPerson(SELF).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            .withPerson(SELF).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().withPerson(SELF).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8,
      "-": 294
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public void completelyEquals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertTrue(ALICE.completelyEquals(aliceCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertTrue(ALICE.completelyEquals(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertFalse(ALICE.completelyEquals(editedAlice));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 11,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloadStorageHelper notesDownloadStorage \u003d new NotesDownloadStorageHelper(getTempFilePath(\"notesTest\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, notesDownloadStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                             new NotesDownloadStorageHelper(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 4,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.toXmlAdaptedEnrolledModules;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.toXmlAdaptedTimeSlots;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, EnrolledModule\u003e enrolledModules \u003d BENSON.getEnrolledModules();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final List\u003cXmlAdaptedEnrolledModule\u003e VALID_ENROLLED_MODULES \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            toXmlAdaptedEnrolledModules(enrolledModules);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, List\u003cTimeSlots\u003e\u003e blankTimeSlots \u003d TimeSlots.initTimeSlots();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private static final Map\u003cString, ListWrapper\u003e VALID_TIMESLOTS \u003d toXmlAdaptedTimeSlots(blankTimeSlots);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                        VALID_ENROLLED_MODULES, VALID_TIMESLOTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 27,
      "auskure": 1,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        descriptor.setEnrolledModules(person.getEnrolledModules());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        descriptor.setTimeSlots(person.getTimeSlots());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Sets the {@code TimeSlots} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public EditPersonDescriptorBuilder withTimeSlots() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        descriptor.setTimeSlots(TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Sets the {@code EnrolledModules} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public EditPersonDescriptorBuilder withEnrolledModules() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        descriptor.setEnrolledModules(new TreeMap\u003c\u003e());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 15,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FileAndFolderCreation.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2100_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2101_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS2102_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS3100_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS3235_MODULE_CODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": "import static seedu.address.testutil.TypicalModuleCodes.CS5240_MODULE_CODE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Assists FileUtilTest with creating the environment for the test, and deleting the environment after the test is over."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class FileAndFolderCreation {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final Path PARENT_DIRECTORY \u003d Paths.get(\"src\", \"test\", \"data\", \"FileUtilTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final Path EMPTY_SAMPLE_DIRECTORY \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \"data\", \"FileUtilTest\", \"EmptySampleDirectory\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final Path SAMPLE_DIRECTORY \u003d Paths.get(\"src\", \"test\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \"data\", \"FileUtilTest\", \"SampleDirectories\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final Path DIFFERENT_SAMPLE_DIRECTORY \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "            \"FileUtilTest\", \"DifferentSampleDirectories\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Creating the environment for the test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void initialiseTestState() throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Creating parent directory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(PARENT_DIRECTORY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Creating directory and subdirectories for SAMPLE_DIRECTORY"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path firstModule \u003d Paths.get(SAMPLE_DIRECTORY.toString(), CS2100_MODULE_CODE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path secondModule \u003d Paths.get(SAMPLE_DIRECTORY.toString(), CS2101_MODULE_CODE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path thirdModule \u003d Paths.get(SAMPLE_DIRECTORY.toString(), CS2102_MODULE_CODE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(firstModule);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(secondModule);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(thirdModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Creating directory for EMPTY_SAMPLE_DIRECTORY"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(EMPTY_SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Creating directory and subdirectories for DIFFERENT_SAMPLE_DIRECTORY"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(DIFFERENT_SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path fourthModule \u003d Paths.get(DIFFERENT_SAMPLE_DIRECTORY.toString(), CS3100_MODULE_CODE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path fifthModule \u003d Paths.get(DIFFERENT_SAMPLE_DIRECTORY.toString(), CS3235_MODULE_CODE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path sixthModule \u003d Paths.get(DIFFERENT_SAMPLE_DIRECTORY.toString(), CS5240_MODULE_CODE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(fourthModule);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(fifthModule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.createDirectory(sixthModule);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Deletes the environment for the test when it is over"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static void endTestState() throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Deleting directory and subdirectories for SAMPLE_DIRECTORY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path firstModule \u003d Paths.get(SAMPLE_DIRECTORY.toString(), CS2100_MODULE_CODE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path secondModule \u003d Paths.get(SAMPLE_DIRECTORY.toString(), CS2101_MODULE_CODE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path thirdModule \u003d Paths.get(SAMPLE_DIRECTORY.toString(), CS2102_MODULE_CODE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(firstModule);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(secondModule);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(thirdModule);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Deleting directory for EMPTY_SAMPLE_DIRECTORY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(EMPTY_SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": "        // Deleting directories and subdirectories for DIFFERENT_SAMPLE_DIRECTORY"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path fourthModule \u003d Paths.get(DIFFERENT_SAMPLE_DIRECTORY.toString(), CS3100_MODULE_CODE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path fifthModule \u003d Paths.get(DIFFERENT_SAMPLE_DIRECTORY.toString(), CS3235_MODULE_CODE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Path sixthModule \u003d Paths.get(DIFFERENT_SAMPLE_DIRECTORY.toString(), CS5240_MODULE_CODE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(fourthModule);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(fifthModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(sixthModule);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(DIFFERENT_SAMPLE_DIRECTORY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": "        //Deleting parent directory"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Files.delete(PARENT_DIRECTORY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MergedBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0201942"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0201942"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0201942"
        },
        "content": " * A utility class to help with building merged Person objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0201942"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "public class MergedBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Person mergedPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Takes a list of Person objects and creates a merged Person contact."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public MergedBuilder(List\u003cPerson\u003e personsToMerge, String groupName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int j \u003d 0; j \u003c personsToMerge.size() - 1; j++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personsToMerge.set(j + 1, mergeTimetables(personsToMerge.get(j), personsToMerge.get(j + 1), j, groupName));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.mergedPerson \u003d personsToMerge.get(personsToMerge.size() - 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Returns the merged Person."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public Person getMergedPerson() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return this.mergedPerson;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Merges 2 people into a single person with a merged timetable"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Person mergeTimetables(Person person1, Person person2, int index, String groupName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Name mergedName \u003d new Name(groupName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Phone phone \u003d new Phone(\"99999999\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Email email \u003d new Email(\"notimportant@no\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getName().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            address \u003d new Address(person1.getAddress().toString() + \", \" + person2.getName().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Set\u003cTag\u003e mergedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        mergedTags.add(new Tag(\"merged\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e mergedSlots \u003d mergeTimeSlots(person1.getTimeSlots(), person2.getTimeSlots());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, seedu.address.model.enrolledmodule.EnrolledModule\u003e enrolledClassMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return new Person(mergedName, phone, email, address, mergedTags, enrolledClassMap,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                mergedSlots);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Creates a new merged timetable from 2 timetables."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e mergeTimeSlots(Map\u003cString, List\u003cTimeSlots\u003e\u003e slots1,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                                        Map\u003cString, List\u003cTimeSlots\u003e\u003e slots2) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon1 \u003d slots1.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] mon2 \u003d slots2.get(\"mon\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue1 \u003d slots1.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] tue2 \u003d slots2.get(\"tue\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed1 \u003d slots1.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] wed2 \u003d slots2.get(\"wed\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu1 \u003d slots1.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] thu2 \u003d slots2.get(\"thu\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri1 \u003d slots1.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        TimeSlots[] fri2 \u003d slots2.get(\"fri\").toArray(new TimeSlots[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalMon;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalTue;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalWed;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalThu;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalFri;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Map\u003cString, List\u003cTimeSlots\u003e\u003e finalSlots \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalMon \u003d compareTimeSlots(mon1, mon2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalTue \u003d compareTimeSlots(tue1, tue2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalWed \u003d compareTimeSlots(wed1, wed2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalThu \u003d compareTimeSlots(thu1, thu2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalFri \u003d compareTimeSlots(fri1, fri2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"mon\", finalMon);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"tue\", finalTue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"wed\", finalWed);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"thu\", finalThu);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        finalSlots.put(\"fri\", finalFri);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalSlots;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Compares 2 lists of time slots and returns a merged list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    List\u003cTimeSlots\u003e compareTimeSlots(TimeSlots[] day1, TimeSlots[] day2) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cTimeSlots\u003e finalDay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c 12; i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day1[i].toString().equalsIgnoreCase(\"free\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    || day1[i].toString().equalsIgnoreCase(\"0\")) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day1[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    Integer.parseInt(day1[i].toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    day1[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            if (day2[i].toString().equalsIgnoreCase(\"free\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"0\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                day2[i] \u003d new TimeSlots(\"1\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day1BusyCount \u003d day1[i].toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String day2BusyCount \u003d day2[i].toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            int totalBusyCount \u003d Integer.parseInt(day1BusyCount) + Integer.parseInt(day2BusyCount);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            String newBusyCount \u003d Integer.toString(totalBusyCount);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            finalDay.add(new TimeSlots(newBusyCount));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        return finalDay;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/NotesDownloadedBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.NotesDownloaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": " * A utility class to help with building NotesDownloaded objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": " *     {@code NotesDownloaded nd \u003d new NotesDownloadedBuilder().withNotes(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class NotesDownloadedBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private NotesDownloaded notesDownloaded;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloadedBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded \u003d new NotesDownloaded();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Adds a new {@code notes} to the {@code NotesDownloaded} that we are building."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloadedBuilder withNotes(String notes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "        notesDownloaded.addNotes(notes);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public NotesDownloaded build() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return notesDownloaded;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "auskure": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Paulines\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Map\u003cString, EnrolledModule\u003e enrolledModules;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private Map\u003cString, List\u003cTimeSlots\u003e\u003e timeslots;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        enrolledModules \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        timeslots \u003d new HashMap\u003c\u003e(TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "        enrolledModules \u003d new TreeMap\u003c\u003e(personToCopy.getEnrolledModules());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "        timeslots \u003d new HashMap\u003c\u003e(personToCopy.getTimeSlots());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses the {@code enrolledModules} into a {@code Map\u003cenrolledModules\u003e}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public PersonBuilder withEnrolledModules(String... enrolledModules) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        this.enrolledModules \u003d SampleDataUtil.getEnrolledModuleMap(enrolledModules);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Parses the {@code timeslots} into a {@code Map\u003ctimeslots\u003e}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public PersonBuilder withTimeslots() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        this.timeslots \u003d TimeSlots.initTimeSlots();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new Person(name, phone, email, address, tags, enrolledModules, timeslots);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 6,
      "auskure": 26,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.getTagName() + \" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 2,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModuleCodes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "auskure"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "auskure"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "auskure"
        },
        "content": "import seedu.address.model.NotesDownloaded;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "auskure"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "auskure"
        },
        "content": " * A utility class containing a list of {@code moduleCodes} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "auskure"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "auskure"
        },
        "content": "public class TypicalModuleCodes {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2100_MODULE_CODE \u003d \"CS2100\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2101_MODULE_CODE \u003d \"CS2101\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2102_MODULE_CODE \u003d \"CS2102\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2103_MODULE_CODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2104_MODULE_CODE \u003d \"CS2104\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2105_MODULE_CODE \u003d \"CS2105\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2106_MODULE_CODE \u003d \"CS2106\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2107_MODULE_CODE \u003d \"CS2107\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS3100_MODULE_CODE \u003d \"CS3100\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS3235_MODULE_CODE \u003d \"CS3235\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS5240_MODULE_CODE \u003d \"CS5240\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // Module Prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS_LEVEL_2000_MODULE_CODE \u003d \"CS2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "auskure"
        },
        "content": "    // Uncleaned Module Code"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final String CS2100_MODULE_CODE_UNLCLEANED \u003d \"CS2100 Introduction to Computer Architecture\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    private TypicalModuleCodes() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with all the typical moduleCodes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getAllTypicalModuleCodes() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String notes : getAllTypicalCodes()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "auskure"
        },
        "content": "            mc.add(notes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with all the moduleCodes not typically in the set"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * returned by {@code getAllTypicalCodes}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getAllDifferentModuleCodes() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String notes : getAllDifferentCodes()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "auskure"
        },
        "content": "            mc.add(notes);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with no moduleCode."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getZeroModuleCodes() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with one typical moduleCode."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getOneTypicalModuleCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2100_MODULE_CODE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with one typical module prefix."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getOneTypicalModulePrefix() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS_LEVEL_2000_MODULE_CODE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with one moduleCode not typically in the set"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * returned by {@code getAllTypicalCodes}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getOneDifferentModuleCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS3100_MODULE_CODE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with three typical moduleCodes."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getMultipleTypicalModuleCodes() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2100_MODULE_CODE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2101_MODULE_CODE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2102_MODULE_CODE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with three typical moduleCodes."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getTypicalModuleCodesWithLevel2000ComputerScienceModulePrefix() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2100_MODULE_CODE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2101_MODULE_CODE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2102_MODULE_CODE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2103_MODULE_CODE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2104_MODULE_CODE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2105_MODULE_CODE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2106_MODULE_CODE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2107_MODULE_CODE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with three moduleCodes not typically in the set"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * returned by {@code getAllTypicalCodes}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getMultipleDifferentModuleCodes() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String notes : getAllDifferentCodes()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "auskure"
        },
        "content": "            mc.add(notes);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with one typical moduleCode, and one moduleCode not typically in the set"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * returned by {@code getAllTypicalCodes}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getSimpleMixedValidityModuleCodes() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS2100_MODULE_CODE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "auskure"
        },
        "content": "        mc.add(CS3100_MODULE_CODE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code Set\u003cString\u003e} with multiple typical moduleCode, and multiple moduleCodes not typically in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * set returned by {@code getAllTypicalCodes}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static Set\u003cString\u003e getAdvancedMixedValidityModuleCodes() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Set\u003cString\u003e mc \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String notes : getAllTypicalCodes()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "auskure"
        },
        "content": "            mc.add(notes);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String notes : getAllDifferentCodes()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "auskure"
        },
        "content": "            mc.add(notes);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return mc;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an {@code NotesDownloaded} with all the typical notes downloaded."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static NotesDownloaded getTypicalNotesDownloaded() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloaded nd \u003d new NotesDownloaded();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String notes : getAllTypicalCodes()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "auskure"
        },
        "content": "            nd.addNotes(notes);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return nd;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns an {@code NotesDownloaded} with all the notes that are not typically in the"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * set returned by {@code getTypicalNotesDownloaded}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static NotesDownloaded getDifferentNotesDownloaded() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "auskure"
        },
        "content": "        NotesDownloaded nd \u003d new NotesDownloaded();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "auskure"
        },
        "content": "        for (String notes : getAllDifferentCodes()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "auskure"
        },
        "content": "            nd.addNotes(notes);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "auskure"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return nd;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static List\u003cString\u003e getAllTypicalCodes() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2100_MODULE_CODE, CS2101_MODULE_CODE, CS2102_MODULE_CODE,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                CS2103_MODULE_CODE, CS2104_MODULE_CODE, CS2105_MODULE_CODE,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "auskure"
        },
        "content": "                                                CS2106_MODULE_CODE, CS2107_MODULE_CODE));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "auskure"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * Returns a {@code List\u003cString\u003e} with all moduleCodes not typically in the"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "auskure"
        },
        "content": "     * set returned by {@code getAllTypicalCodes}."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "auskure"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static List\u003cString\u003e getAllDifferentCodes() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "auskure"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS3100_MODULE_CODE, CS3235_MODULE_CODE, CS5240_MODULE_CODE));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "auskure"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "auskure"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "auskure"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 1,
      "auskure": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.enrolledmodule.EnrolledModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.person.TimeSlots;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "auskure"
        },
        "content": "    public static final Person SELF \u003d new PersonBuilder().withName(\"Self\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "auskure"
        },
        "content": "        .withAddress(\"self\").withEmail(\"self@self\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "auskure"
        },
        "content": "        .withPhone(\"000\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "auskure"
        },
        "content": "        .withTags(\"self\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withTimeslots().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "auskure"
        },
        "content": "        .withEnrolledModules(\"CS2101\", \"CS2113T\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withTimeslots().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withTimeslots().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTimeslots().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withTimeslots().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withTimeslots().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(\"anna@example.com\").withAddress(\"4th street\").withTimeslots().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(\"stefan@example.com\").withAddress(\"little india\").withTimeslots().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withTimeslots().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    private TypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        ab.setSelf();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    public static AddressBook getFreeAddressBook() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        tagSet.add(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        tagSet.add(new Tag(\"owesMoney\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Map\u003cString, EnrolledModule\u003e enrolledMap \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        enrolledMap.put(\"CS2101\", new EnrolledModule(\"CS2101\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        enrolledMap.put(\"CS2113T\", new EnrolledModule(\"CS2113T\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        Person p \u003d new Person(new Name(\"John Doe\"), new Phone(\"98765432\"), new Email(\"johnd@example.com\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "            new Address(\"311, Clementi Ave 2, #02-25\"), tagSet, enrolledMap, TimeSlots.initTimeSlots());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leegengyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ab.addPerson(p);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        ab.setSelf();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leegengyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 14,
      "auskure": 5,
      "-": 62,
      "leegengyu": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            builder.append(\"\u003ctimeslots\u003e\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003centry\u003e\\n\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"    \u003ckey\u003ethu\u003c/key\u003e\\n\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"      \u003cvalue\u003e\\n\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"        \u003clist\u003e\\n\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"       \u003c/value\u003e\\n\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003c/entry\u003e\\n\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003centry\u003e\\n\""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"    \u003ckey\u003etue\u003c/key\u003e\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"      \u003cvalue\u003e\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"        \u003clist\u003e\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"       \u003c/value\u003e\\n\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003c/entry\u003e\\n\""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003centry\u003e\\n\""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"    \u003ckey\u003ewed\u003c/key\u003e\\n\""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"      \u003cvalue\u003e\\n\""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"        \u003clist\u003e\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"       \u003c/value\u003e\\n\""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003c/entry\u003e\\n\""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003centry\u003e\\n\""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"    \u003ckey\u003efri\u003c/key\u003e\\n\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"      \u003cvalue\u003e\\n\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"        \u003clist\u003e\\n\""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"       \u003c/value\u003e\\n\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003c/entry\u003e\\n\""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003centry\u003e\\n\""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"    \u003ckey\u003emon\u003c/key\u003e\\n\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"      \u003cvalue\u003e\\n\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"        \u003clist\u003e\\n\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003clist\u003efree\u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"          \u003c/list\u003e\\n\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"       \u003c/value\u003e\\n\""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"  \u003c/entry\u003e\\n\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                    + \"\u003c/timeslots\u003e\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            );"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 103,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * in the correct order and accounts for situations where self contact exists.."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static void assertListMatchingWithSelf(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length - 1; i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * in the correct order for situations where self contact exists."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    public static void assertListMatchingWithSelf(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertListMatchingWithSelf(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 15,
      "-": 74
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + \" \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 8,
      "-": 231
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatchingWithSelf;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" main \" + keyword);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertEquals(1, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     * and the person list panel displays the persons in the model correctly and accounts for self contact existing."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "E0201942"
        },
        "content": "    protected void assertApplicationDisplaysExpectedWithSelf(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertListMatchingWithSelf(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        // assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 20,
      "-": 231
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertApplicationDisplaysExpectedWithSelf(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 4,
      "-": 81
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \" main      \" + INDEX_FIRST_PERSON.getOneBased() + \"  \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + \"     \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d modelBeforeDeletingLast.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(mainList.size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" main \" + invalidIndex;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" main 0\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" main -1\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" main \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" main abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" main 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandFailure(\"DelETE main 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertCommandSuccess(DeleteCommand"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .COMMAND_WORD + \" main \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 24,
      "-": 161
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "auskure"
        },
        "content": "        Index indexSecond \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "auskure"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getTwoBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(command, indexSecond, BOB);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getTwoBased()), BOB);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "auskure"
        },
        "content": "        assertCommandSuccess(command, indexSecond, editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                + ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertApplicationDisplaysExpectedWithSelf(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 12,
      "auskure": 5,
      "-": 220
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" main \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Carl\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Benson Daniel\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Daniel Benson\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" main\" + \" 1\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" MeIeR\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Mei\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Meiers\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Mark\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" Daniel\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" main\" + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        command \u003d \"FiNd main Meier\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                MESSAGE_PERSONS_AND_GROUPS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 23,
      "-": 147
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" main \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 4,
      "-": 99
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatchingWithSelf;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Person[] expectedListWithoutSelf \u003d new Person[expectedList.length - 1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedList.length - 2; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0201942"
        },
        "content": "            expectedListWithoutSelf[i] \u003d expectedList[i];"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        assertListMatchingWithSelf(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 6,
      "-": 49
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0201942"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.IsNotSelfOrMergedPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0201942"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d getModel().getFilteredPersonList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        List\u003cPerson\u003e mainList \u003d ((ObservableList\u003cPerson\u003e) filteredPersonList)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0201942"
        },
        "content": "                .filtered(new IsNotSelfOrMergedPredicate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        int lastPersonIndex \u003d mainList.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0201942"
        },
        "content": "        Index personCount \u003d Index.fromOneBased(lastPersonIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0201942"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0201942": 12,
      "-": 144
    }
  }
]
