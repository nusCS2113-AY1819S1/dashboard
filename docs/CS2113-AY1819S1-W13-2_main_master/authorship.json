[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d Awesomest Dive Log"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/nusCS2113-AY1819S1/addressbook-level4[image:https://travis-ci.org/nusCS2113-AY1819S1/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* This is a desktop Dive Log. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d Motivation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "When a diver goes on a dive, the pressure underwater causes nitrogen to build up in the blood stream. When the diver returns to the surface, he or she has that level of nitrogen in his or her blood. However, due to the atmospheric pressure being lower than underwater, the partial pressure of nitrogen is different. Having too much nitrogen build up can be dangerous particularly if you are planning a second dive or going on a flight as the nitrogen can form bubbles inside oneâ€™s bloodstream. In order to solve this problem, divers manually calculate their â€œpressure groupsâ€?. The pressure groups are on a range from A,B,C all the way to X. Depending on your pressure group you can attempt your next dive. It is generally advised to be below the â€œBâ€? pressure group before your next dive."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* This application was built for NUS CS2113T AY2018/2019 Semester 1 and is based off https://nuscs2113-ay1819s1.github.io/addressbook-level4/[addressbook level 4]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "arjo129": 7
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tttaus"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tttaus"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tttaus"
        },
        "content": "  [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"githubId\": \"shuanang\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"displayName\": \"ANG...UAN\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"authorNames\": [\"shuanang\", \"Ang Yi Shuan\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"githubId\": \"arjo129\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"displayName\": \"ARJ...RTY\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"authorNames\": [\"arjo129\", \"Arjo Chakravarty\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    },"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"githubId\": \"cjunxiang\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"displayName\": \"CHE...ANG\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"authorNames\": [\"cjunxiang\", \"C.Junxiang\", \"Cjunx\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    },"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"githubId\": \"tttaus\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"displayName\": \"TAN...NCE\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \"authorNames\": [\"tttaus\", \"Terrence\", \"Unknown\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tttaus"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tttaus"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 24
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "mainClassName \u003d \u0027seedu.divelog.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-json-org\u0027, version: \u00272.2.3\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    archiveName \u003d \u0027divelog.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            test.include \u0027seedu/divelog/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            test.include \u0027seedu/divelog/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            test.exclude \u0027seedu/divelog/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 241,
      "arjo129": 6
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Arjo Chakravarty"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::arjo129.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "{empty}[https://arjo129.wordpress.com[homepage]] [https://github.com/arjo129[github]]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Responsibilities: Team Lead"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Ang Yi Shaun"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::shuanang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "{empty}[http://github.com/shuanang[github]]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Responsibilities: Pressure group calculation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Terrence Tan"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "image::tttaus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "{empty}[http://github.com/tttaus[github]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Responsibilities: Dive plot UI"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Chen Jun Xiang"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::cjunxiang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "{empty}[http://github.com/cjunxiang[github]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Responsibilities: Search"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tttaus": 3,
      "-": 25,
      "arjo129": 14
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2113-AY1819S1-W13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* *Email us* : You can also reach us at `arjo [at] u.nus.edu.sg`"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "arjo129": 2
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d Divelog - Developer Guide v.1.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "By: `Team CS2113-AY1819S1-W13-2` Â Â Â Â  Since: `Aug 2018` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Context"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "When a diver goes on a dive, the pressure underwater causes nitrogen to build up in the blood stream. When the diver returns to the surface, he or she has that level of nitrogen in his or her blood. However, due to the atmospheric pressure being lower than underwater, the partial pressure of nitrogen is different. Having too much nitrogen build up can be dangerous particularly if you are planning a second dive or going on a flight as the nitrogen can form bubbles inside oneâ€™s bloodstream. In order to solve this problem, divers manually calculate their â€œpressure groupsâ€?. The pressure groups are on a range from A,B,C all the way to Z. Depending on your pressure group you can attempt your next dive. It is generally advised to be below the â€œBâ€? pressure group before your next dive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Before attempting your next dive, you have to plan your dive first! You want to dive to 15 metres for half an hour after your pressure group from your first dive is D. Are you sure it\u0027s safe to do so? Use our Divelog to find out!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tttaus"
        },
        "content": "If there is still error after enabling them, you will need to go to `File` \u003e `Settings` \u003e `Build, Execution, Deployment` \u003e `Compiler` \u003e `Java Compiler` \u003e `Javac options` and add the following: `--add-modules\u003djavafx.fxml`. This is illustrated by the diagram below."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::commandlineparameters.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Run the `seedu.divelog.MainApp` and try a few commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::SDforDeleteDiveSession.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Note how the `Model` simply raises a `DiveLogChangedEvent` when the Dive Session data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::SDforDeleteDiveSessionEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shuanang"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `DiveListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* Binds itself to the data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Some of the choices here was choosing the type of placeholders to use like `labels` etc to store the data. Eventually it boiled down to the nature of the data and how it was to be displayed at the end of the day."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".  `Logic` uses the `DiveLogParser` class to parse the user command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arjo129"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a diveSession) and/or raise events."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::DeleteDiveSessionSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* stores the DiveLog data."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cDiveSession\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Some choices made here include the encapsulation of even simple values such as depth which is stored as a `DepthProfile` object."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "arjo129"
        },
        "content": "By doing so suppose we want to extend Depth to support complex dives with multiple depths or different units, we can simply update"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjo129"
        },
        "content": "`DepthProfile` without breaking existing code."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* can save the Dive Log data in xml format and read it back."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d\u003d Application State"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arjo129"
        },
        "content": "As of now certain things that are planned in the future require global data."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arjo129"
        },
        "content": "For instance, the units or the `plan` command. These are stored in the `ApplicationState` singleton."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Any other temporary information that is global and stored within the run"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arjo129"
        },
        "content": "should be added as a property to {repoURL}/src/main/java/seedu/divelog/commons/core/ApplicationState.java[`ApplicationState.java`]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th diveSession in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new diveSession. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Step 4. The user now decides that adding the diveSession was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "tttaus"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial Dive Log state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire Dive Log."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "arjo129"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the diveSession being deleted)."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Looking Up Dive Tables For Pressure Groups"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "shuanang"
        },
        "content": "At the heart of the divelog app is the ability to automatically calculate nitrogen pressure groups."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shuanang"
        },
        "content": "To do so we adhere to PADI\u0027s dive charts, available here https://elearning.padi.com/company0/tools/RDP_Table%20Met.pdf. These charts provide a lookup table for divers through which they can determine"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "arjo129"
        },
        "content": "their current pressure group. The underlying implementation for these charts can be found in the `PadiDiveTable` class."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "arjo129"
        },
        "content": "A such the dive tales are stored in the `resources` folder as JSON files. They are loaded using the `DiveTableUtil` class"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "arjo129"
        },
        "content": "via the FASTXML Jackson library. The `PadiDiveTable` itself is a singleton class. This choice was made as it makes sense to"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "shuanang"
        },
        "content": "load the Dive Tables only once at the stat into memory (although in its current form it is not the case). An example"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "shuanang"
        },
        "content": "interaction with `PadiDiveTable` and `DiveTableUtil` can be found in the sequence diagram below:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "arjo129"
        },
        "content": "image::PadiDiveTableUsage.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Internally at the moment, `DiveTableUtil#readJsonFileFromResources` has the following interaction:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "arjo129"
        },
        "content": "image::DiveTableUtilInternal.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Retrieving Dive Tables"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* **Alternative 1 (current choice):** Use JSON files"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "arjo129"
        },
        "content": "** Pros: Easy to change data within tables."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "shuanang"
        },
        "content": "** Cons: May have performance issues if the tables are too large as it reads from disk."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* **Alternative 2:** Hard code the tables"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "shuanang"
        },
        "content": "** Pros: Have mildly smaller impact on performance as data is loaded into memory at start up."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "arjo129"
        },
        "content": "** Cons: Very tedious to implement, results in unreadable code."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Minimising File Reads And Data Duplication"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* **Alternative 1 (current choice)**: Use a singleton class"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "shuanang"
        },
        "content": "** Pros: It is possible to read the file only once and the memory used by the objects will only exist in one place."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "arjo129"
        },
        "content": "This saves both memory and disc writes."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "arjo129"
        },
        "content": "** Cons: Can be troublesome to implement."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shuanang"
        },
        "content": "* **Alternative 2: ** Just use `PADIDiveTable` standard classes"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "arjo129"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "arjo129"
        },
        "content": "** Cons: Wastes memory and performs unnecessary IO."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d CRUD for `DiveSession` objects"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "arjo129"
        },
        "content": "At its heart, the application is a divelog. The source code for this application was adopted from an addressbook application."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "arjo129"
        },
        "content": "The main implementation consideration was to minimize the number of changes in the existing addressbook class. At its heart"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "arjo129"
        },
        "content": "the Dive Log uses the Model which is described in (See \u003c\u003cDesign-Model\u003e\u003e). The overall flow for command execution is similar"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "shuanang"
        },
        "content": "to the case of undo. For additions, additions are made to the model, which is eventually committed to storage."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "arjo129"
        },
        "content": "An overall sequence diagram is as follows:"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Consistency Checks For Diving And Retaining Order [TODO]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Currently, this is still unimplemented. However, the plan would be to modify the `DiveSession` object such that it implements `java.lang.Comparable`."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "arjo129"
        },
        "content": "In doing so it allows for the whole model to be traversed in a linear fashion. At the same time, this allows for insertion of"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "arjo129"
        },
        "content": "new dives at the right locations efficiently through Binary Search. The sorting is achieved by time and date."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Localized Units"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "arjo129"
        },
        "content": "As of `v1.3`, a `set_units` command was added. This allows the user to switch between meters and feet."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "arjo129"
        },
        "content": "The implementation of this command involves altering the `ApplicationState`. Once the `ApplicationState`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "arjo129"
        },
        "content": "is updated a `UnitsChangedEvent` is posted to the `EventsCenter`. The `EventsCenter` issues a"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "arjo129"
        },
        "content": "call to the UI. The relevant parts of the UI will be forced to re-render themselves to match"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "arjo129"
        },
        "content": "the new units."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Certain properties of the application can be controlled (e.g. App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "arjo129"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.divelog.ui` package."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "arjo129"
        },
        "content": "e.g. `seedu.divelog.commons.StringUtilTest`"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "arjo129"
        },
        "content": "e.g. `seedu.divelog.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "arjo129"
        },
        "content": "e.g. `seedu.divelog.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "arjo129"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "arjo129"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a diveSession, and link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "arjo129"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each diveSession, and remove the `tag` from each diveSession."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "arjo129"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last diveSession in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Use different colors for different tags inside diveSession cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Edits the remark for a diveSession specified in the `INDEX`. +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Edits the remark for the first diveSession to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Removes the remark for the first diveSession."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each diveSession later."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "arjo129"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/diveSession/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`]."
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`]."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the diveSession will be created without a remark)."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `diveLog.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsDiveLog.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`]."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the diveSession that it is currently building."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a diveSession."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Is a beginner Diver"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Goes diving frequently."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Has the need to keep track of Nitrogen Levels so that he/she does not end up needing to undergo decompression."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "arjo129"
        },
        "content": "*Value proposition*: An automated desktop app to keep track of nitrogen levels for divers."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`, Null (Not Implementing) - `-`"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[cols\u003d\"2,2,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".List of user stories"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|\u003d\u003d\u003d// tag::dataencryption[]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a... |I want to... | So that I can..."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Know my current pressure group"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Plan my next dive safely"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Add dive entries"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|So that I can know my pressure group."
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|`**`"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Be able to enter data in local time"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Save time when calculating my pressure groups."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|`**`"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Plan my dives ahead of performing them"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|So that I know what a safe limit is."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|to see where I have been"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Reminisce"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|`-`"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Dive master"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Check my dive buddyâ€™s logs"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|Make sure all of us have a safe trip"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "tttaus"
        },
        "content": "(For all use cases below, the *System* is the `Dive Log Application` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d\u003d Use case: Add dive session"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver chooses to add a new dive session"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System returns and requests for data from Diver"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver adds time spent at different depths, marine species diver has seen"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System confirms the details"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver confirms the details"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System adds the dive session and shows it is successful"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver confirms"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System shows recommended time to next dive or flight"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* 3a. The data entered is invalid. (i.e. The diver enters text instead of numeric values for depth.)"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** 3a1. System points to the invalid data and asks user to clarify data."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d\u003d Use case: View details of a dive session"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "shuanang"
        },
        "content": ". Diver selects dive session to view details of the dive session"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System returns the dive session details"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a dive session"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver selects dive session to edit"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System returns the parameters of the specific dive session"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver enters the new information of that dive session"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System confirms the edit of that dive session."
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "shuanang"
        },
        "content": "* 5a. The data entered is invalid. (i.e. The diver enters text instead of numeric values for depth.)"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** 5a1. System points to the invalid data entered and asks user to clarify data."
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* 7b. The user realizes the input is invalid. He enters undo."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** 7b1. System rolls back the last edit."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d\u003d Use case: Remove a dive session"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver selects the dive session to remove"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System confirms the deletion"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver confirms."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System removes dive session."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "tttaus"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* 5a. Diver cancels."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** 5a1. System does not make any changes to current state."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d\u003d Use case: Check current pressure group"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". Diver requests system for his current pressure group"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "tttaus"
        },
        "content": ". System displays his current pressure group, the time needed to the next pressure group, and the time needed for him to reach his desired pressure group as well as the recommended time to his next dive or flight."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".  Should be able to hold up to 1000 dive sessions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".  Should allow users to select and view dives in addition to the command line."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".  Should be able to calculate the pressure groups as specified by PADIâ€™s dive table."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".  Should have a simple tutorial walk through to orientate the users if it is their first time running the application"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Author: Arjo Chakravarty"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "arjo129"
        },
        "content": "A few similar products exist out there."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Firstly, one of the team members (Arjo) uses a paper equivalent of such a dive log. This dive log records all the necessary information and provides a user with the basic safety information of the PG being provided as fields. However, the pressure group information must be hand calculated leading to error or negligence."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "arjo129"
        },
        "content": "image::paper_notebook.jpg[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Linus Torvalds, the benevolent dictator of the linux kernel and mastermind behind git has also created a dive log program. Linusâ€™s program, known as Subsurface, is written in C++ and uses the Qt library allowing for cross-platform usage."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "arjo129"
        },
        "content": "image::subsurface_1.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Subsurface has a comprehensive interface for entering a lot of details. It allows the user to enter things such as the depth, who the dive master was, dive buddyâ€™s name and equipment. It also has a nice satellite map to show where you are planning the dive. The plot on the right hand side illustrates the depth. This includes the so called â€œsafety stopâ€? where the diver allows some of the nitrogen to be released from his bloodstream before surfacing. The plot also is capable of showing a nitrogen profile and a rough estimate of how much oxygen should be kept in reserve for each part of the dive. All of this make it a very complete product with the exception that its initial learning curve is fairly steep."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "arjo129"
        },
        "content": "image::subsurface_2.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "arjo129"
        },
        "content": "When the user first opens the dive log he or she is greeted with this screen, which is not very indicative of what exactly is going on. It takes the user a few attempts to figure out how to add a dive as the add dive is nested very deep inside the menu. It also does not display the pressure group anywhere. This can be confusing for beginner divers as they rely on pressure groups to ensure their own safety."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Deleting a diveSession"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "arjo129"
        },
        "content": ". Deleting a diveSession while all persons are listed"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "arjo129"
        },
        "content": "   Expected: No diveSession is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "*below is for later\u0027s edit"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "*/"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d New Parameters in DiveSession"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d ourDate (Date Start/ Date End)"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "The ourDate Class consist of a String. When using the `add` or `edit` feature, the inputs will be parsed and checked to be a 8 digit String, in the format of _[DDMMYYYY]_ through `ParserUtils`. Only Integers will be accepted."
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Date Start and Date End will have prefixes `ds/` and `de/` respectively, and these prefixes will be used when using the `add` or `edit` feature."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d Timezone"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "shuanang"
        },
        "content": "The timeZone class consists of a Integer (ranging from -12 to +12). This integer is dependent on the user input, which is the timezone in the format of UTC. If there are no integers in this string, there will be an exception thrown."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Timezone will have prefix `tz/` which will be used when using the `add` or `edit` feature."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "shuanang"
        },
        "content": "\u003d\u003d\u003d Automatic Calculation of Pressure Group"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Takes into account the latest (in terms of time) Dive Session. Subtracting the current time from the latest dive, the method will be able to automatically calculate time until the current Pressure group will fall to the next group, which is the time until it is safe to dive again."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d Pressure Group"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Pressure group utilises a 3d Array in the form of `hashmap\u003cint, hashmap\u003cstring, string\u003e\u003e`."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Pressure groups range from A to Z. (i anyhow)."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d CompareUtils"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "CompareUtils is a helper method class implemented to assist with the automatic calculations of `PressureGroup`"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "The current methods in this Class include:"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `checkTimeDifference()` -- When 2 ourDate Strings and 2 time Strings parameters are passed, the method will return the time difference in number of minutes. This will be used in calculations"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `convertTimetoLocal()` -- This method uses the new `timeZone` parameter in DiveSession to convert any time to local time, based on the timeZone value (in UTC)."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "This method returns a long type of length 12, in the format of _[DDMMYYYYHHMM]_."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `getCurrentDateTime()` -- This method returns the current time in `Date` format"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `getCurrentDateTimeLong()` -- This method returns the current time in `long` format, in _[DDMMYYYYHHMM]_"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `readTimeFromLong` -- This method"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `readDateFromLong()` -- This method"
      }
    ],
    "authorContributionMap": {
      "tttaus": 113,
      "cjunxiang": 38,
      "-": 871,
      "shuanang": 17,
      "arjo129": 111
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d Dive Log - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-W13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "By: `Team CS2113-AY1819S1-W13-2` Â Â Â Â  Since: `Aug 2018` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Divelog is a dive log for tracking dives."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Divelog provides a simple way for underwater divers to input details of their dives such as the time they spent at a particular depth, and the application will keep track of their nitrogen levels."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "This allows divers to plan their next trip safely. +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "We use the PADI dive tables to calculate pressure groups for individual dives, whether the dive is the first dive"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "or a repeat dive of the day."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Pressure groups are a letter between A to Z which mark the nitrogen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "concentration within a diver (\"A\" corresponds to a scenario where the diver is almost free of nitrogen)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "As of v1.3, the pressure group is automatically calculated within a dive, all one needs to enter is their"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "current pressure group and their ending pressure group is automatically updated."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "We are still working on the sortby"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "`\u003c\u003csortby\u003e\u003e` feature coming in the upcoming release v1.4. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "For more information on pressure groups (whether you are a recreational diver or looking to become one), you can find out more over at `\u003c\u003cpressure_groups\u003e\u003e` and  `\u003c\u003cFAQ\u003e\u003e`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": ".  Download the latest `divelog.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Dive Log."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".  Double-click the file to start the app. The GUI (as seen in Diagram 1 below) should appear in a few seconds."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 1: Screenshot of GUI"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".  Type the command in the command box (as seen in Diagram 2 below) and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tttaus"
        },
        "content": "View Screenshot for location of command box"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_Ui_command.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 2: Command Box location"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add l/LOCATION`, `LOCATION` is a parameter which can be used as `add l/Sentosa`."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Items in square brackets are optional e.g `l/LOCATION [tz/TIMEZONE]` can be used as `l/Bali tz/+8` or as `l/Bali`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `pg/A d/10`, `d/10 pg/A` is also acceptable."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* A vertical bar `a|b` means either `a` or `b` will work as inputs."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Use this command to help window to see the user guide. Upon entering the command, a separate window with the user guide will open."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tttaus"
        },
        "content": "View the flow for the help guide"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_help1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 3: Enter the help command in the command box"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_help2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 4: The help guide will open up"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tttaus"
        },
        "content": "TIP: You can close the guide by closing it. This can be done by clicking on the X on the top right corner."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tttaus"
        },
        "content": "View the screenshot for hwo to close the help guide."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_help3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 5: Click the X to close"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Adding a dive session: `add`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Use this command to adds your new dive session to the Dive Log."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Format: `add ds/DATE_STARTED ts/TIME_DIVE_STARTED de/DATE_ENDED te/TIME_DIVE_ENDED ss/SAFETY_STOP  d/DEPTH  l/LOCATION pg/INITIAL_PRESSURE_GROUP`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuanang"
        },
        "content": "TIP: Words in UPPER_CASE are the parameters, items in SQUARE_BRACKETS are optional. Order of parameters are fixed as per the format above, meaning if you entered the ts/TIME_DIVE_STARTED before the ds/DATE_STARTED,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "the program will not be able to add your dive."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Put a `ts/` before the time started(24 hours format - HHMM), te/time ended (24 hours format - HHMM), d/depth (in metres), l/ location (location name), per dive at v1.0) (optional) and pg/initial pressure group."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "_Example:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuanang"
        },
        "content": "add ds/04082018 ts/0900 de/04082018  te/1020 ss/1015 d/15 l/Bukit Lagoon pg/C tz/+8_"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ".Table of Prefix and Data"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Data                                           |Prefix         |Example"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Date started / Ended (DDMMYYYY)                |ds or de       |ds/04082018 or de/05082018"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Time Started / Ended (HHMM)                    |ts or te       |ts/0800 or te/0900"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Location                                       |l              |l/Sentosa"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Depth (integer value)                          |d              |d/18"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuanang"
        },
        "content": "|Initial Pressure Group (Character Value) |pg             |pg/A"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Timezone (in UTC)                              |tz             |tz/+12 or tz/-5"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Listing all dives : `list`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "To display all the dives that you have previously recorded, `list` shows a list of all dives in the dive log. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "To change the manner in which your dives are ordered, view `\u003c\u003csortby\u003e\u003e`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tttaus"
        },
        "content": "View Screenshot for list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_list.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 6: List command"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Editing a dive : `edit`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "If you made a mistake while adding a new dive, `edit` will come in handy."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "`edits` edits an existing dive session in the Dive Log. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "The only parameters you have to input are the data of that specific dive session at `INDEX`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Format: `edit INDEX [ts/TIME_START] [te/TIME_END] [ss/SAFETY_STOP_TIME] [d/DEPTH] [pg/PG_AT_START] [l/LOCATION]...`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Edits the dive at the specified `INDEX`. The index refers to the index number shown in the displayed dive list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjo129"
        },
        "content": "`edit 1 pge/F l/Tioman`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjo129"
        },
        "content": ".Table of Prefix and Data"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjo129"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Data                                           |Prefix         |Example"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Date started / Ended (DDMMYYYY)                |ds or de       |ds/04082018 or de/05082018"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Time Started / Ended (HHMM)                    |ts or te       |ts/0800 or te/0900"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Location                                       |l              |l/Sentosa"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Depth (integer value)                          |d              |d/18"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Initial Pressure Group (Character Value) |pg             |pg/A"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|Timezone (in UTC)                              |tz             |tz/+12 or tz/-5"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arjo129"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Setting display units `set_units`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Switches between meters and feet. (App defaults to meters) +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Format: `set_units meters|feet` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjo129"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* As of v1.3 it only updates the DISPLAY units, not the actual entered units."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* The settings are not saved upon application restart."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjo129"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Example usage: `set feet`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Locating dives by location: `find`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Finds dives whose location contain any of the given keywords. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* The search is case insensitive. e.g `tioman` will match `Tioman`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Only the location is searched."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* `find Bali` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Returns `Dive at Bali`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tttaus"
        },
        "content": "View Screenshot for example of a successful find"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_find.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 7: Find command"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Deleting a dive : `delete`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Deletes the specified dive from the Dive Log. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Deletes the dive at the specified `INDEX`."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* The index refers to the index number shown in the displayed dive list."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Deletes the 2nd dive in the Dive Log."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* `find Bali` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Deletes the 1st dive in the results of the `find` command."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003d\u003d\u003d Selecting a diveSession : `select`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//is this needed LOLOl"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Selects the dive identified by the index number used in the displayed dive list. +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tttaus"
        },
        "content": "//to update the rationale for the color code."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* Selects the dive and loads the details of the dive at the specified `INDEX`."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* The current pressure group of the start of the dive and end of the dive will be displayed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* The pressure group is colour-coded based on its severity for easier reference. (Green being ok, orange in danger zone and red means critical)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* The index refers to the index number shown in the displayed diveSession list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Selects the 2nd dive in the Dive Log."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arjo129"
        },
        "content": "* `find Bali` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Selects the 1st dive in the results of the `find` command."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tttaus"
        },
        "content": "View Screenshot for a successful select"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_select.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 8: Select command"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Forgot what command you did just now and corrupted your data? Find our what command exactly did you execute"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " before you correct your data! +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003cdetails\u003e\u003csummary\u003e +++"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "tttaus"
        },
        "content": "View Screenshot for a successful history command"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/summary\u003e\u003cdiv\u003e +++"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "tttaus"
        },
        "content": "image::UGSS_history.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "tttaus"
        },
        "content": "Diagram 9: History command"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "tttaus"
        },
        "content": "+++ \u003c/div\u003e\u003c/details\u003e +++"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` [[undo]]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Restores the Dive Log to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Undoable commands: those commands that modify the Dive Log\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "This command, as the name suggests, clears Dive Log of *all* your previous dive logs and"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "gives you a clean start to use Dive Log again! +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "TIP: use `undo` to, _you\u0027ve guessed it_, undo your mistaken `clear`  and restore all your deleted dive sessions."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     \u003c\u003cundo\u003e\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "shuanang"
        },
        "content": "\u003d\u003d\u003d Setting parameters to sort dives : `sortby` [[sortby]] [coming in V1.4]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "shuanang"
        },
        "content": "In V1.3, all dives are sorted automatically according to time and date by default."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Want to view your dives in ranked order by different options? Simply type `sortby` followed by a `KEYWORD`,"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " your following `list`, `find` commands will return you all your dive sessions in that particular order. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Format: `sortby KEYWORD`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "WARNING: You can only use the specific keywords below."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ".Table of parameters available to sort by"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Parameter Type                                 |Keyword"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Time                                           |time"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Location (lexicographical)                     |location"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Duration of Dive                               |duration"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d Planning Mode : `newplan` or `normalmode`"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "The planning mode is a temporary space for you to plan trips and to simulate dives. This is especially important if you"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " are planning on a multiple day diving trip! +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " When you enter the planning mode, simply enter simulation dives as per how you would use the other commands normally."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "shuanang"
        },
        "content": "When you exit, all your simulation files will be deleted automatically. In the Current V1.3,"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "planning mode only supports `add`, `delete` and `edit` commands +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "shuanang"
        },
        "content": "[Coming in V1.4] To convert your simulation files to the actual mode, type `convert`"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Format: `newplan` to enter Planning Mode, `normalmode` to exit planning mode."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "TIP: When you exit the planning mode, you will return to the state before you entered."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Finished using Dive Log? This command shuts down Dive Log, and saves your new dive session data for your next use. +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Worry not! Dive Log  saves all your data in the hard disk *automatically* after any command that changes the data. +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "There is absolutely no need to save manually."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "shuanang"
        },
        "content": "\u003d\u003d About Pressure Groups in recreational diving [[pressure_groups]]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "shuanang"
        },
        "content": "image::PADI_TableOneAndTwo.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "shuanang"
        },
        "content": "[[Diagram_10]]Diagram 10: PADI Recreational Dive Planner, Table 1 (No Decompression Limits and Group Designation Table)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "shuanang"
        },
        "content": "and Table 2 (Surface Interval Credit Table) +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "shuanang"
        },
        "content": "image::PADI_TableThree.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "shuanang"
        },
        "content": "[[Diagram_11]]Diagram 11: PADI Recreational Dive Planner, Table 3 (Repetitive Dive Timetable)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "shuanang"
        },
        "content": "The three PADI tables as shown in the above two diagrams (\u003c\u003cDiagram_10\u003e\u003e and \u003c\u003cDiagram_11\u003e\u003e) are normally physically carried along by recreational divers for them to calculate their pressure group manually."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Workflow of a recreational diver who wants to check out his/her pressure group:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "shuanang"
        },
        "content": ".  For the diver\u0027s first dive of the day, the diver dives to a depth of 19 metres for 29 minutes. Referring to \u003c\u003cDiagram_10\u003e\u003e, Table 1 (No Decompression Limits and Group Designation Table),"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "shuanang"
        },
        "content": "the diver would find the depth (19) at the top row. There is no 19 metres in the table, so the closest rounded-up value is 20 metres. He would then go down that 20m column until he finds 29 minutes,"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "shuanang"
        },
        "content": "or the closest rounded up value which is 30 minutes. The diver will then draw his finger along the row to the left to match a character, which is \"M\". His new pressure group is now \"M\"."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "shuanang"
        },
        "content": ".  For the diver\u0027s second and subsequent dives of the day, he would have to refer to table 3 in \u003c\u003cDiagram_11\u003e\u003e (Repetitive Dive Timetable). The diver wants to dive to 10 metres for 15 minutes for his second dive."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "shuanang"
        },
        "content": "The diver has already surfaced for three hours, which is the minimum time for any pressure group to reach the minimum \"A\" pressure group, as per Table 2 in \u003c\u003cDiagram_10\u003e\u003e (Surface Interval Credit Table)."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Finding his current pressure group \"A\" on the top row of Table 3, he would match the depth he wants to dive to (10m), and get the values 10 at the top and 209 at the bottom."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "shuanang"
        },
        "content": "10 minutes refer the Residual Nitrogen Time (RNT) and 209 minutes refer to the adjusted no decompression limits. The diver has to add the RNT value (10) to his intended/actual diving time (15 minutes), giving a total of 25 minutes"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "shuanang"
        },
        "content": "Total Bottom Time (TBT). Going back to Table 1 in \u003c\u003cDiagram_10\u003e\u003e, for a depth of 10 metres and 25 minutes TBT, his new pressure group would be \"C\"."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "shuanang"
        },
        "content": "\u003d\u003d FAQ [[FAQ]]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Dive Log folder."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "shuanang"
        },
        "content": "*Q*: What is the purpose of having a recreational dive planner in the first place? Can\u0027t I just dive to whatever depth for as long as I want? +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "shuanang"
        },
        "content": "*A*: The purpose of the Recreational Dive Planner is to make all dives no decompression dives. Proper planning assures that all dives, single or repetitive, are within the no decompression limits by controlling the length of the dive, the depth of the dive, and the sur- face interval between dives."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "shuanang"
        },
        "content": "The Recreational Dive Planner Table is actually three tables linked together. Each of the three tables provides information for planning dives within accepted nitrogen levels."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "shuanang"
        },
        "content": "*Q*: Where can I find out more about PADI dive tables? +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "shuanang"
        },
        "content": "*A*: The 36-page long Instructions for Use official document can be found https://elearning.padi.com/company0/tools/RDP%20InsforUseMet.pdf"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tttaus": 70,
      "cjunxiang": 75,
      "-": 170,
      "shuanang": 48,
      "arjo129": 56
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean allTests`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[[Running-Tests]]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* **`allTests`** +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* **`guiTests`** +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Runs all tests in the `seedu.divelog.ui` and `systemtests` package"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* **`nonGuiTests`** +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "Runs all non-GUI tests in the `seedu.divelog`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "package"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* **`headless`** +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in headless mode due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew headless allTests` -- Runs all tests in headless mode"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "tests"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "arjo129": 2
    }
  },
  {
    "path": "docs/team/Arjo.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d Arjo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: DiveLor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tttaus"
        },
        "content": "DiveLor is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tttaus": 68
    }
  },
  {
    "path": "docs/team/Junxiang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d Jun Xiang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: DiveLor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tttaus"
        },
        "content": "DiveLor is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tttaus": 67
    }
  },
  {
    "path": "docs/team/Terrence.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d Terrence Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: DiveLor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tttaus"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tttaus": 68
    }
  },
  {
    "path": "docs/team/YiShuan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d Yi Shuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tttaus"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: DiveLor"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tttaus"
        },
        "content": "DiveLor is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tttaus"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tttaus"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tttaus"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tttaus"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tttaus"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tttaus"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "tttaus": 67
    }
  },
  {
    "path": "src/main/java/seedu/divelog/AppParameters.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.DiveLogStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.XmlDiveLogStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DiveLog ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveLogStorage diveLogStorage \u003d new XmlDiveLogStorage(userPrefs.getDiveLogBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        storage \u003d new StorageManager(diveLogStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s divelog book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * The data from the sample divelog book will be used instead if {@code storage}\u0027s divelog book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * or an empty divelog book will be used instead if errors occur when reading {@code storage}\u0027s divelog book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        Optional\u003cReadOnlyDiveLog\u003e diveLogBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ReadOnlyDiveLog initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            diveLogBookOptional \u003d storage.readDiveLog();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            if (!diveLogBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample DiveLog\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            initialData \u003d diveLogBookOptional.orElseGet(SampleDataUtil::getSampleDiveLog);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty DiveLog\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            initialData \u003d new DiveLog();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DiveLog\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            initialData \u003d new DiveLog();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty DiveLog\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        logger.info(\"Starting DiveLog \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping DiveLog ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 164,
      "shuanang": 7,
      "arjo129": 37
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/ApplicationState.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.enums.Units;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.UnitsChangedEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Stores the application state. Can be useful for implementing modes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Currently only stores units."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class ApplicationState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static ApplicationState applicationState \u003d new ApplicationState();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Units commonUnits;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private ApplicationState() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.commonUnits \u003d Units.METERS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static ApplicationState getInstance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return applicationState;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the units of the application"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param unit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void setUnits(Units unit) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (unit !\u003d this.commonUnits) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            EventsCenter ev \u003d EventsCenter.getInstance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            ev.post(new UnitsChangedEvent(unit));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            commonUnits \u003d unit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Gets the units of the application"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Units getUnit() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this.commonUnits;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 42
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/ComponentManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Base class for *Manager classes"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Registers the class\u0027 event handlers in eventsCenter"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class ComponentManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    protected EventsCenter eventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    protected ApplicationState applicationState;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Uses default {@link EventsCenter}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ComponentManager() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this(EventsCenter.getInstance(), ApplicationState.getInstance());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public ComponentManager(EventsCenter eventsCenter, ApplicationState applicationState) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.eventsCenter \u003d eventsCenter;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.applicationState \u003d applicationState;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.registerHandler(this);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        eventsCenter.post(event);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "arjo129": 6
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private String appTitle \u003d \"DiveLog\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 1,
      "-": 72,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/EventsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.EventBus;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the event dispatching of the app."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCenter {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(EventsCenter.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static EventsCenter instance;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EventBus eventBus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private EventsCenter() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus \u003d new EventBus();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static EventsCenter getInstance() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            instance \u003d new EventsCenter();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void clearSubscribers() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        instance \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void registerHandler(Object handler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.register(handler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts an event to the event bus."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public \u003cE extends BaseEvent\u003e EventsCenter post(E event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"------[Event Posted] \" + event.getClass().getCanonicalName() + \": \" + event.toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        eventBus.post(event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 72,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String LOG_FILE \u003d \"divelog.log\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decorates the given string to create a log message suitable for logging event handling methods."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"---[Event handled][\" + e + \"]\" + message;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getEventHandlingLogMessage(BaseEvent, String)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEventHandlingLogMessage(BaseEvent e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return getEventHandlingLogMessage(e, \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 125,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_INVALID_DIVE_DISPLAYED_INDEX \u003d \"The index provided is invalid!\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"It should be based on the numbers you see in the side panel.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_DIVE_LISTED_OVERVIEW \u003d \"%1$d dives listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_FORMAT \u003d \"Invalid time format! (Not 24Hr format) \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format! (Not DDMMYYYY) \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMEZONE_FORMAT \u003d \"Invalid timezone format! (UTC format)\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_INTERNAL_ERROR \u003d \"An internal error occured\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 9,
      "arjo129": 5
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/Version.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/enums/Units.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.enums;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Represents possible units"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public enum Units {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    FEET, METERS"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 8
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/BaseEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * The base class for all event classes."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class BaseEvent {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * All Events should have a clear unambiguous custom toString message so that feedback message creation"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * stays consistent and reusable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * For example, the event manager post method will call any posted event\u0027s toString and print it in the console."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract String toString();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/UnitsChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.enums.Units;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Fires when the units are changed"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class UnitsChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Units unit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public UnitsChangedEvent(Units unit) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return \"UnitsChangedEvent fired. Units set to: \" + unit;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 19
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/model/DiveLogChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/** Indicates the DiveLog in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveLogChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public final ReadOnlyDiveLog data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLogChangedEvent(ReadOnlyDiveLog data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return \"number of dives \" + data.getDiveList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "arjo129": 8
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/storage/DataSavingExceptionEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates an exception during a file saving"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataSavingExceptionEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Exception exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataSavingExceptionEvent(Exception exception) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exception \u003d exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return exception.toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/ui/DivePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Represents a selection change in the Dive Session List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DivePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveSession newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DivePanelSelectionChangedEvent(DiveSession newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSession getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "shuanang": 1,
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/ui/ExitAppRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request for App termination"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitAppRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Indicates a request to jump to the list of dive sessions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "shuanang": 1,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public NewResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/events/ui/ShowHelpRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ShowHelpRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/exceptions/DataConversionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/exceptions/IllegalValueException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/AppUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/CollectionUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/CompareUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//@@author Cjunx"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * A class with methods to compare Date and Time, with respect to Timezone"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class CompareUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Tells time difference between 2 timings in MINUTES (long)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static long checkTimeDifference(String startTime, String endTime, String startDate, String endDate)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"ddMMyyyyHHmm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String startTimeDate \u003d startDate.concat(startTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String endTimeDate \u003d endDate.concat(endTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date date1 \u003d format.parse(startTimeDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date date2 \u003d format.parse(endTimeDate);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long diff \u003d Math.abs((date1.getTime() - date2.getTime())) / 60000;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return (diff);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Converts date and time into LOCAL time"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * returns first 8 digits of Date in DDMMYYYY, next 4 digits in HHMM"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static Long convertTimeToLocal(String time, String date, int timezone) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String timeNowString \u003d date.concat(time);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        SimpleDateFormat inputFormat \u003d new SimpleDateFormat(\"ddMMyyyyHHmm\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date oldTime \u003d inputFormat.parse(timeNowString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date newTime \u003d new Date(oldTime.getTime() + TimeUnit.HOURS.toMillis(timezone));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String newDateTime \u003d new SimpleDateFormat(\"ddMMyyyyHHmm\").format(newTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long newDateTimeLong \u003d Long.parseLong(newDateTime);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return newDateTimeLong;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * gets current date and time in Date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static Date getCurrentDateTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        //        String newDateTime \u003d new SimpleDateFormat(\"ddMMyyyyHHmm\").format(date);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        //        long newDateTimeLong \u003d Long.parseLong(newDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * gets current date and time in long"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static long getCurrentDateTimeLong() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date currentDateTime \u003d getCurrentDateTime();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String currentDateTimeString \u003d new SimpleDateFormat(\"ddMMyyyyHHmm\").format(currentDateTime);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long currentDateTimeLong \u003d Long.parseLong(currentDateTimeString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return currentDateTimeLong;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Converts DDMMYYYYHHMM into DDMMYYYY"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static String readTimeFromLong(long date) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long time;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        time \u003d date % 10000;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String timeString \u003d Long.toString(time);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (time \u003c 1000) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            timeString \u003d \"0\" + timeString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return timeString;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Converts DDMMYYYYHHMM into HHMM"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static String readDateFromLong(long longdate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        date \u003d longdate / 10000;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String dateString \u003d Long.toString(date);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (date \u003c 10000000) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            dateString \u003d \"0\" + dateString;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateString;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 92
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/ConfigUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/DiveTableUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import com.fasterxml.jackson.datatype.jsonorg.JsonOrgModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Loads dive tables from JSON files"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveTableUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .findAndRegisterModules()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .registerModule(new JsonOrgModule());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final String filename;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveTableUtil(String filename) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    //@@author shuanang"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Retrieves a JSONObject file from resources"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return JSONObject containing the dive tables"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @throws IOException if file format is wrong."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public JSONObject readJsonFileFromResources() throws IOException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        InputStream file \u003d getClass().getResourceAsStream(filename);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        JSONObject jsonObject \u003d objectMapper.readValue(new InputStreamReader(file), JSONObject.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return jsonObject;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 14,
      "arjo129": 23
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/JsonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "arjo129": 5
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        AppUtil.checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        AppUtil.checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 64,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/UnitsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Performs basic unit conversion"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class UnitsUtil {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private static float conversionRatioFeetToMeters \u003d 0.3048f;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Converts feet to meters"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param feet - depth in feet."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return value in meters"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static float feetToMeters(float feet) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return conversionRatioFeetToMeters * feet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Converts meters to feet"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param meters - depth in meters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return value in meters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static float metersToFeet(float meters) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return meters / conversionRatioFeetToMeters;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 3,
      "arjo129": 23
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/XmlUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBContext;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Marshaller;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.Unmarshaller;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Helps with reading from and writing to XML files."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the xml data in the file as an object of the specified type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file           Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classToConvert The class corresponding to the xml data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *                       Cannot be null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if the file is empty or does not have the correct format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T getDataFromFile(Path file, Class\u003cT\u003e classToConvert)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(classToConvert);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!FileUtil.isFileExists(file)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(classToConvert);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Unmarshaller um \u003d context.createUnmarshaller();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((T) um.unmarshal(file.toFile()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the data in the file in xml format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param file Points to a valid xml file containing data that match the {@code classToConvert}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *             Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws FileNotFoundException Thrown if the file is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws JAXBException         Thrown if there is an error during converting the data"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               into xml and writing to the file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveDataToFile(Path file, T data) throws FileNotFoundException, JAXBException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(data);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(file)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FileNotFoundException(\"File not found : \" + file.toAbsolutePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        JAXBContext context \u003d JAXBContext.newInstance(data.getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Marshaller m \u003d context.createMarshaller();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        m.marshal(data, file.toFile());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/CommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores the history of commands executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private LinkedList\u003cString\u003e userInputHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandHistory(CommandHistory commandHistory) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory \u003d new LinkedList\u003c\u003e(commandHistory.userInputHistory);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String userInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userInput);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        userInputHistory.add(userInput);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of {@code userInputHistory}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new LinkedList\u003c\u003e(userInputHistory);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof CommandHistory)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory other \u003d (CommandHistory) obj;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.equals(other.userInputHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userInputHistory.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/ListElementPointer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Has a cursor that points to an element in the list, and is able to iterate through the list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * This is different from {@code ListIterator}, which has a cursor that points in between elements."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code previous()}, the same element is returned on both calls."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointer {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * The cursor points to the last element in {@code list}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer(List\u003cString\u003e list) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.list \u003d new ArrayList\u003c\u003e(list);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d this.list.size() - 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code element} to the end of the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(String element) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(element);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasNext() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        int nextIndex \u003d index + 1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(nextIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPrevious() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        int previousIndex \u003d index - 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(previousIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasCurrent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return isWithinBounds(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isWithinBounds(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the next element in the list and advances the cursor position."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more next element in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String next() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasNext()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(++index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the previous element in the list and moves the cursor position backwards."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if there is no more previous element in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public String previous() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasPrevious()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(--index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current element in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NoSuchElementException if the list is empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public String current() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!hasCurrent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoSuchElementException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof ListElementPointer)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer iterator \u003d (ListElementPointer) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of dives */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    ObservableList\u003cDiveSession\u003e getFilteredDiveList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "shuanang": 1,
      "arjo129": 6
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.DiveLogParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveLogParser diveLogParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLogParser \u003d new DiveLogParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Command command \u003d diveLogParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public ObservableList\u003cDiveSession\u003e getFilteredDiveList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return model.getFilteredDiveList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "arjo129": 15
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.commons.util.CompareUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.logic.pressuregroup.PressureGroupLogic;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Adds a dive to the divelog book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Dive is too deep and too long!!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a dive to the divelog book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_START + \"DATE_START (DDMMYYYY Format) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_TIME_START + \"START_TIME (24Hr Format) \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_END + \"DATE_END (DDMMYYYY Format) \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_TIME_END + \"END_TIME (24Hr Format) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_SAFETY_STOP + \"SAFETY_STOP_TIME (24Hr Format) \\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_DEPTH + \"DEPTH \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_START + \"PRESSURE_GROUP_START \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"LOCATION\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_TIMEZONE + \"TIMEZONE\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_START + \"04082018 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_TIME_START + \"0700 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_END + \"04082018 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            + CliSyntax.PREFIX_TIME_END + \"0800 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            + CliSyntax.PREFIX_SAFETY_STOP + \"0745 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            + CliSyntax.PREFIX_DEPTH + \"16 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_START + \"A \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"Sentosa \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_TIMEZONE + \"+8\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New dive session added!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private DiveSession toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Creates an AddCommand to add the specified {@code DiveSession}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public AddCommand(DiveSession dive) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        requireNonNull(dive);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        toAdd \u003d dive;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    //@@author shuanang"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     *Checks if the dive to be added is a first dive or a repeat dive to calculate the correct pressure group,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * then adds accordingly"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        List\u003cDiveSession\u003e lastShownList \u003d model.getFilteredDiveList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        //match the dive session"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        for (DiveSession diveSessions : lastShownList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            if (toAdd.getDateStart().getOurDateString().equals(diveSessions.getDateStart().getOurDateString()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    .intern())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                count \u003d count + 1;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (count \u003e\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            //NOT the first dive of the day"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            model.addDiveSession(toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            model.commitDiveLog();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        } else if (count \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            //first dive of day"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                long actualBottomTime \u003d CompareUtil.checkTimeDifference(toAdd.getStart().getTimeString(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                        toAdd.getEnd().getTimeString(), toAdd.getDateStart().getOurDateString(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                        toAdd.getDateEnd().getOurDateString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                toAdd \u003d new DiveSession(toAdd.getDateStart(), toAdd.getStart(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                        toAdd.getSafetyStop(), toAdd.getDateEnd(), toAdd.getEnd(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                        toAdd.getPressureGroupAtBeginning(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                        PressureGroupLogic.computePressureGroupFirstDive(toAdd.getDepthProfile(), actualBottomTime),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                        toAdd.getLocation(), toAdd.getDepthProfile(), toAdd.getTimeZone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        model.addDiveSession(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        model.commitDiveLog();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 6,
      "-": 24,
      "shuanang": 55,
      "arjo129": 22
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Clears the divelog book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Dive log has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.resetData(new DiveLog());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.commitDiveLog();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 17,
      "arjo129": 8
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "arjo129": 4
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/CommandResult.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Deletes a dive session identified using it\u0027s displayed index from the divelog book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            + \": Deletes the dive session identified by the index number used in the displayed dive list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static final String MESSAGE_DELETE_DIVE_SESSION_SUCCESS \u003d \"Deleted dive session: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        List\u003cDiveSession\u003e lastShownList \u003d model.getFilteredDiveList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession diveToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            model.deleteDiveSession(diveToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.commitDiveLog();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DIVE_SESSION_SUCCESS, diveToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 39,
      "shuanang": 4,
      "arjo129": 16
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Edits the details of an existing dive session in the divelog book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the dive identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"by the index number used in the displayed dive list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE_START + \"DATE_START] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TIME_START + \"TIME_START] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE_END + \"DATE_END] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TIME_END + \"TIME_END] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_SAFETY_STOP + \"SAFETY_STOP_TIME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DEPTH + \"DEPTH] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PRESSURE_GROUP_START + \"PG_AT_START] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            //+ \"[\" + CliSyntax.PREFIX_PRESSURE_GROUP_END + \"PG_AT_END] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_LOCATION + \"LOCATION]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_END + \"F \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"Tioman \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_TIMEZONE + \"+7 \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_EDIT_DIVE_SUCCESS \u003d \"Edited Dive: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private final EditDiveDescriptor editDiveDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param index of the dive session in the filtered dive list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param editDiveDescriptor details to edit the dive session with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public EditCommand(Index index, EditDiveDescriptor editDiveDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        requireNonNull(editDiveDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        this.editDiveDescriptor \u003d new EditDiveDescriptor(editDiveDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        List\u003cDiveSession\u003e lastShownList \u003d model.getFilteredDiveList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession diveToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        DiveSession editedDive \u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        editedDive \u003d createEditedDive(diveToEdit, editDiveDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            model.updateDiveSession(diveToEdit, editedDive);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        model.updateFilteredDiveList(Model.PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.commitDiveLog();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DIVE_SUCCESS, editedDive));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Creates and returns a {@code DiveSession} with the details of {@code diveSessionToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * edited with {@code editDiveDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private static DiveSession createEditedDive(DiveSession diveToEdit, EditDiveDescriptor editDiveSessionDescriptor) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assert diveToEdit !\u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        OurDate dateStart \u003d editDiveSessionDescriptor.getDateStart().orElse(diveToEdit.getDateStart());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        Time start \u003d editDiveSessionDescriptor.getStart().orElse(diveToEdit.getStart());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        OurDate dateEnd \u003d editDiveSessionDescriptor.getDateEnd().orElse(diveToEdit.getDateEnd());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        Time end \u003d editDiveSessionDescriptor.getEnd().orElse(diveToEdit.getEnd());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        Time safetyStop \u003d editDiveSessionDescriptor.getSafetyStop().orElse(diveToEdit.getSafetyStop());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pressureGroupAtBeginning \u003d editDiveSessionDescriptor.getPressureGroupAtBeginning()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .orElse(diveToEdit.getPressureGroupAtBeginning());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pressureGroupAtEnd \u003d editDiveSessionDescriptor.getPressureGroupAtEnd()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .orElse(diveToEdit.getPressureGroupAtEnd());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        Location location \u003d editDiveSessionDescriptor.getLocation().orElse(diveToEdit.getLocation());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DepthProfile depth \u003d editDiveSessionDescriptor.getDepthProfile().orElse(diveToEdit.getDepthProfile());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        TimeZone timezone \u003d editDiveSessionDescriptor.getTimeZone().orElse(diveToEdit.getTimeZone());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return new DiveSession(dateStart, start, safetyStop, dateEnd, end, pressureGroupAtBeginning, pressureGroupAtEnd,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                location, depth, timezone);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                \u0026\u0026 editDiveDescriptor.equals(e.editDiveDescriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Stores the details to edit the dive session with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * corresponding field value of the dive session."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static class EditDiveDescriptor {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        private OurDate dateStart;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private Time start;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private Time safetyStop;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        private OurDate dateEnd;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private Time end;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private PressureGroup pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private PressureGroup pressureGroupAtEnd;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private DepthProfile depthProfile;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        private TimeZone timezone;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public EditDiveDescriptor() {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public EditDiveDescriptor(EditDiveDescriptor descriptor) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            setDateStart(descriptor.dateStart);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            setStart(descriptor.start);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            setSafetyStop(descriptor.safetyStop);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            setDateEnd(descriptor.dateEnd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            setEnd(descriptor.end);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            setPressureGroupAtBeginning(descriptor.pressureGroupAtBeginning);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            setPressureGroupAtEnd(descriptor.pressureGroupAtEnd);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            setLocation(descriptor.location);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            setDepthProfile(descriptor.depthProfile);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            setTimeZone(descriptor.timezone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(dateStart, start, safetyStop, dateEnd, end,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    pressureGroupAtBeginning, pressureGroupAtEnd, location, depthProfile, timezone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            if (!(other instanceof EditDiveDescriptor)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            EditDiveDescriptor e \u003d (EditDiveDescriptor) other;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return getDateStart().equals(e.getDateStart())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getStart().equals(e.getStart())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getDateEnd().equals(e.getDateEnd())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getEnd().equals(e.getEnd())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getPressureGroupAtBeginning().equals(e.getPressureGroupAtBeginning())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getPressureGroupAtEnd().equals(e.getPressureGroupAtEnd())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getDepthProfile().equals(e.getDepthProfile())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    \u0026\u0026 getTimeZone().equals(e.getTimeZone());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void setDateStart(OurDate dateStart) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void setDateEnd(OurDate dateEnd) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void setStart(Time start) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.start \u003d start;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void setSafetyStop(Time safetyStop) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.safetyStop \u003d safetyStop;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void setEnd(Time end) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.end \u003d end;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void setPressureGroupAtBeginning(PressureGroup pressureGroupAtBeginning) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.pressureGroupAtBeginning \u003d pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void setPressureGroupAtEnd(PressureGroup pressureGroupAtEnd) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.pressureGroupAtEnd \u003d pressureGroupAtEnd;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void setDepthProfile(DepthProfile depthProfile) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.depthProfile \u003d depthProfile;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void setTimeZone(TimeZone timezone) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public Optional\u003cOurDate\u003e getDateStart() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return Optional.ofNullable(dateStart);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public Optional\u003cOurDate\u003e getDateEnd() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return Optional.ofNullable(dateEnd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public Optional\u003cTime\u003e getStart() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Optional.ofNullable(start);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public Optional\u003cTime\u003e getSafetyStop() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Optional.ofNullable(safetyStop);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public Optional\u003cTime\u003e getEnd() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Optional.ofNullable(end);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public Optional\u003cPressureGroup\u003e getPressureGroupAtBeginning() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Optional.ofNullable(pressureGroupAtBeginning);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public Optional\u003cPressureGroup\u003e getPressureGroupAtEnd() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Optional.ofNullable(pressureGroupAtEnd);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public Optional\u003cDepthProfile\u003e getDepthProfile() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Optional.ofNullable(depthProfile);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public Optional\u003cTimeZone\u003e getTimeZone() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return Optional.ofNullable(timezone);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 42,
      "-": 96,
      "shuanang": 26,
      "arjo129": 116
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 18,
      "arjo129": 5
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.LocationContainsKeywordPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Finds and lists all dive sessions in divelog book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds a dive based on location\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final LocationContainsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public FindCommand(LocationContainsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.updateFilteredDiveList(predicate);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                String.format(Messages.MESSAGE_DIVE_LISTED_OVERVIEW, model.getFilteredDiveList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 29,
      "shuanang": 1,
      "arjo129": 10
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 20,
      "arjo129": 5
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 4,
      "-": 29,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Lists all dives in the divelog book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all dives\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        model.updateFilteredDiveList(Model.PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 18,
      "shuanang": 3,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/PlanningCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//author @Cjunx"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * Enters or exit the Planning Mode"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class PlanningCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String COMMAND_WORD_PLAN \u003d \"newplan\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String COMMAND_WORD_NORMAL \u003d \"normalmode\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_ENTRY \u003d \"You\u0027re now in Planning Mode\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"You\u0027re now in Normal Mode\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            while (model.getPlannerCount() \u003e 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                model.undoDiveLog();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                model.plannerCountMinus();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.setPlanningMode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return new CommandResult(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        model.setPlanningMode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return new CommandResult(MESSAGE_ENTRY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 34
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Reverts the {@code model}\u0027s divelog book to its previously undone state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!model.canRedoDiveLog()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.redoDiveLog();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        model.updateFilteredDiveList(Model.PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 22,
      "shuanang": 1,
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Selects a dive session identified using it\u0027s displayed index from the divelog book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            + \": Selects the dive session identified by the index number used in the displayed dive list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static final String MESSAGE_SELECT_DIVE_SESSION_SUCCESS \u003d \"Selected Dive session: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        List\u003cDiveSession\u003e filteredDiveSessionList \u003d model.getFilteredDiveList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredDiveSessionList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_DIVE_SESSION_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 40,
      "shuanang": 6,
      "arjo129": 10
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/SetUnitsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.ApplicationState;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.enums.Units;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * The command for setting the desired units"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class SetUnitsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set_units\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" meters|feet : Sets the display units. \\n Example:\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            + \"\\t\" + COMMAND_WORD + \" feet: sets the display units to feet.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Units units;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public SetUnitsCommand(Units units) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.units \u003d units;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ApplicationState.getInstance().setUnits(units);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new CommandResult(\"Units updated successfully\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof SetUnitsCommand)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return ((SetUnitsCommand) obj).units \u003d\u003d units;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 34
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Reverts the {@code model}\u0027s divelog book to its previous state."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!model.canUndoDiveLog()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (model.getPlanningMode()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            model.plannerCountPlus();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.undoDiveLog();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        model.updateFilteredDiveList(Model.PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 21,
      "shuanang": 1,
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/exceptions/CommandException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.CompareUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.pressuregroup.PressureGroupLogic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.pressuregroup.exceptions.LimitExceededException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tttaus"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tttaus"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_LOCATION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_TIMEZONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                CliSyntax.PREFIX_LOCATION)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        ParserUtil.checkTimeformat(argMultimap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        ParserUtil.checkDateformat(argMultimap);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //ParserUtil.checkTimeZoneformat(argMultimap);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        OurDate dateStart \u003d new OurDate(argMultimap.getValue(CliSyntax.PREFIX_DATE_START).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Time startTime \u003d new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        OurDate dateEnd \u003d new OurDate(argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Time endTime \u003d new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Time safetyStop \u003d new Time(argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        PressureGroup pressureGroupAtBegining \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new PressureGroup(argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_START).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Location location \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new Location(argMultimap.getValue(CliSyntax.PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DepthProfile depthProfile \u003d ParserUtil.parseDepth(argMultimap.getValue(CliSyntax.PREFIX_DEPTH).get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        TimeZone timezone \u003d new TimeZone(argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            long duration \u003d CompareUtil.checkTimeDifference(startTime.getTimeString(), endTime.getTimeString(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    dateStart.getOurDateString(), dateEnd.getOurDateString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            PressureGroup pressureGroupAtEnd \u003d PressureGroupLogic.computePressureGroup(depthProfile,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    (float) duration, pressureGroupAtBegining);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            DiveSession dive \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    new DiveSession(dateStart, startTime, safetyStop, dateEnd, endTime, pressureGroupAtBegining,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                            pressureGroupAtEnd, location, depthProfile, timezone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new AddCommand(dive);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INTERNAL_ERROR);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (LimitExceededException l) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(AddCommand.MESSAGE_ERROR);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_INTERNAL_ERROR);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 2,
      "cjunxiang": 26,
      "-": 25,
      "arjo129": 47
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 59,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 147,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final Prefix PREFIX_DATE_START \u003d new Prefix(\"ds/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Prefix PREFIX_TIME_START \u003d new Prefix(\"ts/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final Prefix PREFIX_DATE_END \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Prefix PREFIX_TIME_END \u003d new Prefix(\"te/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Prefix PREFIX_SAFETY_STOP \u003d new Prefix(\"ss/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Prefix PREFIX_DEPTH \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Prefix PREFIX_PRESSURE_GROUP_START \u003d new Prefix(\"pg/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Prefix PREFIX_PRESSURE_GROUP_END \u003d new Prefix(\"pge/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final Prefix PREFIX_TIMEZONE \u003d new Prefix(\"tz/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 7,
      "arjo129": 8
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "arjo129": 6
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/DiveLogParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.logic.commands.PlanningCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SetUnitsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveLogParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        case PlanningCommand.COMMAND_WORD_PLAN:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return new PlanningCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        case PlanningCommand.COMMAND_WORD_NORMAL:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return new PlanningCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        case SetUnitsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new SetUnitsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 9,
      "-": 71,
      "arjo129": 23
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_LOCATION,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_TIMEZONE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand.EditDiveDescriptor editDiveSessionDescriptor \u003d new EditCommand.EditDiveDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DATE_START).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setDateStart(new OurDate(argMultimap.getValue(CliSyntax.PREFIX_DATE_START)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    .get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIME_START).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setStart(new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setSafetyStop(new Time(argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DATE_END).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setDateEnd(new OurDate(argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIME_END).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setEnd(new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DEPTH).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setDepthProfile("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    ParserUtil.parseDepth(argMultimap.getValue(CliSyntax.PREFIX_DEPTH).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_START).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setPressureGroupAtBeginning("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    ParserUtil.parsePressureGroup(argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_START).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setLocation("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    new Location(argMultimap.getValue(CliSyntax.PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editDiveSessionDescriptor.setTimeZone("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                   new TimeZone(argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!editDiveSessionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new EditCommand(index, editDiveSessionDescriptor);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "arjo129": 78
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.LocationContainsKeywordPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new FindCommand(new LocationContainsKeywordPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_INVALID_DEPTH \u003d \"Depth must be a number.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MESSAGE_INVALID_PRESSURE_GROUP \u003d \"Pressure group must be a single alphabet from A-Z\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses depth profile"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth - The depth in String Format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return a Depth Profile object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException if the depth is not a valid float."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static DepthProfile parseDepth(String depth) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new DepthProfile(Float.valueOf(depth));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DEPTH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //@@author Cjunx"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     *  Returns true if string given is DATE FORMATTED"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static void checkDateformat(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DATE_START).get().length() !\u003d 8"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                || argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get().length() !\u003d 8) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_DATE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_DATE_START).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_DATE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     *  Returns true if string given is TIMEZONE FORMATTED"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static void checkTimeZoneformat(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().length() !\u003d 2"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                || argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().length() !\u003d 3) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIMEZONE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().startsWith(\"+\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().startsWith(\"-\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIMEZONE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static void checkTimeformat(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get().length() !\u003d 4"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                || argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get().length() !\u003d 4"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                || argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get().length() !\u003d 4) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIME_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIME_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses a pressure group"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup - The pressure group as a string"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return a {@code PressureGroup} object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException if the pressureGroup is not a valid pressure group. {@see PressureGroup#PressureGroup}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static PressureGroup parsePressureGroup (String pressureGroup) throws ParseException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!PressureGroup.isValid(pressureGroup)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PRESSURE_GROUP);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 56,
      "-": 20,
      "arjo129": 37
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/Prefix.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/SelectCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SelectCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an SelectCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "arjo129": 6
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/SetUnitsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.enums.Units;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SetUnitsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Implements the command for SetUnits"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class SetUnitsCommandParser implements Parser\u003cSetUnitsCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses the set_units command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param userInput - The arguments"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return the Command to execute"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException if format is invalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public SetUnitsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SetUnitsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        switch (trimmedArgs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        case \"meters\":"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new SetUnitsCommand(Units.METERS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        case \"feet\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new SetUnitsCommand(Units.FEET);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SetUnitsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 35
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/exceptions/ParseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/pressuregroup/PressureGroupLogic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "package seedu.divelog.logic.pressuregroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "//@@author shuanang"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.commons.util.CompareUtil.readDateFromLong;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.commons.util.CompareUtil.readTimeFromLong;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.commons.util.CompareUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.logic.pressuregroup.exceptions.LimitExceededException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.divetables.PadiDiveTable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Calculates the pressure group given depth and minutes spent at depth for single and/or repeat dives."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "public class PressureGroupLogic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    PressureGroupLogic(){}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * For first dive of the day, calculates pressure group given depth and minutes spent at depth"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param depth {@code DepthProfile} in metres, the deepest point which the diver descends for the dive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param actualBottomTime in minutes which the diver spent underwater"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return new PressureGroup object containing the new pressure group after repeat dive"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static PressureGroup computePressureGroupFirstDive(DepthProfile depth, float actualBottomTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup newPg;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        newPg \u003d padiDiveTable.depthToPg(depth, (int) actualBottomTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return newPg;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Calculates the pressure group given depth and minutes spent at depth for repeat dives on that day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param depth {@code DepthProfile} in metres, the deepest point which the diver descends for the dive"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param actualBottomTime in minutes which the diver spent underwater"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param pg {@code PressureGroup} current PressureGroup object, in consideration for repeat dives."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return new PressureGroup object containing the new pressure group after repeat dive"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @throws JSONException If an error occurs during reading of the PADI dive table."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @throws LimitExceededException For repeat dives, if actual bottom time exceeds no decompression limits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static PressureGroup computePressureGroup(DepthProfile depth, float actualBottomTime, PressureGroup pg)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            throws JSONException, LimitExceededException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        JSONArray arr \u003d padiDiveTable.depthToTimes(depth, pg);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        int adjustedNoDecompressionLimits \u003d arr.getInt(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if ((int) actualBottomTime \u003e adjustedNoDecompressionLimits) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            throw new LimitExceededException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        int totalBottomTime \u003d arr.getInt(0) + (int) actualBottomTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup newPg;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        newPg \u003d padiDiveTable.depthToPg(depth, totalBottomTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return newPg;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Calculates the pressure group after a given time the diver has emerged from the water."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param pg {@code PressureGroup} current PressureGroup object containing the current pressure group"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param duration in minutes: time elapsed after diver has surfaced"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return new PressureGroup object containing the new pressure group after surface interval"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static PressureGroup computePressureGroupAfterSurfaceInterval(PressureGroup pg, float duration) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        final int minSurfaceTimeMinutesToMinPressureGroup \u003d 3 * 60;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup newPg;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (duration \u003e\u003d minSurfaceTimeMinutesToMinPressureGroup) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return new PressureGroup(\"A\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            newPg \u003d padiDiveTable.fromSurfaceInterval(pg, duration);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return newPg;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Calculates the time to next pressure group, returns a float with minutes to next pressure group"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param lastDive {@code DiveSession} current DiveSession object containing the last dive details"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return number of minutes needed to the next immediate Pressure group e.g. \"D\" to \"C\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public float computeTimeToNextPg(DiveSession lastDive) throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        //fromsurfaceinterval - ending pressure group + difference in minutes -\u003e current pg"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long currentDateTime \u003d CompareUtil.getCurrentDateTimeLong(); //ddMMyyyyHHmm"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String timeNow \u003d readTimeFromLong(currentDateTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String dateNow \u003d readDateFromLong(currentDateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveTime \u003d lastDive.getEnd().getTimeString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveDate \u003d lastDive.getDateEnd().getOurDateString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long surfaceDuration \u003d CompareUtil.checkTimeDifference(endOfLastDiveTime, timeNow, endOfLastDiveDate, dateNow);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDivePg \u003d lastDive.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        final int minSurfaceTimeMinutesToMinPressureGroup \u003d 3 * 60;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToNextPg;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (surfaceDuration \u003e minSurfaceTimeMinutesToMinPressureGroup) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            //\"Pressure Group already A\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            timeToNextPg \u003d 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return timeToNextPg;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String currentPg \u003d computePressureGroupAfterSurfaceInterval(new PressureGroup(endOfLastDivePg), surfaceDuration)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                .getPressureGroup();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        //from current pg to next pg time : next pg arr[0] - difference in minutes (surfaceDuration)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String nextPg \u003d String.valueOf(((char) (currentPg.charAt(0) - 1)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        JSONArray nextPgArr \u003d padiDiveTable.getSurfaceTable(new PressureGroup(endOfLastDivePg),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(nextPg));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String toNextPgMinimumTime \u003d nextPgArr.get(0).toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        timeToNextPg \u003d padiDiveTable.timeToMinutes(toNextPgMinimumTime) - surfaceDuration;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        //\"Time to next Pg group, \" + nextPg + \" : \" + timeToNextPg + \" minutes\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return timeToNextPg;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Computes time needed to the min Pressure Group \"A\" from the last dive, with reference to the current time"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param lastDive {@code DiveSession} current DiveSession object containing the last dive details"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return number of minutes needed to the minimum pressure group \"A\""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public float computeTimeToMinPressureGroup(DiveSession lastDive) throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        //fromsurfaceinterval - ending pressure group + difference in minutes -\u003e current pg"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long currentDateTime \u003d CompareUtil.getCurrentDateTimeLong(); //ddMMyyyyHHmm"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String timeNow \u003d readTimeFromLong(currentDateTime);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String dateNow \u003d readDateFromLong(currentDateTime);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveTime \u003d lastDive.getEnd().getTimeString();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveDate \u003d lastDive.getDateEnd().getOurDateString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long surfaceDuration \u003d CompareUtil.checkTimeDifference(endOfLastDiveTime, timeNow, endOfLastDiveDate, dateNow);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDivePg \u003d lastDive.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        final int minSurfaceTimeMinutesToMinPressureGroup \u003d 3 * 60;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToMinPg;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (surfaceDuration \u003e minSurfaceTimeMinutesToMinPressureGroup) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            //\"Pressure Group already A\""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            timeToMinPg \u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return timeToMinPg;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        //from current pg to A pressure group min time : getSurfaceTable(last dive pg, \"A\") arr[0] - surfaceDuration"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        JSONArray toMinPgArr \u003d padiDiveTable.getSurfaceTable(new PressureGroup(endOfLastDivePg),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String toMinPgTime \u003d toMinPgArr.get(0).toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        timeToMinPg \u003d padiDiveTable.timeToMinutes(toMinPgTime) - surfaceDuration;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return timeToMinPg;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 143
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/pressuregroup/PressureGroupLogicStub.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "package seedu.divelog.logic.pressuregroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "//@@author shuanang"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.commons.util.CompareUtil.readDateFromLong;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.commons.util.CompareUtil.readTimeFromLong;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.commons.util.CompareUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.divetables.PadiDiveTable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Stub class to test the PressureGroupLogic without current time dependency in CompareUtil.java"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * specifically two methods: computeTimeToNextPg and computeTimeToMinPressureGroup"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": "public class PressureGroupLogicStub extends PressureGroupLogic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public float computeTimeToNextPg(DiveSession lastDive) throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long currentDateTime \u003d 201020181200L; //ddMMyyyyHHmm"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String timeNow \u003d readTimeFromLong(currentDateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String dateNow \u003d readDateFromLong(currentDateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveTime \u003d lastDive.getEnd().getTimeString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveDate \u003d lastDive.getDateEnd().getOurDateString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long surfaceDuration \u003d CompareUtil.checkTimeDifference(endOfLastDiveTime, timeNow, endOfLastDiveDate, dateNow);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDivePg \u003d lastDive.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        final int minSurfaceTimeMinutesToMinPressureGroup \u003d 3 * 60;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToNextPg;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (surfaceDuration \u003e minSurfaceTimeMinutesToMinPressureGroup) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            timeToNextPg \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return timeToNextPg;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String currentPg \u003d computePressureGroupAfterSurfaceInterval(new PressureGroup(endOfLastDivePg), surfaceDuration)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                .getPressureGroup();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String nextPg \u003d String.valueOf(((char) (currentPg.charAt(0) - 1)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        JSONArray nextPgArr \u003d padiDiveTable.getSurfaceTable(new PressureGroup(endOfLastDivePg),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(nextPg));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String toNextPgMinimumTime \u003d nextPgArr.get(0).toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        timeToNextPg \u003d padiDiveTable.timeToMinutes(toNextPgMinimumTime) - surfaceDuration;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return timeToNextPg;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public float computeTimeToMinPressureGroup(DiveSession lastDive) throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long currentDateTime \u003d 201020181200L; //ddMMyyyyHHmm"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String timeNow \u003d readTimeFromLong(currentDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String dateNow \u003d readDateFromLong(currentDateTime);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveTime \u003d lastDive.getEnd().getTimeString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDiveDate \u003d lastDive.getDateEnd().getOurDateString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        long surfaceDuration \u003d CompareUtil.checkTimeDifference(endOfLastDiveTime, timeNow, endOfLastDiveDate, dateNow);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String endOfLastDivePg \u003d lastDive.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        final int minSurfaceTimeMinutesToMinPressureGroup \u003d 3 * 60;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToMinPg;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (surfaceDuration \u003e minSurfaceTimeMinutesToMinPressureGroup) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            timeToMinPg \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return timeToMinPg;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        JSONArray toMinPgArr \u003d padiDiveTable.getSurfaceTable(new PressureGroup(endOfLastDivePg),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String toMinPgTime \u003d toMinPgArr.get(0).toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        timeToMinPg \u003d padiDiveTable.timeToMinutes(toMinPgTime) - surfaceDuration;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return timeToMinPg;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 68
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/pressuregroup/exceptions/LimitExceededException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "package seedu.divelog.logic.pressuregroup.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "//@@author shuanang"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Thrown if Actual Bottom Time exceeds the adjusted no decompression limits"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "public class LimitExceededException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/DiveLog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSessionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.exceptions.DiveNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Wraps all data at the divelog-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Duplicates are not allowed (by .isSameDiveSession comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveLog implements ReadOnlyDiveLog {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveSessionList diveSessions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveSessions \u003d new DiveSessionList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLog() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Creates an DiveLog using the DiveSessions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLog(ReadOnlyDiveLog toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Replaces the contents of the dive list with {@code diveSessions}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code diveSessions} must not contain duplicate diveSessions."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param diveSessions"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void setDives(List\u003cDiveSession\u003e diveSessions) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.diveSessions.setDives(diveSessions);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Resets the existing data of this {@code DiveLog} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void resetData(ReadOnlyDiveLog newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        setDives(newData.getDiveList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    //// DiveSession-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns true if a dive session with the same identity as {@code DiveSession} exists in the divelog book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param diveSession"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean hasDive(DiveSession diveSession) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        requireNonNull(diveSession);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveSessions.contains(diveSession);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Adds a dive session to the dive log."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * The dive session must not already exist in the dive log."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void addDive(DiveSession p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveSessions.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Replaces the given dive {@code target} in the list with {@code editedDive}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code target} must exist in the divelog book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * The dive of {@code editedDive} must not be the same as another existing dive session in the divelog book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param editedDive"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void updateDive(DiveSession target, DiveSession editedDive) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        requireNonNull(editedDive);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveSessions.setDiveSession(target, editedDive);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Removes {@code key} from this {@code DiveLog}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code key} must exist in the divelog book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void removeDive(DiveSession key) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveSessions.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveSessions.asUnmodifiableObservableList().size() + \" diveSessions\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public ObservableList\u003cDiveSession\u003e getDiveList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveSessions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                || (other instanceof DiveLog // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 diveSessions.equals(((DiveLog) other).diveSessions));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveSessions.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "shuanang": 5,
      "arjo129": 44
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.exceptions.DiveNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    Predicate\u003cDiveSession\u003e PREDICATE_SHOW_ALL_DIVES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void resetData(ReadOnlyDiveLog newData);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /** Returns the DiveLog */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    ReadOnlyDiveLog getDiveLog();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Deletes the given dive."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * The dive session must exist in the divelog book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void deleteDiveSession(DiveSession target) throws DiveNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Adds the given dive."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * {@code DiveSession} must not already exist in the divelog book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param diveSession"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void addDiveSession(DiveSession diveSession);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Replaces the given dive {@code target} with {@code editedDiveSession}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code target} must exist in the divelog book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * The dive of {@code DiveSession} must not be the same as another existing dive session in the divelog book."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param editedDiveSession"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void updateDiveSession(DiveSession target, DiveSession editedDiveSession) throws DiveNotFoundException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /** Returns an unmodifiable view of the filtered dive session list */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    ObservableList\u003cDiveSession\u003e getFilteredDiveList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Updates the filter of the filtered dive session list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void updateFilteredDiveList(Predicate\u003cDiveSession\u003e predicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns true if the model has previous divelog book states to restore."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    boolean canUndoDiveLog();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns true if the model has undone divelog book states to restore."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    boolean canRedoDiveLog();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Restores the model\u0027s divelog book to its previous state."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void undoDiveLog();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Restores the model\u0027s divelog book to its previously undone state."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void redoDiveLog();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Saves the current divelog book state for undo/redo."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    void commitDiveLog();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Returns true if model is in planning mode"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    boolean getPlanningMode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Toggles Planning Mode"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    void setPlanningMode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Adds one to planner count"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    void plannerCountPlus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Removes one from planner count"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    void plannerCountMinus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Returns Planner Count to be undone"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    int getPlannerCount();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 20,
      "-": 42,
      "shuanang": 6,
      "arjo129": 32
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.model.DiveLogChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.exceptions.DiveNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Represents the in-memory model of the divelog book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final VersionedDiveLog versionedDiveLog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final FilteredList\u003cDiveSession\u003e filteredDives;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private boolean planningMode \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private int plannerCount \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Initializes a ModelManager with the given diveLog and userPrefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public ModelManager(ReadOnlyDiveLog diveLog, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        CollectionUtil.requireAllNonNull(diveLog, userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        logger.fine(\"Initializing with divelog book: \" + diveLog + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        versionedDiveLog \u003d new VersionedDiveLog(diveLog);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        filteredDives \u003d new FilteredList\u003c\u003e(versionedDiveLog.getDiveList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this(new DiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //@@author Cjunx"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void setPlanningMode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.planningMode \u003d !this.planningMode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public boolean getPlanningMode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return this.planningMode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void plannerCountPlus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.plannerCount++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public int getPlannerCount() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return this.plannerCount;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void plannerCountMinus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.plannerCount--;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void resetData(ReadOnlyDiveLog newData) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.resetData(newData);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        indicateDiveLogChanged();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public ReadOnlyDiveLog getDiveLog() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return versionedDiveLog;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private void indicateDiveLogChanged() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        raise(new DiveLogChangedEvent(versionedDiveLog));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void deleteDiveSession(DiveSession target) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.removeDive(target);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        indicateDiveLogChanged();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void addDiveSession(DiveSession diveSession) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.addDive(diveSession);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        updateFilteredDiveList(PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        indicateDiveLogChanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void updateDiveSession(DiveSession target, DiveSession editedDiveSession) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedDiveSession);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.updateDive(target, editedDiveSession);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        indicateDiveLogChanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered DiveSession List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Dive} backed by the internal list of"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code versionedDiveLog}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public ObservableList\u003cDiveSession\u003e getFilteredDiveList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredDives);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void updateFilteredDiveList(Predicate\u003cDiveSession\u003e predicate) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        filteredDives.setPredicate(predicate);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean canUndoDiveLog() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return versionedDiveLog.canUndo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean canRedoDiveLog() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return versionedDiveLog.canRedo();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void undoDiveLog() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.undo();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        indicateDiveLogChanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void redoDiveLog() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.redo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        indicateDiveLogChanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void commitDiveLog() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.commit();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return versionedDiveLog.equals(other.versionedDiveLog)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 filteredDives.equals(other.filteredDives);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 30,
      "-": 89,
      "shuanang": 13,
      "arjo129": 43
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/ReadOnlyDiveLog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Unmodifiable view of an divelog book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public interface ReadOnlyDiveLog {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns an unmodifiable view of the dive session list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * This list will not contain any duplicate dive sessions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    ObservableList\u003cDiveSession\u003e getDiveList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "shuanang": 2,
      "arjo129": 5
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private Path diveLogBookFilePath \u003d Paths.get(\"data\" , \"diveLog.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public Path getDiveLogBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return diveLogBookFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void setDiveLogBookFilePath(Path diveLogBookFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        this.diveLogBookFilePath \u003d diveLogBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                \u0026\u0026 Objects.equals(diveLogBookFilePath, o.diveLogBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return Objects.hash(guiSettings, diveLogBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + diveLogBookFilePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "shuanang": 8,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/VersionedDiveLog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * {@code DiveLog} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class VersionedDiveLog extends DiveLog {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final List\u003cReadOnlyDiveLog\u003e diveLogStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public VersionedDiveLog(ReadOnlyDiveLog initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLogStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLogStateList.add(new DiveLog(initialState));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Saves a copy of the current {@code DiveLog} state at the end of the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLogStateList.add(new DiveLog(this));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLogStateList.subList(currentStatePointer + 1, diveLogStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Restores the divelog book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        resetData(diveLogStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Restores the divelog book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        resetData(diveLogStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns true if {@code undo()} has divelog book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns true if {@code redo()} has divelog book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return currentStatePointer \u003c diveLogStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(other instanceof VersionedDiveLog)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        VersionedDiveLog otherVersionedDiveLog \u003d (VersionedDiveLog) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return super.equals(otherVersionedDiveLog)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                \u0026\u0026 diveLogStateList.equals(otherVersionedDiveLog.diveLogStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedDiveLog.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            super(\"Current state pointer at start of diveLogState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            super(\"Current state pointer at end of diveLogState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 1,
      "-": 85,
      "shuanang": 6,
      "arjo129": 18
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/DepthProfile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.ApplicationState;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.enums.Units;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.UnitsUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Keeps track of the Depth of a dive."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Currently as of v1.1, only simple dives to a fixed depth are supported"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * TODO: Implement complex dives"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DepthProfile {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String DEPTH_VALIDATION_REGEX \u003d \"([0-9]*[.])?[0-9]+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final float depth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Creates a new DepthProfile object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth in meters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DepthProfile(float depth) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assert depth \u003e 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.depth \u003d depth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Creates a DepthProfile object using the units defined."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DepthProfile(float depth, Units units) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (units \u003d\u003d Units.FEET) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.depth \u003d UnitsUtil.feetToMeters(depth);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.depth \u003d depth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Verifies the validity of a depth argument"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth The depth. Must be a decimal number"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return if the depth string is valid, return true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static boolean isValidDepth(String depth) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return depth.matches(DEPTH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public float getDepth() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return depth;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns the depth formatted according to the units"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getFormattedString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ApplicationState applicationState \u003d ApplicationState.getInstance();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Units currentUnit \u003d applicationState.getUnit();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        switch(currentUnit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        case FEET:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return String.format(\"%.1fft\", UnitsUtil.metersToFeet(this.depth));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        case METERS:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return String.format(\"%.1fm\", this.depth);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof DepthProfile)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DepthProfile other \u003d (DepthProfile) obj;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return other.getDepth() \u003d\u003d depth;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 74
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/DiveSession.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * @author arjo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * This class represents a single dive session"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class DiveSession {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final OurDate dateStart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Time start;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Time safetyStop;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final OurDate dateEnd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Time end;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final PressureGroup pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final PressureGroup pressureGroupAtEnd;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DepthProfile depthProfile;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final TimeZone timezone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private Date dateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public DiveSession("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            OurDate dateStart, Time start, Time safetyStop,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            OurDate dateEnd, Time end,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            PressureGroup pressureGroupAtBeginning,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            PressureGroup pressureGroupAtEnd, Location location,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            DepthProfile depthProfile, TimeZone timezone) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.safetyStop \u003d safetyStop;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtBeginning \u003d pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtEnd \u003d pressureGroupAtEnd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.depthProfile \u003d depthProfile;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String dateTimeString \u003d this.getDateStart().getOurDateString().concat(this.getStart().getTimeString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.dateTime \u003d new SimpleDateFormat(\"ddMMyyyyHHmm\").parse(dateTimeString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public OurDate getDateStart() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateStart;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public OurDate getDateEnd() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateEnd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Time getStart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Time getEnd() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup getPressureGroupAtBeginning() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup getPressureGroupAtEnd() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return pressureGroupAtEnd;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Time getSafetyStop() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return safetyStop;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DepthProfile getDepthProfile() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return depthProfile;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public TimeZone getTimeZone() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return timezone;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public Date getDateTime() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateTime;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof DiveSession)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession other \u003d (DiveSession) obj;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return other.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getDateStart().equals(getDateStart())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getDateEnd().equals(getDateEnd())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getStart().equals(getStart())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getSafetyStop().equals(getSafetyStop())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getPressureGroupAtBeginning().equals(getPressureGroupAtBeginning())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getPressureGroupAtEnd().equals(getPressureGroupAtEnd())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getEnd().equals(getEnd())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getDepthProfile().equals(getDepthProfile())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 other.getTimeZone().equals(getTimeZone());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        stringBuilder.append(\"Dive Location: \" + getLocation().getLocationName() + \"\\n\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        stringBuilder.append(\"\\tStart: \" + getDateStart().getOurDateString() + \" \" + getStart().getTimeString() + \"\\n\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        stringBuilder.append(\"\\tEnd: \" + getDateEnd().getOurDateString() + \" \" + getEnd().getTimeString() + \"\\n\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        stringBuilder.append(\"\\tPressureGroup: \" + getPressureGroupAtBeginning().getPressureGroup() + \"-\u003e\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                + getPressureGroupAtEnd().getPressureGroup() + \"\\n\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        stringBuilder.append(\"\\tDepth: \" + getDepthProfile().getDepth() + \"\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        stringBuilder.append(\"\\tTime Zone:\" + getTimeZone().getTimeZoneString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 43,
      "arjo129": 81
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/DiveSessionList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.exceptions.DiveNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Stores a list of dives"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveSessionList implements Iterable\u003cDiveSession\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final ObservableList\u003cDiveSession\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns true if the list contains an equivalent dive session as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean contains(DiveSession toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //@@author Cjunx"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Sorts the InternalList based on Time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Can be scaled to sort based on other things"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private void sortDiveSession(int sortByCategory) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Comparator\u003cDiveSession\u003e dateTimeComparator \u003d (one, two) -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            Date dateTime1 \u003d one.getDateTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            Date datetime2 \u003d two.getDateTime();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return dateTime1.compareTo(datetime2);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        switch(sortByCategory) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            FXCollections.sort(internalList, dateTimeComparator);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Adds a Dive Session to the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * The dive session must not already exist in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * If planning mode, adds to planningInternalList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void add(DiveSession toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        sortDiveSession(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Replaces the dive session {@code target} in the list with {@code editedDiveSession}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * The dive of {@code editedDiveSession} must not be the same as another existing dive session in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void setDiveSession(DiveSession target, DiveSession editedDiveSession) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        CollectionUtil.requireAllNonNull(target, editedDiveSession);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new DiveNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        sortDiveSession(1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        internalList.set(index, editedDiveSession);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Removes the equivalent dive from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * The dive session must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void remove(DiveSession toRemove) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new DiveNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Sets all the dives in a dive session list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void setDives(DiveSessionList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        sortDiveSession(1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Replaces the contents of this list with {@code diveSessions}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void setDives(List\u003cDiveSession\u003e diveSessions) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        CollectionUtil.requireAllNonNull(diveSessions);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        internalList.setAll(diveSessions);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public ObservableList\u003cDiveSession\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (!(other instanceof DiveSessionList)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        DiveSessionList otherDiveList \u003d (DiveSessionList) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (otherDiveList.internalList.size() !\u003d internalList.size()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            if (!internalList.get(i).equals(otherDiveList.internalList.get(i))) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public Iterator\u003cDiveSession\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 111,
      "shuanang": 1,
      "arjo129": 24
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/Location.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * @author arjo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Stores location information"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final String locationName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Location(String locationName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.locationName \u003d locationName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getLocationName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return locationName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof Location)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Location other \u003d (Location) obj;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return other.getLocationName().equals(locationName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 26
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/LocationContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * @author arjo"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Tests that a {@code Dives}\u0027s {@code location} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class LocationContainsKeywordPredicate implements Predicate\u003cDiveSession\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public LocationContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean test(DiveSession dive) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(dive.getLocation().getLocationName(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                || (other instanceof LocationContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 keywords.equals(((LocationContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "arjo129": 10
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/OurDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * This is the date class:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * @@author Cjunx"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class OurDate {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public OurDate(String date) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.value \u003d date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public String getOurDateString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    * Given Date in DDMMYYYY String, returns in long"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public long getOurDateLong() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String[] arr \u003d value.split(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long dateLong \u003d Long.parseLong(arr[0]) * 100000"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[1]) * 10000"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[2]) * 1000"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[3]) * 100"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[4]) * 10"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[5]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateLong;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (!(obj instanceof OurDate)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return ((OurDate) obj).getOurDateString().equals(value);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 44
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/PressureGroup.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Represents a pressure group"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class PressureGroup {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String PRESSURE_GROUP_VALIDATION_REGEX \u003d \"([A-Z||a-z])\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final String pressureGroup;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Constructs a pressure group object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup A String that must be 1 alphabetical character in length"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup(String pressureGroup) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assert pressureGroup.length() \u003d\u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assert Character.isLetter(pressureGroup.charAt(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroup \u003d pressureGroup.toUpperCase();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getPressureGroup() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return pressureGroup;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Checks if a string is a valid pressure group. A valid pressure group consists only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * of 1 alphabetical character."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param token"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return The validity of the string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static boolean isValid(String token) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return token.matches(PRESSURE_GROUP_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof PressureGroup)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PressureGroup pg \u003d (PressureGroup) obj;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return pg.getPressureGroup().equals(pressureGroup);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 1,
      "arjo129": 44
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/Time.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//@@author Cjunx"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * This is the time class:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class Time {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public Time (String time) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.value \u003d time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public String getTimeString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    * Given HHMM, returns in long"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public long getTimeLong() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String[] arr \u003d value.split(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long timeLong \u003d Long.parseLong(arr[0]) * 1000"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[1]) * 100"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[2]) * 10"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                + Long.parseLong(arr[3]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return timeLong;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (!(obj instanceof Time)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Time time \u003d (Time) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return value.equals(time.getTimeString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 37,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/TimeZone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//@@author Cjunx"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * This is the timeZone class: assumes UTC +8 default"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class TimeZone {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private int timeZoneDifference;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public TimeZone(String timezone) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.timeZoneDifference \u003d Integer.parseInt(timezone);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            System.err.println(\"Illegal Timezone input\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public int getTimeZone() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return timeZoneDifference;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public String getTimeZoneString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return \"\" + timeZoneDifference;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        if (!(obj instanceof TimeZone)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return ((TimeZone) obj).timeZoneDifference \u003d\u003d timeZoneDifference;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 32
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/exceptions/DiveNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Thrown when a dive is not found"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveNotFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/exceptions/InconsistentPressureGroupsException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Indicates that the pressure group entered was inconsistent"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class InconsistentPressureGroupsException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/exceptions/InvalidTimeException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Thrown if malformatted time is detected"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class InvalidTimeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/exceptions/SimultaneousDiveException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Signals that there are two dives with overlapping time slots"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class SimultaneousDiveException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 7
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/divetables/PadiDiveTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.divetables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.DiveTableUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * This class loads dive tables"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class PadiDiveTable {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PadiDiveTable.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String TIME_VALIDATION_REGEX \u003d \"[0-9][0-9][:][0-9][0-9]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static PadiDiveTable diveTable \u003d new PadiDiveTable();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveTableUtil surfaceTable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveTableUtil depthToPressureGroup;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveTableUtil diveTableUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    //@@author shuanang"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private PadiDiveTable() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        this.surfaceTable \u003d new DiveTableUtil(\"/divetables/surface_table.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        this.depthToPressureGroup \u003d new DiveTableUtil(\"/divetables/Dive_table_1.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        this.diveTableUtil \u003d new DiveTableUtil(\"/divetables/Dive_table_2.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        logger.info(\"Successfully loaded dive tables\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static PadiDiveTable getInstance() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveTable;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Looks up surface interval table"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup1 - Pressure group along x axis"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup2 - Pressure group along y axis"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return returns a JSON Array with the surface intervals"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public JSONArray getSurfaceTable(PressureGroup pressureGroup1, PressureGroup pressureGroup2) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"Attempting to read json\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d surfaceTable.readJsonFileFromResources();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"attempting to lookup data\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(pressureGroup1.getPressureGroup());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return column.getJSONArray(pressureGroup2.getPressureGroup());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException json) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Malformatted json\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Get data from the surface interval table"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param startingPressureGroup - Initial pressure group"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param minutes - number of minutes"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return - Final pressure group"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup fromSurfaceInterval(PressureGroup startingPressureGroup, float minutes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d surfaceTable.readJsonFileFromResources();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(startingPressureGroup.getPressureGroup());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Iterator\u003cString\u003e keys \u003d column.keys();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            while (keys.hasNext()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                String pressureGroup \u003d keys.next();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                JSONArray interval \u003d column.getJSONArray(pressureGroup);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String start \u003d interval.getString(0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String end \u003d interval.getString(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    float minInterval \u003d timeToMinutes(start);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    float maxInterval \u003d timeToMinutes(end);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    if (minutes \u003e\u003d minInterval \u0026\u0026 minutes \u003c\u003d maxInterval) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        return new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                } catch (JSONException je) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    logger.severe(\"Malformatted json: \" + je.getMessage());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    logger.warning(\"Could not parse time\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException je) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Malformatted json: \" + je.getMessage());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new PressureGroup(\"A\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Converts a duration in HH:MM to minutes"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws InvalidTimeException"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public float timeToMinutes(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (time.matches(TIME_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String[] minutes \u003d time.split(\":\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Integer.parseInt(minutes[0]) * 60 + Integer.parseInt(minutes[1]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new InvalidTimeException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Looks up depth to PG"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth - The depth"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param duration - minutes;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup depthToPg(DepthProfile depth, int duration) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"Attempting to read json\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d depthToPressureGroup.readJsonFileFromResources();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"attempting to lookup data\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String key \u003d findClosestKey(table, depth.getDepth());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(key);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            key \u003d findClosestKey(column, duration);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String pressureGroup \u003d column.getString(key);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + io.getMessage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException json) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to parse JSON\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Reads the depth and pressure group and returns an array containing the minimum time"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth - depth dove to"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup - pressure group at time"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return an array containing"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public JSONArray depthToTimes(DepthProfile depth, PressureGroup pressureGroup) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d diveTableUtil.readJsonFileFromResources();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String key \u003d findClosestKey(table, depth.getDepth());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(key);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return column.getJSONArray(pressureGroup.getPressureGroup());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + io.getMessage());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException json) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to parse JSON\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Looks for the nearest key"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param object - JSON Object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param key - The key that is nearest to that value."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static String findClosestKey(JSONObject object, float key) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Iterator\u003cString\u003e keys \u003d object.keys();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ArrayList\u003cInteger\u003e integerKeys \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        while (keys.hasNext()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String curr \u003d keys.next();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            integerKeys.add(Integer.parseInt(curr));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Collections.sort(integerKeys);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        while (key \u003e integerKeys.get(i)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return integerKeys.get(i).toString();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 8,
      "arjo129": 174
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Contains utility methods for populating {@code DiveLog} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static DiveSession[] getSampleDives() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new DiveSession[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            new DiveSession(new OurDate(\"04082018\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    new Time(\"0700\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"0745\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    new OurDate(\"04082018\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"0800\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new PressureGroup(\"T\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    new Location(\"Bali\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new DepthProfile(15.0f),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new TimeZone(\"+8\")), new DiveSession(new OurDate(\"05082018\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1100\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1145\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new OurDate(\"05082018\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1200\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"M\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Location(\"Bali\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new DepthProfile(14.0f),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new TimeZone(\"+8\")), new DiveSession(new OurDate(\"05082018\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"1500\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"1545\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new OurDate(\"05082018\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"1600\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new PressureGroup(\"M\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Location(\"Bali\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new DepthProfile(10.0f),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new TimeZone(\"+8\")), new DiveSession(new OurDate(\"08082018\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"1100\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"1145\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new OurDate(\"08082018\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Time(\"1200\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new PressureGroup(\"L\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new Location(\"Tioman\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new DepthProfile(8.0f),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    new TimeZone(\"+8\"))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static ReadOnlyDiveLog getSampleDiveLog() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog sampleDl \u003d new DiveLog();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        for (DiveSession dive : getSampleDives()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            sampleDl.addDive(dive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return sampleDl;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 7,
      "-": 12,
      "shuanang": 32,
      "arjo129": 17
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/DiveLogStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Represents a storage for {@link DiveLog}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public interface DiveLogStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    Path getDiveLogFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns DiveLog data as a {@link ReadOnlyDiveLog}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    Optional\u003cReadOnlyDiveLog\u003e readDiveLog() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see #getDiveLogFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    Optional\u003cReadOnlyDiveLog\u003e readDiveLog(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Saves the given {@link ReadOnlyDiveLog} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param diveLog cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    void saveDiveLog(ReadOnlyDiveLog diveLog) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see #saveDiveLog(ReadOnlyDiveLog)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    void saveDiveLog(ReadOnlyDiveLog diveLog, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 3,
      "arjo129": 43
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/JsonUserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "arjo129": 4
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.model.DiveLogChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public interface Storage extends DiveLogStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    Path getDiveLogFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    Optional\u003cReadOnlyDiveLog\u003e readDiveLog() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    void saveDiveLog(ReadOnlyDiveLog diveLog) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    void handleDiveLogChangedEvent(DiveLogChangedEvent abce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "shuanang": 2,
      "arjo129": 9
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.model.DiveLogChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Manages storage of DiveLog data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private DiveLogStorage diveLogStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public StorageManager(DiveLogStorage diveLogStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.diveLogStorage \u003d diveLogStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DiveLog methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Path getDiveLogFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveLogStorage.getDiveLogFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Optional\u003cReadOnlyDiveLog\u003e readDiveLog() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return readDiveLog(diveLogStorage.getDiveLogFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Optional\u003cReadOnlyDiveLog\u003e readDiveLog(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveLogStorage.readDiveLog(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void saveDiveLog(ReadOnlyDiveLog diveLog) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        saveDiveLog(diveLog, diveLogStorage.getDiveLogFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void saveDiveLog(ReadOnlyDiveLog diveLog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        diveLogStorage.saveDiveLog(diveLog, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void handleDiveLogChangedEvent(DiveLogChangedEvent event) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            saveDiveLog(event.data);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "shuanang": 5,
      "arjo129": 20
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/UserPrefsStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Saves the given {@link UserPrefs} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "arjo129": 5
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/XmlAdaptedDiveSession.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * JAXB-friendly version of the DiveSession."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class XmlAdaptedDiveSession {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DiveSession\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private String dateStart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private String safetyStop;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private String dateEnd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private String pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private String pressureGroupAtEnd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private float depthProfile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @XmlElement(required \u003d false)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private String timezone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Constructs an XmlAdaptedDiveSession."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public XmlAdaptedDiveSession() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Constructs an {@code XmlAdaptedDiveSession} with the given dive session details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public XmlAdaptedDiveSession("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            String dateStart, String startTime, String safetyStop, String dateEnd,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            String endTime, String pressureGroupAtBeginning,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            String pressureGroupAtEnd, String location, float depthProfile, String timezone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.safetyStop \u003d safetyStop;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtBeginning \u003d pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtEnd \u003d pressureGroupAtEnd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.depthProfile \u003d depthProfile;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Converts a given DiveSession into this class for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedDiveSession"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public XmlAdaptedDiveSession(DiveSession source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateStart \u003d source.getDateStart().getOurDateString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.startTime \u003d source.getStart().getTimeString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.safetyStop \u003d source.getSafetyStop().getTimeString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateEnd \u003d source.getDateEnd().getOurDateString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.endTime \u003d source.getEnd().getTimeString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.location \u003d source.getLocation().getLocationName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtBeginning \u003d source.getPressureGroupAtBeginning().getPressureGroup();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtEnd \u003d source.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.depthProfile \u003d source.getDepthProfile().getDepth();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.timezone \u003d Integer.toString(source.getTimeZone().getTimeZone());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Converts this jaxb-friendly adapted dive session object into the model\u0027s DiveSession object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted dive session"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSession toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!PressureGroup.isValid(pressureGroupAtBeginning)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new IllegalValueException(\"Invalid pressure group!!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!PressureGroup.isValid(pressureGroupAtEnd)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new IllegalValueException(\"Invalid pressure group!!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return new DiveSession(new OurDate(dateStart), new Time(startTime), new Time(safetyStop),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new OurDate(dateEnd), new Time(endTime),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                new PressureGroup(pressureGroupAtBeginning), new PressureGroup(pressureGroupAtEnd),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new Location(location), new DepthProfile(depthProfile), new TimeZone(timezone));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(other instanceof XmlAdaptedDiveSession)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlAdaptedDiveSession x \u003d (XmlAdaptedDiveSession) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateStart.equals(x.dateStart)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                \u0026\u0026 startTime.equals(x.startTime)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                \u0026\u0026 dateEnd.equals(x.dateEnd)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 endTime.equals(x.endTime)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 safetyStop.equals(x.safetyStop)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 location.equals(x.location)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 pressureGroupAtEnd.equals(x.pressureGroupAtEnd)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 pressureGroupAtBeginning.equals(x.pressureGroupAtBeginning)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 depthProfile \u003d\u003d x.depthProfile;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 24,
      "shuanang": 2,
      "arjo129": 96
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/XmlDiveLogStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A class to access DiveLog data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class XmlDiveLogStorage implements DiveLogStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlDiveLogStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public XmlDiveLogStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Path getDiveLogFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Optional\u003cReadOnlyDiveLog\u003e readDiveLog() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return readDiveLog(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Similar to {@link #readDiveLog(Path)}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public Optional\u003cReadOnlyDiveLog\u003e readDiveLog(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"DiveLog file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        XmlSerializableDiveLog xmlDiveLog \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return Optional.of(xmlDiveLog.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void saveDiveLog(ReadOnlyDiveLog diveLog) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        saveDiveLog(diveLog, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Similar to {@link #saveDiveLog(ReadOnlyDiveLog)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void saveDiveLog(ReadOnlyDiveLog diveLog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        requireNonNull(diveLog);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableDiveLog(diveLog));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "shuanang": 7,
      "arjo129": 17
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Stores divelog data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Saves the given divelog data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableDiveLog diveLog)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            XmlUtil.saveDataToFile(file, diveLog);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns divelog book in the file or an empty divelog book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static XmlSerializableDiveLog loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableDiveLog.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "shuanang": 4,
      "arjo129": 6
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/XmlSerializableDiveLog.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * An Immutable DiveLog that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "@XmlRootElement(name \u003d \"divelog\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class XmlSerializableDiveLog {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private List\u003cXmlAdaptedDiveSession\u003e dives;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Creates an empty XmlSerializableDiveLog."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public XmlSerializableDiveLog() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dives \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public XmlSerializableDiveLog(ReadOnlyDiveLog src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dives.addAll(src.getDiveList().stream().map(XmlAdaptedDiveSession::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Converts this divelog into the model\u0027s {@code DiveLog} object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code XmlAdaptedDiveSession}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLog toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog diveLog \u003d new DiveLog();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        for (XmlAdaptedDiveSession p : dives) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            DiveSession dive \u003d p.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            diveLog.addDive(dive);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveLog;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(other instanceof XmlSerializableDiveLog)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return dives.equals(((XmlSerializableDiveLog) other).dives);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "shuanang": 1,
      "arjo129": 23
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import seedu.divelog.commons.events.UnitsChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.DivePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_DIVE_LOCATION \u003d \"Dive @ %s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_DIVE_DEPTH \u003d \"You dove to %s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_START_TIME \u003d \"Started at: %s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_END_TIME \u003d \"Ended at: %s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_SAFETY_STOP \u003d \"Safety stop at: %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_TIME_NOW \u003d \"Date: %s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label diveLocation;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label diveDepth;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label pgStart;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label pgEnd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label safetyStop;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private DiveSession currentDive;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        loadMyTimeNow();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Renders the dive specific information"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param dive"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void loadDivePage(DiveSession dive) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        logger.info(\"REDRAWING\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLocation.setText(String.format(FORMAT_DIVE_LOCATION, dive.getLocation().getLocationName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveDepth.setText(String.format(FORMAT_DIVE_DEPTH, dive.getDepthProfile().getFormattedString()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pgStart.setText(dive.getPressureGroupAtBeginning().getPressureGroup());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pgEnd.setText(dive.getPressureGroupAtEnd().getPressureGroup());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        //pgEnd.setTextFill(Color.web(\"#0076a3\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        //pgEnd.setForeground(Color.web(\"#0076a3\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        //pgEnd.setTextFill(Color.GREEN);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        //pgEnd.setStyle(\"-fx-background-color: #0076a3;\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        startTime.setText(String.format(FORMAT_START_TIME, dive.getStart().getTimeString()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        endTime.setText(String.format(FORMAT_END_TIME, dive.getEnd().getTimeString()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        safetyStop.setText(String.format(FORMAT_SAFETY_STOP, dive.getSafetyStop().getTimeString()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dateTime.setText(String.format(FORMAT_TIME_NOW, dive.getDateStart().getOurDateString()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        checkPressureGrp(dive.getPressureGroupAtBeginning().getPressureGroup());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        currentDive \u003d dive;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        pgStart.getStyleClass().add(checkPressureGrp(dive.getPressureGroupAtBeginning().getPressureGroup()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        pgEnd.getStyleClass().add(checkPressureGrp(dive.getPressureGroupAtEnd().getPressureGroup()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources(){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private void loadMyTimeNow() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        dateTime.setText(String.format(FORMAT_TIME_NOW, dateTimeSend()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private void handleDivePanelSelectionChangedEvent(DivePanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        loadDivePage(event.getNewSelection());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private void handleUnitsChangedEvent(UnitsChangedEvent event) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        if (currentDive !\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tttaus"
        },
        "content": "                diveDepth.setText(String.format(FORMAT_DIVE_DEPTH, currentDive.getDepthProfile().getFormattedString()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Retrieves the current date time as a string"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return retrieves date as string"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private String dateTimeSend() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        Date d \u003d new Date();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-YYYY hh:mmaa\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        String dateTimeNow \u003d dateFormat.format(d);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        return dateTimeNow;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tttaus"
        },
        "content": "     * Receives the pressure group that needs to be parsed"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tttaus"
        },
        "content": "     * sets the attribute on the screen depending on the Pressure group."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tttaus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private String checkPressureGrp(String pgGrp) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        switch(pgGrp) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            //to return it as #008000 or GREEN or rgb(0,128,0)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            // break;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreenA\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"G\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"H\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"I\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"J\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"L\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"M\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"N\":"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"O\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsGreen\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"P\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            //return #ff6600 or ORANGE or rgb(255, 102, 0)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrangeP\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"Q\":"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrangeP\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"R\":"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"S\":"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"U\":"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"V\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"W\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"X\":"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"Y\":"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsOrange\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        case \"Z\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            //to return as RED or #ff0000 or (255,0,0)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"thisIsRed\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            //return black"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            return \"label\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 103,
      "-": 38,
      "shuanang": 1,
      "arjo129": 48
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 143,
      "arjo129": 8
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/DiveListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tttaus"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.UnitsChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.DivePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * Panel containing the list of dives."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    public static final String FORMAT_TIME_NOW \u003d \"Date: %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private static final String FXML \u003d \"DiveListPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DiveListPanel.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private ListView\u003cDiveSession\u003e diveListView;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private Label dateId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public DiveListPanel(ObservableList\u003cDiveSession\u003e diveList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        //dateID.setText(String.format(FORMAT_TIME_NOW, dive.getDateStart().getOurDateString()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        loadMyTimeNow();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        setConnections(diveList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private void setConnections(ObservableList\u003cDiveSession\u003e diveList) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        diveListView.setItems(diveList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveListView.setCellFactory(listView -\u003e new DiveListViewCell());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                        logger.fine(\"Selection in dive list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        raise(new DivePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Scrolls to the {@code DiveSessionCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            diveListView.scrollTo(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            diveListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void handleUnitsChangedEvent(UnitsChangedEvent event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            diveListView.refresh();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code DiveSession} using a {@code DiveSessionCard}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    class DiveListViewCell extends ListCell\u003cDiveSession\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        protected void updateItem(DiveSession dive, boolean empty) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            super.updateItem(dive, empty);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            if (empty || dive \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                setGraphic(new DiveSessionCard(dive, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tttaus"
        },
        "content": "     * Retrieves the current date time as a string"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tttaus"
        },
        "content": "     * @return retrieves date as string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tttaus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private String dateTimeSend() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        Date d \u003d new Date();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        DateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-YYYY hh:mmaa\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        String dateTimeNow \u003d dateFormat.format(d);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        return dateTimeNow;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private void loadMyTimeNow() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tttaus"
        },
        "content": "        dateId.setText(String.format(FORMAT_TIME_NOW, dateTimeSend()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 25,
      "-": 56,
      "shuanang": 7,
      "arjo129": 29
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/DiveSessionCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * An UI component that displays information of a {@code DiveSession}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveSessionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DIVE_PREFIX \u003d \"Dive at \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_THE_START_TIME \u003d \"Date Started: %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String FORMAT_THE_END_TIME \u003d \"Date Ended: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String FXML \u003d \"DiveListCards.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on DiveLog level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public final DiveSession dive;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label depth;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label dateStart;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label dateEnd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionCard(DiveSession dive, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.dive \u003d dive;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        name.setText(DIVE_PREFIX + dive.getLocation().getLocationName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        depth.setText(dive.getDepthProfile().getFormattedString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dateStart.setText(String.format(FORMAT_THE_START_TIME, dive.getDateStart().getOurDateString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dateEnd.setText(String.format(FORMAT_THE_END_TIME, dive.getDateEnd().getOurDateString()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(other instanceof DiveSessionCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSessionCard card \u003d (DiveSessionCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 dive.equals(card.dive);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 1,
      "-": 5,
      "arjo129": 64
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/HelpWindow.html\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private DiveListPanel diveListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private StackPane diveListPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveListPanel \u003d new DiveListPanel(logic.getFilteredDiveList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveListPanelPlaceholder.getChildren().add(diveListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getDiveLogBookFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveListPanel getDiveListPanel() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveListPanel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 188,
      "shuanang": 1,
      "arjo129": 14
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.model.DiveLogChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e syncStatus.setText(status));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void handleDiveLogChangedEvent(DiveLogChangedEvent abce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "shuanang": 1,
      "arjo129": 3
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/Ui.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Stops the UI. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void stop();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/newLogo_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 1,
      "-": 110,
      "arjo129": 9
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/UiPart.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises the event via {@link EventsCenter#post(BaseEvent)}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void raise(BaseEvent event) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(event);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Registers the object as an event handler at the {@link EventsCenter}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param handler usually {@code this}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void registerAsAnEventHandler(Object handler) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(handler);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "arjo129": 4
    }
  },
  {
    "path": "src/main/resources/divetables/Dive_table_1.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "{\"10\": {\"122\": \"T\", \"178\": \"X\", \"219\": \"Z\", \"133\": \"U\", \"88\": \"P\", \"64\": \"L\", \"112\": \"S\", \"82\": \"O\","
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"199\": \"Y\", \"26\": \"C\", \"20\": \"B\", \"160\": \"W\", \"45\": \"H\", \"41\": \"G\", \"145\": \"V\", \"75\": \"N\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"70\": \"M\", \"95\": \"Q\", \"104\": \"R\", \"10\": \"A\", \"59\": \"K\", \"54\": \"J\", \"30\": \"D\", \"37\": \"F\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"50\": \"I\", \"34\": \"E\"},"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"12\": {\"88\": \"S\", \"116\": \"W\", \"53\": \"L\", \"66\": \"O\", \"134\": \"Y\", \"82\": \"R\", \"26\": \"D\", \"23\": \"C\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"45\": \"J\", \"42\": \"I\", \"29\": \"E\", \"9\": \"A\", \"147\": \"Z\", \"76\": \"Q\", \"108\": \"V\", \"125\": \"X\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"71\": \"P\", \"101\": \"U\", \"94\": \"T\", \"38\": \"H\", \"17\": \"B\", \"32\": \"F\", \"57\": \"M\", \"49\": \"K\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"62\": \"N\", \"35\": \"G\"},"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"14\": {\"43\": \"L\", \"61\": \"Q\", \"64\": \"R\", \"53\": \"O\", \"82\": \"V\", \"87\": \"W\", \"24\": \"E\", \"27\": \"F\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"22\": \"D\", \"47\": \"M\", \"29\": \"G\", \"40\": \"K\", \"8\": \"A\", \"68\": \"S\", \"77\": \"U\", \"98\": \"Y\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"73\": \"T\", \"92\": \"X\", \"15\": \"B\", \"19\": \"C\", \"32\": \"H\", \"57\": \"P\", \"37\": \"J\", \"50\": \"N\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"35\": \"I\"},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"16\": {\"60\": \"T\", \"63\": \"U\", \"67\": \"V\", \"25\": \"G\", \"27\": \"H\", \"21\": \"E\", \"48\": \"P\", \"23\": \"F\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"45\": \"O\", \"42\": \"N\", \"29\": \"I\", \"7\": \"A\", \"39\": \"M\", \"72\": \"X\", \"70\": \"W\", \"13\": \"B\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"17\": \"C\", \"19\": \"D\", \"32\": \"J\", \"56\": \"S\", \"37\": \"L\", \"50\": \"Q\", \"53\": \"R\", \"34\": \"K\"},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"18\": {\"56\": \"W\", \"24\": \"H\", \"26\": \"I\", \"20\": \"F\", \"22\": \"G\", \"46\": \"R\", \"28\": \"J\", \"43\": \"Q\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"41\": \"P\", \"6\": \"A\", \"11\": \"B\", \"39\": \"O\", \"15\": \"C\", \"48\": \"S\", \"16\": \"D\", \"55\": \"V\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"18\": \"E\", \"30\": \"K\", \"51\": \"T\", \"36\": \"N\", \"53\": \"U\", \"34\": \"M\", \"32\": \"L\"},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"20\": {\"10\": \"B\", \"13\": \"C\", \"30\": \"M\", \"15\": \"D\", \"21\": \"H\", \"16\": \"E\", \"18\": \"F\", \"44\": \"T\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"23\": \"I\", \"28\": \"L\", \"26\": \"K\", \"40\": \"R\", \"34\": \"O\", \"45\": \"U\", \"36\": \"P\", \"25\": \"J\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"6\": \"A\", \"20\": \"G\", \"38\": \"Q\", \"32\": \"N\", \"42\": \"S\"},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"22\": {\"24\": \"K\", \"25\": \"L\", \"13\": \"D\", \"12\": \"C\", \"15\": \"E\", \"21\": \"I\", \"22\": \"J\", \"16\": \"F\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"19\": \"H\", \"18\": \"G\", \"30\": \"O\", \"37\": \"S\", \"29\": \"N\", \"34\": \"Q\", \"27\": \"M\", \"5\": \"A\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"36\": \"R\", \"32\": \"P\", \"9\": \"B\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"25\": {\"11\": \"D\", \"10\": \"C\", \"13\": \"E\", \"15\": \"G\", \"14\": \"F\", \"17\": \"H\", \"23\": \"M\", \"19\": \"J\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"18\": \"I\", \"22\": \"L\", \"28\": \"P\", \"26\": \"O\", \"29\": \"Q\", \"4\": \"A\", \"8\": \"B\", \"25\": \"N\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"21\": \"K\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"30\": {\"11\": \"F\", \"10\": \"E\", \"13\": \"H\", \"12\": \"G\", \"15\": \"J\", \"14\": \"I\", \"17\": \"L\", \"16\": \"K\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"19\": \"M\", \"20\": \"N\", \"3\": \"A\", \"6\": \"B\", \"9\": \"D\", \"8\": \"C\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"35\": {\"11\": \"H\", \"10\": \"G\", \"13\": \"J\", \"12\": \"I\", \"14\": \"K\", \"3\": \"A\", \"5\": \"B\", \"7\": \"C\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"9\": \"F\", \"8\": \"D\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"40\": {\"9\": \"G\", \"8\": \"F\", \"5\": \"B\", \"7\": \"E\", \"6\": \"C\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"42\": {\"8\": \"F\", \"4\": \"B\", \"7\": \"E\", \"6\": \"D\"}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 34
    }
  },
  {
    "path": "src/main/resources/divetables/Dive_table_2.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "{\"10\": {\"A\": [10, 209], \"C\": [26, 193], \"B\": [20, 199], \"E\": [34, 185], \"D\": [30, 189], \"G\": [41, 178], \"F\": [37, 182], \"I\": [50, 169], \"H\": [45, 174], \"K\": [59, 160], \"J\": [54, 165], \"M\": [70, 149], \"L\": [64, 155], \"O\": [82, 137], \"N\": [75, 144], \"Q\": [95, 124], \"P\": [88, 131], \"S\": [112, 107], \"R\": [104, 115], \"U\": [133, 84], \"T\": [122, 97], \"W\": [160, 59], \"V\": [145, 74], \"Y\": [199, 20], \"X\": [178, 41]}, \"12\": {\"A\": [9, 138], \"C\": [23, 124], \"B\": [17, 130], \"E\": [29, 118], \"D\": [26, 121], \"G\": [35, 112], \"F\": [32, 115], \"I\": [42, 105], \"H\": [38, 109], \"K\": [49, 98], \"J\": [45, 102], \"M\": [57, 90], \"L\": [53, 94], \"O\": [66, 81], \"N\": [57, 90], \"Q\": [76, 71], \"P\": [71, 76], \"S\": [88, 59], \"R\": [82, 65], \"U\": [101, 46], \"T\": [94, 53], \"W\": [116, 31], \"V\": [108, 39], \"Y\": [134, 14], \"X\": [125, 22]}, \"14\": {\"A\": [8, 90], \"C\": [19, 79], \"B\": [15, 83], \"E\": [24, 74], \"D\": [22, 76], \"G\": [29, 69], \"F\": [27, 71], \"I\": [35, 63], \"H\": [32, 66], \"K\": [40, 58], \"J\": [37, 61], \"M\": [47, 51], \"L\": [43, 55], \"O\": [53, 45], \"N\": [50, 48], \"Q\": [61, 37], \"P\": [57, 41], \"S\": [68, 30], \"R\": [64, 34], \"U\": [77, 21], \"T\": [73, 25], \"W\": [87, 11], \"V\": [82, 16], \"X\": [92, 6]}, \"16\": {\"A\": [7, 65], \"C\": [17, 55], \"B\": [13, 59], \"E\": [21, 51], \"D\": [19, 53], \"G\": [25, 47], \"F\": [23, 49], \"I\": [29, 43], \"H\": [27, 45], \"K\": [34, 38], \"J\": [32, 40], \"M\": [39, 33], \"L\": [37, 35], \"O\": [45, 27], \"N\": [42, 30], \"Q\": [50, 22], \"P\": [48, 24], \"S\": [56, 16], \"R\": [53, 19], \"U\": [63, 9], \"T\": [60, 12], \"W\": [70, 2], \"V\": [67, 5]}, \"18\": {\"A\": [6, 50], \"C\": [15, 41], \"B\": [11, 45], \"E\": [18, 38], \"D\": [16, 40], \"G\": [22, 34], \"F\": [20, 36], \"I\": [26, 30], \"H\": [24, 32], \"K\": [30, 26], \"J\": [28, 28], \"M\": [34, 22], \"L\": [32, 24], \"O\": [39, 17], \"N\": [36, 20], \"Q\": [43, 13], \"P\": [41, 15], \"S\": [48, 8], \"R\": [46, 10], \"U\": [53, 3], \"T\": [51, 5]}, \"20\": {\"A\": [6, 39], \"C\": [13, 32], \"B\": [10, 35], \"E\": [16, 29], \"D\": [15, 30], \"G\": [20, 25], \"F\": [18, 27], \"I\": [23, 22], \"H\": [21, 24], \"K\": [26, 19], \"J\": [25, 20], \"M\": [30, 15], \"L\": [28, 17], \"O\": [34, 11], \"N\": [32, 13], \"Q\": [38, 7], \"P\": [36, 9], \"S\": [42, 3], \"R\": [40, 5]}, \"22\": {\"A\": [5, 32], \"C\": [12, 25], \"B\": [9, 28], \"E\": [15, 22], \"D\": [13, 24], \"G\": [18, 19], \"F\": [16, 21], \"I\": [21, 16], \"H\": [19, 18], \"K\": [24, 13], \"J\": [22, 15], \"M\": [27, 10], \"L\": [25, 12], \"O\": [30, 7], \"N\": [29, 8], \"Q\": [34, 3], \"P\": [32, 5]}, \"25\": {\"A\": [4, 25], \"C\": [10, 19], \"B\": [8, 21], \"E\": [13, 16], \"D\": [11, 18], \"G\": [15, 14], \"F\": [14, 15], \"I\": [18, 11], \"H\": [17, 12], \"K\": [21, 8], \"J\": [19, 10], \"M\": [23, 6], \"L\": [22, 7], \"O\": [26, 3], \"N\": [25, 4]}, \"30\": {\"A\": [3, 17], \"C\": [8, 12], \"B\": [6, 14], \"E\": [10, 10], \"D\": [9, 11], \"G\": [12, 8], \"F\": [11, 9], \"I\": [14, 6], \"H\": [13, 7], \"K\": [16, 4], \"J\": [15, 5], \"L\": [17, 3]}, \"35\": {\"A\": [3, 11], \"C\": [7, 7], \"B\": [5, 9], \"E\": [9, 5], \"D\": [98, 6], \"G\": [10, 4], \"F\": [9, 5], \"H\": [11, 3]}, \"40\": {\"A\": [2, 7], \"B\": [5, 4]}}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 1
    }
  },
  {
    "path": "src/main/resources/divetables/max_bottom_times.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "{\"10\": 219, \"12\": 147, \"14\": 98, \"16\": 72, \"18\": 56, \"20\": 45, \"22\": 37, \"25\": 29, \"30\": 20, \"35\": 14, \"40\": 9, \"42\": 8}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 1
    }
  },
  {
    "path": "src/main/resources/divetables/surface_table.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "{\"A\": {\"A\": [\"00:00\", \"03:00\"], \"C\": [\"\", \"\"], \"B\": [\"\", \"\"], \"E\": [\"\", \"\"], \"D\": [\"\", \"\"],"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"C\": {\"A\": [\"01:10\", \"04:10\"], \"C\": [\"00:00\", \"00:21\"], \"B\": [\"00:22\", \"01:09\"], \"E\": [\"\", \"\"],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"D\": [\"\", \"\"], \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"B\": {\"A\": [\"00:48\", \"03:48\"], \"C\": [\"\", \"\"], \"B\": [\"00:00\", \"00:47\"], \"E\": [\"\", \"\"], \"D\": [\"\", \"\"],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"E\": {\"A\": [\"01:28\", \"04:28\"], \"C\": [\"00:17\", \"00:38\"], \"B\": [\"00:39\", \"01:27\"],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:00\", \"00:07\"], \"D\": [\"00:08\", \"00:16\"], \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"D\": {\"A\": [\"01:19\", \"04:19\"], \"C\": [\"00:09\", \"00:30\"], \"B\": [\"00:31\", \"01:18\"], \"E\": [\"\", \"\"],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"D\": [\"00:00\", \"00:08\"], \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"\", \"\"], \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"G\": {\"A\": [\"01:42\", \"04:42\"], \"C\": [\"00:32\", \"00:53\"], \"B\": [\"00:54\", \"01:41\"],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:14\", \"00:22\"], \"D\": [\"00:23\", \"00:31\"], \"G\": [\"00:00\", \"00:06\"],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:07\", \"00:13\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"F\": {\"A\": [\"01:35\", \"04:35\"], \"C\": [\"00:25\", \"00:46\"], \"B\": [\"00:47\", \"01:34\"],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:08\", \"00:15\"], \"D\": [\"00:16\", \"00:24\"], \"G\": [\"\", \"\"], \"F\": [\"00:00\", \"00:07\"],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"I\": {\"A\": [\"01:54\", \"04:54\"], \"C\": [\"00:44\", \"01:05\"], \"B\": [\"01:06\", \"01:53\"],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:27\", \"00:34\"], \"D\": [\"00:35\", \"00:43\"], \"G\": [\"00:12\", \"00:18\"],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:19\", \"00:26\"], \"I\": [\"00:00\", \"00:05\"], \"H\": [\"00:06\", \"00:11\"], \"K\": [\"\", \"\"],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"H\": {\"A\": [\"01:48\", \"04:48\"], \"C\": [\"00:38\", \"00:59\"], \"B\": [\"01:00\", \"01:47\"],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:21\", \"00:28\"], \"D\": [\"00:29\", \"00:37\"], \"G\": [\"00:06\", \"00:12\"],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:13\", \"00:20\"], \"I\": [\"\", \"\"], \"H\": [\"00:00\", \"00:05\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"K\": {\"A\": [\"02:05\", \"05:05\"], \"C\": [\"00:55\", \"01:15\"], \"B\": [\"01:17\", \"02:04\"],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:38\", \"00:45\"], \"D\": [\"00:46\", \"00:54\"], \"G\": [\"00:23\", \"00:29\"],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:30\", \"00:37\"], \"I\": [\"00:11\", \"00:16\"], \"H\": [\"00:17\", \"00:22\"],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:00\", \"00:04\"], \"J\": [\"00:05\", \"00:10\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"J\": {\"A\": [\"02:00\", \"05:00\"], \"C\": [\"00:50\", \"01:11\"], \"B\": [\"01:12\", \"01:59\"],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:32\", \"00:40\"], \"D\": [\"00:41\", \"00:49\"], \"G\": [\"00:18\", \"00:24\"],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:25\", \"00:31\"], \"I\": [\"00:06\", \"00:11\"], \"H\": [\"00:12\", \"00:17\"],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"\", \"\"], \"J\": [\"00:00\", \"00:05\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"M\": {\"A\": [\"02:15\", \"05:15\"], \"C\": [\"01:05\", \"01:25\"], \"B\": [\"01:26\", \"02:14\"],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:47\", \"00:55\"], \"D\": [\"00:56\", \"01:04\"], \"G\": [\"00:33\", \"00:39\"],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:40\", \"00:46\"], \"I\": [\"00:20\", \"00:25\"], \"H\": [\"00:26\", \"00:32\"],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:10\", \"00:14\"], \"J\": [\"00:15\", \"00:19\"], \"M\": [\"00:00\", \"00:04\"],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:05\", \"00:09\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"L\": {\"A\": [\"02:10\", \"05:10\"], \"C\": [\"01:00\", \"01:21\"], \"B\": [\"01:22\", \"02:09\"],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:43\", \"00:50\"], \"D\": [\"00:51\", \"00:59\"], \"G\": [\"00:28\", \"00:34\"],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:35\", \"00:42\"], \"I\": [\"00:16\", \"00:21\"], \"H\": [\"00:22\", \"00:27\"],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:05\", \"00:09\"], \"J\": [\"00:10\", \"00:15\"], \"M\": [\"\", \"\"], \"L\": [\"00:00\", \"00:04\"],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"O\": {\"A\": [\"02:24\", \"05:24\"], \"C\": [\"01:13\", \"01:34\"], \"B\": [\"01:35\", \"02:23\"],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:56\", \"01:03\"], \"D\": [\"01:04\", \"01:12\"], \"G\": [\"00:42\", \"00:47\"],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:48\", \"00:55\"], \"I\": [\"00:29\", \"00:34\"], \"H\": [\"00:35\", \"00:41\"],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:18\", \"00:23\"], \"J\": [\"00:24\", \"00:28\"], \"M\": [\"00:09\", \"00:12\"],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:13\", \"00:17\"], \"O\": [\"00:00\", \"00:03\"], \"N\": [\"00:04\", \"00:08\"],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"],"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"N\": {\"A\": [\"02:19\", \"05:19\"], \"C\": [\"01:09\", \"01:30\"], \"B\": [\"01:31\", \"02:18\"],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:52\", \"00:59\"], \"D\": [\"01:00\", \"01:08\"], \"G\": [\"00:37\", \"00:43\"],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:44\", \"00:51\"], \"I\": [\"00:25\", \"00:30\"], \"H\": [\"00:31\", \"00:36\"],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:14\", \"00:18\"], \"J\": [\"00:19\", \"00:24\"], \"M\": [\"00:04\", \"00:08\"],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:09\", \"00:13\"], \"O\": [\"\", \"\"], \"N\": [\"00:00\", \"00:03\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Q\": {\"A\": [\"02:31\", \"05:31\"], \"C\": [\"01:21\", \"01:42\"], \"B\": [\"01:43\", \"02:30\"],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:04\", \"01:11\"], \"D\": [\"01:12\", \"01:20\"], \"G\": [\"00:49\", \"00:55\"],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:56\", \"01:03\"], \"I\": [\"00:37\", \"00:42\"], \"H\": [\"00:43\", \"00:48\"],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:26\", \"00:30\"], \"J\": [\"00:31\", \"00:36\"], \"M\": [\"00:17\", \"00:20\"],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:21\", \"00:25\"], \"O\": [\"00:08\", \"00:11\"], \"N\": [\"00:12\", \"00:16\"],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:00\", \"00:03\"], \"P\": [\"00:04\", \"00:07\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"S\": {\"A\": [\"02:39\", \"05:39\"], \"C\": [\"01:28\", \"01:49\"], \"B\": [\"01:50\", \"02:38\"],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:11\", \"01:18\"], \"D\": [\"01:19\", \"01:27\"], \"G\": [\"00:57\", \"01:03\"],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:04\", \"01:10\"], \"I\": [\"00:44\", \"00:49\"], \"H\": [\"00:50\", \"00:56\"],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:33\", \"00:38\"], \"J\": [\"00:39\", \"00:43\"], \"M\": [\"00:24\", \"00:27\"],"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:28\", \"00:32\"], \"O\": [\"00:15\", \"00:18\"], \"N\": [\"00:19\", \"00:23\"],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:07\", \"00:10\"], \"P\": [\"00:11\", \"00:14\"], \"S\": [\"00:00\", \"00:03\"],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:04\", \"00:06\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"R\": {\"A\": [\"02:35\", \"05:35\"], \"C\": [\"01:25\", \"01:46\"], \"B\": [\"01:47\", \"02:34\"],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:08\", \"01:15\"], \"D\": [\"01:16\", \"01:24\"], \"G\": [\"00:53\", \"00:59\"],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:00\", \"01:07\"], \"I\": [\"00:41\", \"00:46\"], \"H\": [\"00:47\", \"00:52\"],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:30\", \"00:34\"], \"J\": [\"00:35\", \"00:40\"], \"M\": [\"00:20\", \"00:24\"],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:25\", \"00:29\"], \"O\": [\"00:12\", \"00:15\"], \"N\": [\"00:16\", \"00:19\"],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:04\", \"00:07\"], \"P\": [\"00:08\", \"00:11\"], \"S\": [\"\", \"\"], \"R\": [\"00:00\", \"00:03\"],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"U\": {\"A\": [\"02:45\", \"05:45\"], \"C\": [\"01:35\", \"01:56\"], \"B\": [\"01:57\", \"02:44\"],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:18\", \"01:25\"], \"D\": [\"01:26\", \"01:34\"], \"G\": [\"01:03\", \"01:09\"],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:10\", \"01:17\"], \"I\": [\"00:51\", \"00:56\"], \"H\": [\"00:57\", \"01:02\"],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:40\", \"00:44\"], \"J\": [\"00:45\", \"00:50\"], \"M\": [\"00:30\", \"00:34\"],"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:35\", \"00:39\"], \"O\": [\"00:22\", \"00:25\"], \"N\": [\"00:26\", \"00:29\"],"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:14\", \"00:17\"], \"P\": [\"00:18\", \"00:21\"], \"S\": [\"00:07\", \"00:09\"],"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:10\", \"00:13\"], \"U\": [\"00:00\", \"00:02\"], \"T\": [\"00:03\", \"00:06\"],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"T\": {\"A\": [\"02:42\", \"05:42\"], \"C\": [\"01:32\", \"01:53\"], \"B\": [\"01:54\", \"02:41\"],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:14\", \"01:22\"], \"D\": [\"01:23\", \"01:31\"], \"G\": [\"01:00\", \"01:06\"],"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:07\", \"01:13\"], \"I\": [\"00:48\", \"00:53\"], \"H\": [\"00:54\", \"00:59\"],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:37\", \"00:41\"], \"J\": [\"00:42\", \"00:47\"], \"M\": [\"00:27\", \"00:31\"],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:32\", \"00:36\"], \"O\": [\"00:18\", \"00:22\"], \"N\": [\"00:23\", \"00:26\"],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:11\", \"00:13\"], \"P\": [\"00:14\", \"00:17\"], \"S\": [\"00:03\", \"00:06\"],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:07\", \"00:10\"], \"U\": [\"\", \"\"], \"T\": [\"00:00\", \"00:02\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"W\": {\"A\": [\"02:51\", \"05:51\"], \"C\": [\"01:41\", \"02:02\"], \"B\": [\"02:03\", \"02:50\"],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:24\", \"01:31\"], \"D\": [\"01:32\", \"01:40\"], \"G\": [\"01:09\", \"01:15\"],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:16\", \"01:23\"], \"I\": [\"00:57\", \"01:02\"], \"H\": [\"01:03\", \"01:08\"],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:46\", \"00:50\"], \"J\": [\"00:51\", \"00:56\"], \"M\": [\"00:37\", \"00:40\"],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:41\", \"00:45\"], \"O\": [\"00:28\", \"00:31\"], \"N\": [\"00:32\", \"00:36\"],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:20\", \"00:23\"], \"P\": [\"00:24\", \"00:27\"], \"S\": [\"00:13\", \"00:15\"],"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:16\", \"00:19\"], \"U\": [\"00:06\", \"00:08\"], \"T\": [\"00:09\", \"00:12\"],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:00\", \"00:02\"], \"V\": [\"00:03\", \"00:05\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"V\": {\"A\": [\"02:48\", \"05:48\"], \"C\": [\"01:38\", \"01:59\"], \"B\": [\"02:00\", \"02:47\"],"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:21\", \"01:28\"], \"D\": [\"01:29\", \"01:37\"], \"G\": [\"01:06\", \"01:12\"],"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:13\", \"01:20\"], \"I\": [\"00:54\", \"00:59\"], \"H\": [\"01:00\", \"01:05\"],"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:43\", \"00:47\"], \"J\": [\"00:48\", \"00:53\"], \"M\": [\"00:34\", \"00:37\"],"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:38\", \"00:42\"], \"O\": [\"00:25\", \"00:28\"], \"N\": [\"00:29\", \"00:33\"],"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:17\", \"00:20\"], \"P\": [\"00:21\", \"00:24\"], \"S\": [\"00:10\", \"00:12\"],"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:13\", \"00:16\"], \"U\": [\"00:03\", \"00:05\"], \"T\": [\"00:06\", \"00:09\"],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"00:00\", \"00:02\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Y\": {\"A\": [\"02:57\", \"05:57\"], \"C\": [\"01:47\", \"02:08\"], \"B\": [\"02:09\", \"02:56\"],"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:30\", \"01:37\"], \"D\": [\"01:38\", \"01:46\"], \"G\": [\"01:15\", \"01:21\"],"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:22\", \"01:29\"], \"I\": [\"01:03\", \"01:08\"], \"H\": [\"01:09\", \"01:14\"],"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:52\", \"00:56\"], \"J\": [\"00:57\", \"01:02\"], \"M\": [\"00:42\", \"00:46\"],"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:47\", \"00:51\"], \"O\": [\"00:34\", \"00:37\"], \"N\": [\"00:38\", \"00:41\"],"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:26\", \"00:29\"], \"P\": [\"00:30\", \"00:33\"], \"S\": [\"00:19\", \"00:21\"],"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:22\", \"00:25\"], \"U\": [\"00:12\", \"00:14\"], \"T\": [\"00:15\", \"00:18\"],"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:06\", \"00:08\"], \"V\": [\"00:09\", \"00:11\"], \"Y\": [\"00:00\", \"00:02\"],"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"X\": [\"00:03\", \"00:05\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"X\": {\"A\": [\"02:54\", \"05:54\"], \"C\": [\"01:44\", \"02:05\"], \"B\": [\"02:06\", \"02:53\"],"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:27\", \"01:34\"], \"D\": [\"01:35\", \"01:43\"], \"G\": [\"01:12\", \"01:18\"],"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:19\", \"01:26\"], \"I\": [\"01:00\", \"01:05\"], \"H\": [\"01:06\", \"01:11\"],"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:49\", \"00:53\"], \"J\": [\"00:54\", \"00:59\"], \"M\": [\"00:40\", \"00:43\"],"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:44\", \"00:48\"], \"O\": [\"00:31\", \"00:34\"], \"N\": [\"00:35\", \"00:39\"],"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:23\", \"00:26\"], \"P\": [\"00:27\", \"00:30\"], \"S\": [\"00:16\", \"00:18\"],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:19\", \"00:22\"], \"U\": [\"00:09\", \"00:11\"], \"T\": [\"00:12\", \"00:15\"],"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:03\", \"00:05\"], \"V\": [\"00:06\", \"00:08\"], \"Y\": [\"\", \"\"], \"X\": [\"00:00\", \"00:02\"],"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Z\": {\"A\": [\"03:00\", \"06:00\"], \"C\": [\"01:50\", \"02:11\"], \"B\": [\"02:12\", \"02:59\"],"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:32\", \"01:40\"], \"D\": [\"01:41\", \"01:49\"], \"G\": [\"01:18\", \"01:24\"],"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:25\", \"01:31\"], \"I\": [\"01:06\", \"01:11\"], \"H\": [\"01:12\", \"01:17\"],"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:55\", \"00:59\"], \"J\": [\"01:00\", \"01:05\"], \"M\": [\"00:45\", \"00:49\"],"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:50\", \"00:54\"], \"O\": [\"00:36\", \"00:40\"], \"N\": [\"00:41\", \"00:44\"],"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:29\", \"00:31\"], \"P\": [\"00:32\", \"00:35\"], \"S\": [\"00:21\", \"00:24\"],"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:25\", \"00:28\"], \"U\": [\"00:15\", \"00:17\"], \"T\": [\"00:18\", \"00:20\"],"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:09\", \"00:11\"], \"V\": [\"00:12\", \"00:14\"], \"Y\": [\"00:03\", \"00:05\"],"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"X\": [\"00:06\", \"00:08\"], \"Z\": [\"00:00\", \"00:02\"]},"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"P\": {\"P\": [\"00:00\", \"00:03\"], \"O\": [\"00:04\", \"00:07\"], \"N\": [\"00:08\", \"00:12\"],"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"M\": [\"00:13\", \"00:16\"], \"L\": [\"00:17\", \"00:21\"], \"K\": [\"00:22\", \"00:27\"],"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"00:28\", \"00:32\"], \"I\": [\"00:33\", \"00:38\"], \"H\": [\"00:39\", \"00:45\"],"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"G\": [\"00:46\", \"00:51\"], \"F\": [\"00:52\", \"00:59\"], \"E\": [\"01:00\", \"01:07\"],"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"D\": [\"01:08\", \"01:16\"], \"C\": [\"01:17\", \"01:38\"], \"B\": [\"01:39\", \"02:27\"],"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"A\": [\"02:28\", \"05:28\"], \"Q\": [\"\", \"\"], \"R\": [\"\", \"\"], \"S\": [\"\", \"\"],"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"U\": [\"\", \"\"], \"V\": [\"\", \"\"], \"W\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"Z\": [\"\", \"\"]}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 180
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003cVBox layoutX\u003d\"11.0\" layoutY\u003d\"4.0\" prefHeight\u003d\"393.0\" prefWidth\u003d\"579.0\" style\u003d\"-fx-background-color: #FFFFFF;\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    \u003cLabel fx:id\u003d\"diveLocation\" style\u003d\"-fx-font-size: 45\" text\u003d\"Dive Name\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cFont size\u003d\"45.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    \u003cLabel fx:id\u003d\"dateTime\" prefHeight\u003d\"17.0\" prefWidth\u003d\"315.0\" text\u003d\"Date Time\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cLabel fx:id\u003d\"diveDepth\" text\u003d\"You Dove To _m\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cVBox prefHeight\u003d\"100.0\" prefWidth\u003d\"199.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            \u003cLabel fx:id\u003d\"pgStart\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" style\u003d\"-fx-font-size: 52\" text\u003d\"A\" textAlignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "              \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u003cFont size\u003d\"52.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "              \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            \u003cLabel text\u003d\"Starting Pressure Group\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            \u003cLabel fx:id\u003d\"startTime\" text\u003d\"Dive Started:\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cVBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "          \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            \u003cLabel fx:id\u003d\"pgEnd\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" style\u003d\"-fx-font-size: 52\" text\u003d\"B\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "              \u003cfont\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u003cFont size\u003d\"52.0\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "              \u003c/font\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            \u003cLabel text\u003d\"Ending Pressure Group\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tttaus"
        },
        "content": "            \u003cLabel fx:id\u003d\"endTime\" text\u003d\"Dive Ended:\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "          \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    \u003cLabel text\u003d\" \"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cLabel fx:id\u003d\"safetyStop\" text\u003d\"Safety Stop:\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tttaus": 9,
      "-": 3,
      "arjo129": 35
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    background-color: #FFFFFF; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".thisIsGreenA{"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    -fx-text-fill: #48e234;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tttaus"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".thisIsGreen{"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    -fx-text-fill: GREEN;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "tttaus"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".thisIsOrangeP{"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    -fx-text-fill: #ea8c19;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tttaus"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".thisIsOrange{"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    -fx-text-fill: #ff6600;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tttaus"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tttaus"
        },
        "content": ".thisIsRed{"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    -fx-text-fill: #ff0000;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tttaus"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "shuanang"
        },
        "content": "#filterField, #diveSessionListPanel, #diveSessionWebpage {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 20,
      "-": 349,
      "shuanang": 1,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/resources/view/DiveListCards.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "      \u003cLabel fx:id\u003d\"depth\" styleClass\u003d\"cell_small_label\"  /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateStart\" alignment\u003d\"BASELINE_LEFT\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tttaus"
        },
        "content": "      \u003cLabel fx:id\u003d\"dateEnd\" alignment\u003d\"BASELINE_LEFT\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tttaus": 2,
      "-": 30,
      "arjo129": 2
    }
  },
  {
    "path": "src/main/resources/view/DiveListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tttaus"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tttaus"
        },
        "content": "  \u003cLabel fx:id\u003d\"dateId\" alignment\u003d\"BASELINE_LEFT\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "  \u003cListView fx:id\u003d\"diveListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "tttaus": 2,
      "-": 7,
      "arjo129": 1
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tttaus"
        },
        "content": "    \u003cImage url\u003d\"@/images/newLogo_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "          \u003cVBox fx:id\u003d\"diveSessionList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            \u003cStackPane fx:id\u003d\"diveListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "tttaus": 1,
      "-": 65,
      "shuanang": 1,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/data/XmlSerializableDiveLogTest/invalidDiveDiveLogBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003cdivelog\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdives\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cstartTime\u003e0700\u003c/startTime\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        \u003csafetyStop\u003e0745\u003c/safetyStop\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        \u003cendTime\u003e0800\u003c/endTime\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cpressureGroupAtBeginning\u003eOtototo\u003c/pressureGroupAtBeginning\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        \u003cpressureGroupAtEnd\u003eT\u003c/pressureGroupAtEnd\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003clocation\u003eBali\u003c/location\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        \u003cdepthProfile\u003e16.0\u003c/depthProfile\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003c/dives\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c/divelog\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "shuanang": 4,
      "arjo129": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableDiveLogTest/typicalDivesDiveLogBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003cdivelog\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdives\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cdateStart\u003e01012019\u003c/dateStart\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cstartTime\u003e0700\u003c/startTime\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003csafetyStop\u003e0745\u003c/safetyStop\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cdateEnd\u003e01012019\u003c/dateEnd\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cendTime\u003e0800\u003c/endTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cpressureGroupAtBeginning\u003eA\u003c/pressureGroupAtBeginning\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        \u003cpressureGroupAtEnd\u003eL\u003c/pressureGroupAtEnd\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003clocation\u003eBali\u003c/location\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cdepthProfile\u003e5.0\u003c/depthProfile\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003ctimezone\u003e+8\u003c/timezone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003c/dives\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdives\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cdateStart\u003e01012019\u003c/dateStart\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cstartTime\u003e0700\u003c/startTime\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003csafetyStop\u003e0745\u003c/safetyStop\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cdateEnd\u003e01012019\u003c/dateEnd\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cendTime\u003e0800\u003c/endTime\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cpressureGroupAtBeginning\u003eF\u003c/pressureGroupAtBeginning\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cpressureGroupAtEnd\u003eG\u003c/pressureGroupAtEnd\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003clocation\u003eTioman\u003c/location\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cdepthProfile\u003e5.0\u003c/depthProfile\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003ctimezone\u003e+8\u003c/timezone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003c/dives\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c/divelog\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "shuanang": 1,
      "arjo129": 25
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidDiveField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "\u003c!-- DiveSession with an invalid depth field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003cdives\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cstartTime\u003e0700\u003c/startTime\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003csafetyStop\u003e0945\u003c/safetyStop\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cendTime\u003e1000\u003c/endTime\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cpressureGroupAtBeginning\u003eA\u003c/pressureGroupAtBeginning\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cpressureGroupAtEnd\u003eR\u003c/pressureGroupAtEnd\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003clocation\u003eBali\u003c/location\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdepthProfile\u003eABCF\u003c/depthProfile\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c/dives\u003e"
      }
    ],
    "authorContributionMap": {
      "shuanang": 1,
      "arjo129": 10
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingDiveField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c!-- Dive with missing startTime field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003cdives\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003csafetyStop\u003e0945\u003c/safetyStop\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cendTime\u003e1000\u003c/endTime\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cpressureGroupAtBeginning\u003eA\u003c/pressureGroupAtBeginning\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cpressureGroupAtEnd\u003eR\u003c/pressureGroupAtEnd\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003clocation\u003eBali\u003c/location\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdepthProfile\u003e10.0\u003c/depthProfile\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c/dives\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "arjo129": 12
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validDive.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003cdives\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdateStart\u003e01012018\u003c/dateStart\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cstartTime\u003e0700\u003c/startTime\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003csafetyStop\u003e0745\u003c/safetyStop\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdateEnd\u003e01012018\u003c/dateEnd\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cendTime\u003e0800\u003c/endTime\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cpressureGroupAtBeginning\u003eA\u003c/pressureGroupAtBeginning\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cpressureGroupAtEnd\u003eF\u003c/pressureGroupAtEnd\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003clocation\u003eBali\u003c/location\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdepthProfile\u003e5.0\u003c/depthProfile\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003ctimezone\u003e-8\u003c/timezone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c/dives\u003e"
      }
    ],
    "authorContributionMap": {
      "arjo129": 13
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validDiveLog.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003cdivelog\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003cdives\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cstartTime\u003e0700\u003c/startTime\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003csafetyStop\u003e0945\u003c/safetyStop\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cendTime\u003e1000\u003c/endTime\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cpressureGroupAtBeginning\u003eA\u003c/pressureGroupAtBeginning\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cpressureGroupAtEnd\u003eR\u003c/pressureGroupAtEnd\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003clocation\u003eBali\u003c/location\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        \u003cdepthProfile\u003e10.0\u003c/depthProfile\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    \u003c/dives\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c/divelog\u003e"
      }
    ],
    "authorContributionMap": {
      "arjo129": 12
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_DIVE_DEPTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_DIVE_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_SAFETY_STOP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String LOCATION_ID \u003d \"#diveLocation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String DEPTH_FIELD_ID \u003d \"#diveDepth\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String PG_START_ID \u003d \"#pgStart\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String PG_END_ID \u003d \"#pgEnd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String START_ID \u003d \"#startTime\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String END_ID \u003d \"#endTime\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String SAFETY_STOP_ID \u003d \"#safetyStop\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label diveLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label diveDepth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label pgStart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label pgEnd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label safetyStop;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public BrowserPanelHandle(Node node) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        super(node);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLocation \u003d getChildNode(LOCATION_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveDepth \u003d getChildNode(DEPTH_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pgStart \u003d getChildNode(PG_START_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pgEnd \u003d getChildNode(PG_END_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        startTime \u003d getChildNode(START_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        endTime \u003d getChildNode(END_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        safetyStop \u003d getChildNode(SAFETY_STOP_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof DiveSession)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession dive \u003d (DiveSession) obj;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String location \u003d String.format(FORMAT_DIVE_LOCATION, dive.getLocation().getLocationName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!location.equals(diveLocation.getText())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String depth \u003d String.format(FORMAT_DIVE_DEPTH, dive.getDepthProfile().getDepth());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!depth.equals(diveDepth.getText())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String startingPG \u003d dive.getPressureGroupAtBeginning().getPressureGroup();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!startingPG.equals(pgStart.getText())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String endingPG \u003d dive.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!endingPG.equals(pgEnd.getText())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String timeStart \u003d String.format(FORMAT_START_TIME, dive.getStart().getTimeString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!timeStart.equals(startTime.getText())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String timeEnd \u003d String.format(FORMAT_END_TIME, dive.getEnd().getTimeString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!timeEnd.equals(endTime.getText())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String timeSafetyStop \u003d String.format(FORMAT_SAFETY_STOP, dive.getSafetyStop().getTimeString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!timeSafetyStop.equals(safetyStop.getText())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "arjo129": 76
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DiveListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Provides a handle for {@code DiveListPanel} containing the list of {@code DiveSessionCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveListPanelHandle extends NodeHandle\u003cListView\u003cDiveSession\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static final String DIVE_SESSION_LIST_VIEW_ID \u003d \"#diveListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Optional\u003cDiveSession\u003e lastRememberedSelectedDiveCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public DiveListPanelHandle(ListView\u003cDiveSession\u003e diveSessionListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        super(diveSessionListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns a handle to the selected {@code DiveSessionCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        List\u003cDiveSession\u003e selectedDiveSessionList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (selectedDiveSessionList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            throw new AssertionError(\"Dive session list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .map(DiveSessionCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedDiveSessionList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        List\u003cDiveSession\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Navigates the listview to display {@code DiveSession}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void navigateToCard(DiveSession diveSession) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (!getRootNode().getItems().contains(diveSession)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            throw new IllegalArgumentException(\"Dive session does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            getRootNode().scrollTo(diveSession);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Selects the {@code DiveSessionCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns the dive card handle of a dive associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionCardHandle getDiveCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .map(DiveSessionCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .filter(handle -\u003e handle.equals(getDive(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private DiveSession getDive(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Remembers the selected {@code DiveSessionCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void rememberSelectedDiveCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        List\u003cDiveSession\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            lastRememberedSelectedDiveCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            lastRememberedSelectedDiveCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns true if the selected {@code DiveSessionCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code rememberSelectedDiveCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public boolean isSelectedDiveSessionCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        List\u003cDiveSession\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return lastRememberedSelectedDiveCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return !lastRememberedSelectedDiveCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    || !lastRememberedSelectedDiveCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "shuanang": 10,
      "arjo129": 28
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DiveSessionCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.DiveSessionCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Provides a handle to a dive card in the dive list panel."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveSessionCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String DEPTH_FIELD_ID \u003d \"#depth\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Label depth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        depth \u003d getChildNode(DEPTH_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getDepth() { return depth.getText(); }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    //@@author shuanang"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns true if this handle contains {@code dive}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public boolean equals(DiveSession dive) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return (getName().equals(DiveSessionCard.DIVE_PREFIX + dive.getLocation().getLocationName()))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                \u0026\u0026 (getDepth().equals(dive.getDepthProfile().getFormattedString()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 9,
      "arjo129": 36
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveListPanelHandle diveListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        diveListPanel \u003d new DiveListPanelHandle(getChildNode(DiveListPanelHandle.DIVE_SESSION_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveListPanelHandle getDiveListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "shuanang": 1,
      "arjo129": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/AppParametersTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.XmlSerializableDiveLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    protected Supplier\u003cReadOnlyDiveLog\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyDiveLog\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            createDataFileWithData(new XmlSerializableDiveLog(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        userPrefs.setDiveLogBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns a defensive copy of the divelog book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public DiveLog readStorageDiveLog() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new DiveLog(storage.readDiveLog().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new AssertionError(\"Data is not in the DiveLog format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return storage.getDiveLogFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model copy \u003d new ModelManager((model.getDiveLog()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredDiveList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "shuanang": 2,
      "arjo129": 23
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : DiveLog App\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "shuanang": 1,
      "arjo129": 2
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/core/VersionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Version.fromString(\"This is not a version string\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                                              int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        final Index fifthDiveSessionIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertTrue(fifthDiveSessionIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertTrue(fifthDiveSessionIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertTrue(fifthDiveSessionIndex.equals(fifthDiveSessionIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertFalse(fifthDiveSessionIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertFalse(fifthDiveSessionIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertFalse(fifthDiveSessionIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 84,
      "shuanang": 7,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/CollectionUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(objects);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            requireAllNonNull(collection);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NullPointerException was not thrown.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behavior"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 115,
      "arjo129": 2
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/CompareUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class CompareUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void checkTimeDifference_sameDay_calculationTest() throws Exception {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long normalTime \u003d CompareUtil.checkTimeDifference(\"1900\", \"2010\", \"25102018\", \"25102018\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long date2 \u003d 70;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(normalTime, date2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        normalTime \u003d CompareUtil.checkTimeDifference(\"0000\", \"2359\", \"25102018\", \"25102018\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        date2 \u003d 1439;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(normalTime, date2);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void checkTimeDifference_diffDay_calculationTest1() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long normalTime \u003d CompareUtil.checkTimeDifference(\"2359\", \"0030\", \"25102018\", \"26102018\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long date2 \u003d 31;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(normalTime, date2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        normalTime \u003d CompareUtil.checkTimeDifference(\"0000\", \"2359\", \"25102018\", \"26102018\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        date2 \u003d 1439 + 1440;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(normalTime, date2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void convertTimeToLocal_test() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long answer \u003d CompareUtil.convertTimeToLocal(\"0500\", \"25102018\", 5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long l \u003d Long.parseLong(\"251020181000\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(answer, l);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void convertTimeToLocal_diffDay_test() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long answer \u003d CompareUtil.convertTimeToLocal(\"2359\", \"25102018\", 5);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long l \u003d Long.parseLong(\"261020180459\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(answer, l);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void convertTimeToLocal_negative_test() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long answer \u003d CompareUtil.convertTimeToLocal(\"2359\", \"25102018\", -10);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long l \u003d Long.parseLong(\"251020181359\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(answer, l);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    public void getCurrentDateTime_Test() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //        long expected \u003d (long) CompareUtil.getCurrentDateTime();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //        long answer \u003d Long.parseLong(\"251020180043\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //        assertEquals(expected,answer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    public void getCurrentDateTimeLong(){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //        Instant.now(Clock.fixed("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //                Instant.parse(\"2018-08-22T10:00:00Z\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //                ZoneOffset.UTC));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void readTimeFromLong_test() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long datetime \u003d Long.parseLong(\"251020180510\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String time1 \u003d CompareUtil.readTimeFromLong(datetime);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(time1, \"0510\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public void readDateFromLong_test() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long datetime \u003d Long.parseLong(\"051020180510\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String time1 \u003d CompareUtil.readDateFromLong(datetime);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        assertEquals(time1, \"05102018\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 77,
      "shuanang": 2
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/ConfigUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        read(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        read(\"NotJsonFormatConfig.json\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(\"Typical App Title\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        save(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        save(new Config(), null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setAppTitle(\"Updated Title\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 128,
      "arjo129": 3
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/FileUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "arjo129": 2
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/JsonUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "arjo129": 3
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"aaa BBB\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter should be a single word\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 158,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/UnitsUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class UnitsUtilTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void testFeetToMeters() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(UnitsUtil.feetToMeters(1),  0.3048f);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void testMetersToFeet() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(UnitsUtil.metersToFeet(1), 1/0.3048f);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 16
    }
  },
  {
    "path": "src/test/java/seedu/divelog/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.XmlAdaptedDiveSession;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.storage.XmlSerializableDiveLog;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveLogBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveSessionBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validDiveLog.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Path MISSING_DIVE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingDiveField.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Path VALID_DIVE_FILE \u003d TEST_DATA_FOLDER.resolve(\"validDive.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_START \u003d \"0700\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_END \u003d \"0800\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_SAFETY_STOP \u003d \"0745\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_PRESSURE_GROUP_START \u003d \"A\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_PRESSURE_GROUP_END \u003d \"F\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_DATE \u003d \"01012018\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_TIMEZONE \u003d \"-8\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"Bali\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final float VALID_DEPTH \u003d 5;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlUtil.getDataFromFile(null, DiveLog.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, DiveLog.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, DiveLog.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //        DiveLog dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableDiveLog.class).toModelType();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //        assertEquals(1, dataFromFile.getDiveList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void xmlAdaptedDiveFromFile_fileWithValidDive_validResult() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlAdaptedDiveSession actualDive \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                VALID_DIVE_FILE, XmlAdaptedDiveSessionWithRootElement.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlAdaptedDiveSession expectedDive \u003d new XmlAdaptedDiveSession("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                VALID_DATE, VALID_START, VALID_SAFETY_STOP, VALID_DATE, VALID_END,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                VALID_PRESSURE_GROUP_START, VALID_PRESSURE_GROUP_END,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                VALID_LOCATION, VALID_DEPTH, VALID_TIMEZONE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(expectedDive, actualDive);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlUtil.saveDataToFile(null, new DiveLog());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new DiveLog());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlSerializableDiveLog dataToWrite \u003d new XmlSerializableDiveLog(new DiveLog());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlSerializableDiveLog dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableDiveLog.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLogBuilder builder \u003d new DiveLogBuilder(new DiveLog());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dataToWrite \u003d new XmlSerializableDiveLog("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                builder.withDive(new DiveSessionBuilder().build()).build());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableDiveLog.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedDiveSession}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @XmlRootElement(name \u003d \"dives\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static class XmlAdaptedDiveSessionWithRootElement extends XmlAdaptedDiveSession {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 5,
      "-": 83,
      "arjo129": 42
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        final String invalidCommand \u003d \"adds Bob\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_defensiveCopy_backingListUnmodified() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(emptyPointer, pointer);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected NoSuchElementException was not thrown.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 174,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void getFilteredDiveSessionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        logic.getFilteredDiveList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *      - {@code expectedModel}\u0027s divelog book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 108,
      "shuanang": 1,
      "arjo129": 15
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveSessionBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void execute_newDive_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession validDive \u003d new DiveSessionBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.addDiveSession(validDive);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandSuccess(new AddCommand(validDive), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validDive), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "arjo129": 18
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.exceptions.DiveNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveSessionBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void constructor_nullDiveSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void execute_diveSessionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ModelStubAcceptingDiveSessionAdded modelStub \u003d new ModelStubAcceptingDiveSessionAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession validDive \u003d new DiveSessionBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validDive).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validDive), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(Arrays.asList(validDive), modelStub.diveAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession nightDive \u003d new DiveSessionBuilder().withStart(\"2100\").withEnd(\"2200\").withSafetyStop(\"2145\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession morningDive \u003d new DiveSessionBuilder().withStart(\"0800\").withEnd(\"0900\").withSafetyStop(\"0845\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        AddCommand addNightDiveCommand \u003d new AddCommand(nightDive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        AddCommand addMorningDiveCommand \u003d new AddCommand(morningDive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(addNightDiveCommand.equals(addNightDiveCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        AddCommand addNightDiveCommandCopy \u003d new AddCommand(nightDive);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(addNightDiveCommand.equals(addNightDiveCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(addNightDiveCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(addNightDiveCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // different diveSession -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(addNightDiveCommand.equals(addMorningDiveCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void addDiveSession(DiveSession diveSession) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void resetData(ReadOnlyDiveLog newData) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public ReadOnlyDiveLog getDiveLog() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void deleteDiveSession(DiveSession target) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void updateDiveSession(DiveSession target, DiveSession editedDiveSession) throws DiveNotFoundException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public ObservableList\u003cDiveSession\u003e getFilteredDiveList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void updateFilteredDiveList(Predicate\u003cDiveSession\u003e predicate) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public boolean canUndoDiveLog() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public boolean canRedoDiveLog() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void undoDiveLog() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void redoDiveLog() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void commitDiveLog() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public boolean getPlanningMode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void setPlanningMode() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void plannerCountPlus() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void plannerCountMinus() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public int getPlannerCount() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * A Model stub that contains a single diveSession."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private class ModelStubWithDive extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        private final DiveSession diveSession;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ModelStubWithDive(DiveSession diveSession) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            requireNonNull(diveSession);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            this.diveSession \u003d diveSession;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * A Model stub that always accept the diveSession being added."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private class ModelStubAcceptingDiveSessionAdded extends ModelStub {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        final ArrayList\u003cDiveSession\u003e diveAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void addDiveSession(DiveSession diveSession) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            requireNonNull(diveSession);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            diveAdded.add(diveSession);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public void commitDiveLog() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public ReadOnlyDiveLog getDiveLog() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new DiveLog();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        public ObservableList\u003cDiveSession\u003e getFilteredDiveList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return FXCollections.observableArrayList(diveAdded);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 27,
      "-": 124,
      "shuanang": 11,
      "arjo129": 49
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void execute_emptyDiveLogBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void execute_nonEmptyDiveLogBook_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.resetData(new DiveLog());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "shuanang": 2,
      "arjo129": 13
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.LocationContainsKeywordPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EditDiveDescriptorBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String VALID_LOCATION_TIOMAN \u003d \"Tioman\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String VALID_LOCATION_BALI \u003d \"Bali\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String VALID_START \u003d \"0700\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String VALID_SAFETY_STOP \u003d \"0745\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String VALID_END \u003d \"0800\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String VALID_PG_START \u003d \"A\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String VALID_PG_END \u003d \"F\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final float VALID_DEPTH \u003d 5;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final EditCommand.EditDiveDescriptor DESC_DAY_BALI;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final EditCommand.EditDiveDescriptor DESC_DAY_TIOMAN;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DESC_DAY_BALI \u003d new EditDiveDescriptorBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withLocation(VALID_LOCATION_BALI)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withStart(VALID_START)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withSafetyStop(VALID_SAFETY_STOP)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withEnd(VALID_END)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withDepth(VALID_DEPTH)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withStartingPressureGroup(VALID_PG_START)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withEndingPressureGroup(VALID_PG_END)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DESC_DAY_TIOMAN \u003d new EditDiveDescriptorBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withLocation(VALID_LOCATION_TIOMAN)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withStart(VALID_START)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withSafetyStop(VALID_SAFETY_STOP)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withEnd(VALID_END)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withDepth(VALID_DEPTH)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withStartingPressureGroup(VALID_PG_START)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .withEndingPressureGroup(VALID_PG_END)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                                            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * - the divelog book and the filtered dive session list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog expectedDiveLog \u003d new DiveLog(actualModel.getDiveLog());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        List\u003cDiveSession\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredDiveList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            assertEquals(expectedDiveLog, actualModel.getDiveLog());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredDiveList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the dive at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code model}\u0027s divelog book."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static void showDiveAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredDiveList().size());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession diveSession \u003d model.getFilteredDiveList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        final String[] splitName \u003d diveSession.getLocation().getLocationName().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.updateFilteredDiveList(new LocationContainsKeywordPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(1, model.getFilteredDiveList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Deletes the first dive in {@code model}\u0027s filtered list from {@code model}\u0027s divelog book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static void deleteFirstDive(Model model) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession firstDive \u003d model.getFilteredDiveList().get(0);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            model.deleteDiveSession(firstDive);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.commitDiveLog();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 74,
      "shuanang": 3,
      "arjo129": 58
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.showDiveAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_SECOND_DIVE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession diveToDelete \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_DIVE_SESSION_SUCCESS, diveToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            expectedModel.deleteDiveSession(diveToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDiveList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession diveSessionToDelete \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_DIVE_SESSION_SUCCESS, diveSessionToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            expectedModel.deleteDiveSession(diveSessionToDelete);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        showNoDiveSession(expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DIVE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of divelog book list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDiveLog().getDiveList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession diveSessionToDelete \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        expectedModel.deleteDiveSession(diveSessionToDelete);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // delete -\u003e first dive session deleted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // undo -\u003e reverts divelog back to previous state and filtered dive session list to show all dive sessions"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // redo -\u003e same first dive session deleted again"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.redoDiveLog();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDiveList().size() + 1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // execution failed -\u003e divelog book state not added into model"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // single divelog book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * 1. Deletes a {@code DiveSession} from a filtered list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted dive session in the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the dive session object regardless of indexing."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameDiveSessionDeleted() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_SECOND_DIVE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession diveSessionToDelete \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        expectedModel.deleteDiveSession(diveSessionToDelete);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // delete -\u003e deletes second dive session in unfiltered dive session list / first dive in filtered dive list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // undo -\u003e reverts divelog back to previous state and filtered dive session list to show all dive sessions"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertNotEquals(diveSessionToDelete, model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // redo -\u003e deletes same second dive session in unfiltered dive session list"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.redoDiveLog();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_DIVE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // different dive session -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private void showNoDiveSession(Model model) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.updateFilteredDiveList(p -\u003e false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(model.getFilteredDiveList().isEmpty());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 104,
      "shuanang": 22,
      "arjo129": 59
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.DESC_DAY_BALI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.DESC_DAY_TIOMAN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.VALID_LOCATION_BALI;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.showDiveAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_SECOND_DIVE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand.EditDiveDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EditDiveDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveSessionBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession editedDive \u003d new DiveSessionBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor descriptor \u003d new EditDiveDescriptorBuilder(editedDive).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_DIVE, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DIVE_SUCCESS, editedDive);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DiveLog(model.getDiveLog()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            expectedModel.updateDiveSession(model.getFilteredDiveList().get(0), editedDive);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index indexLastDive \u003d Index.fromOneBased(model.getFilteredDiveList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession lastDive \u003d model.getFilteredDiveList().get(indexLastDive.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSessionBuilder diveInList \u003d new DiveSessionBuilder(lastDive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession editedDive \u003d diveInList.withLocation(VALID_LOCATION_BALI).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor descriptor \u003d new EditDiveDescriptorBuilder().withLocation(VALID_LOCATION_BALI).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastDive, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DIVE_SUCCESS, editedDive);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DiveLog(model.getDiveLog()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            expectedModel.updateDiveSession(lastDive, editedDive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_DIVE, new EditDiveDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession editedDive \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DIVE_SUCCESS, editedDive);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DiveLog(model.getDiveLog()), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession diveSessionInFilteredList \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession editedDive \u003d new DiveSessionBuilder(diveSessionInFilteredList).withLocation(VALID_LOCATION_BALI).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_DIVE,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                new EditDiveDescriptorBuilder().withLocation(VALID_LOCATION_BALI).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_DIVE_SUCCESS, editedDive);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DiveLog(model.getDiveLog()), new UserPrefs());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            expectedModel.updateDiveSession(model.getFilteredDiveList().get(0), editedDive);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void execute_invalidDiveIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDiveList().size() + 1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor descriptor \u003d new EditDiveDescriptorBuilder().withLocation(VALID_LOCATION_BALI).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * but smaller than size of divelog book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void execute_invalidDiveSessionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_DIVE;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of divelog book list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getDiveLog().getDiveList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                new EditDiveDescriptorBuilder().withLocation(VALID_LOCATION_BALI).build());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession editedDive \u003d new DiveSessionBuilder().build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession diveToEdit \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor descriptor \u003d new EditDiveDescriptorBuilder(editedDive).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_DIVE, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DiveLog(model.getDiveLog()), new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.updateDiveSession(diveToEdit, editedDive);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // edit -\u003e first dive session edited"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // undo -\u003e reverts divelog back to previous state and filtered dive session list to show all dive sessions"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // redo -\u003e same first dive session edited again"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.redoDiveLog();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredDiveList().size() + 1);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor descriptor \u003d new EditDiveDescriptorBuilder().withLocation(VALID_LOCATION_BALI).build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // execution failed -\u003e divelog book state not added into model"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // single divelog book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * 1. Edits a {@code Dive} from a filtered list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited dive in the"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the dive session object regardless of indexing."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * TODO: This test is problematic! FIX IT!"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameDiveEdited() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arjo129"
        },
        "content": "       /* DiveSession editedDive \u003d new DiveSessionBuilder().build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor descriptor \u003d new EditDiveDescriptorBuilder(editedDive).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_DIVE, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DiveLog(model.getDiveLog()), new UserPrefs());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_SECOND_DIVE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession diveToEdit \u003d model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.updateDiveSession(diveToEdit, editedDive);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.commitDiveLog();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // edit -\u003e edits second dive session in unfiltered dive session list / first dive in filtered divesession list"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // undo -\u003e reverts divelog back to previous state and filtered dive session list to show all dive sessions"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertNotEquals(model.getFilteredDiveList().get(INDEX_FIRST_DIVE.getZeroBased()), diveToEdit);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // redo -\u003e edits same second dive session in unfiltered dive session list"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.redoDiveLog();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);*/"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_DIVE, DESC_DAY_BALI);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor copyDescriptor \u003d new EditDiveDescriptor(DESC_DAY_BALI);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_DIVE, copyDescriptor);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_DIVE, DESC_DAY_BALI)));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_DIVE, DESC_DAY_TIOMAN)));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 117,
      "shuanang": 10,
      "arjo129": 109
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/EditDiveDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.DESC_DAY_BALI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.DESC_DAY_TIOMAN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand.EditDiveDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EditDiveDescriptorBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class EditDiveDescriptorTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor descriptorWithSameValues \u003d new EditDiveDescriptor(DESC_DAY_BALI);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(DESC_DAY_BALI.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(DESC_DAY_BALI.equals(DESC_DAY_BALI));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(DESC_DAY_BALI.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(DESC_DAY_BALI.equals(5));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(DESC_DAY_BALI.equals(DESC_DAY_TIOMAN));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "arjo129": 12
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/ExitCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d new ExitCommand().execute(model, commandHistory);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MESSAGE_EXIT_ACKNOWLEDGEMENT, result.feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "arjo129": 7
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_DIVE_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.LocationContainsKeywordPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        LocationContainsKeywordPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                new LocationContainsKeywordPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        LocationContainsKeywordPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                new LocationContainsKeywordPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // different dive session -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void execute_zeroKeywords_noDiveSessionFound() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_DIVE_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        LocationContainsKeywordPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.updateFilteredDiveList(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredDiveList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void execute_multipleKeywords_multipleDiveSessionsFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //TODO: REWRITE"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses {@code userInput} into a {@code LocationContainsKeywordPredicate}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private LocationContainsKeywordPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new LocationContainsKeywordPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "shuanang": 3,
      "arjo129": 23
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "arjo129": 8
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "arjo129": 5
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.showDiveAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "arjo129": 12
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.deleteFirstDive;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.undoDiveLog();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        model.undoDiveLog();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.redoDiveLog();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.redoDiveLog();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "arjo129": 22
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.showDiveAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_SECOND_DIVE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        Index lastDiveSessionIndex \u003d Index.fromOneBased(model.getFilteredDiveList().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertExecutionSuccess(lastDiveSessionIndex);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredDiveList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(expectedModel, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(model, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDiveAtIndex(expectedModel, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_DIVE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of divelog book list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getDiveLog().getDiveList().size());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_DIVE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // different dive session -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_DIVE_SESSION_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "shuanang": 4,
      "arjo129": 32
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.commands.CommandTestUtil.deleteFirstDive;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalDiveLog(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        deleteFirstDive(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.undoDiveLog();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "arjo129": 17
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import static seedu.divelog.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import static seedu.divelog.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import seedu.divelog.testutil.DiveSessionBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void parse_allFieldsPresent_success() throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //parser.parse(\" ds/04082018 ts/0700 de/04082018 te/0945 ss/0930 d/15 pg/A l/Sentosa tz/+8\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 5,
      "-": 26,
      "arjo129": 9
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/ArgumentTokenizerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 149,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "arjo129": 3
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_DIVE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "arjo129": 7
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/DiveLogParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.LocationContainsKeywordPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EditDiveDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveSessionBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveLogParserTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveLogParser parser \u003d new DiveLogParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession diveSession \u003d new DiveSessionBuilder().withPressureGroupAtEnd(\"m\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(DiveUtil.getAddCommand(diveSession));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new AddCommand(diveSession), command);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DIVE.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_DIVE), command);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession diveSession \u003d new DiveSessionBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand.EditDiveDescriptor descriptor \u003d new EditDiveDescriptorBuilder(diveSession).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                + INDEX_FIRST_DIVE.getOneBased() + \" \" + DiveUtil.getEditDiveDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_DIVE, descriptor), command);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new FindCommand(new LocationContainsKeywordPredicate(keywords)), command);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DIVE.getOneBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_DIVE), command);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "shuanang": 1,
      "arjo129": 35
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand.EditDiveDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseFailure(parser, \"-5\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseFailure(parser, \"0\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void parse_oneFieldSpecified_success() throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check each field individually*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check date start*/"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String command \u003d targetIndex.getOneBased() + \" ds/20122018\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditDiveDescriptor expectedDesc \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setDateStart(new OurDate(\"20122018\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand expected \u003d new EditCommand(targetIndex, expectedDesc);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check date ended*/"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        command \u003d targetIndex.getOneBased() + \" de/20122018\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc \u003d  new EditDiveDescriptor();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setDateEnd(new OurDate(\"20122018\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expected \u003d new EditCommand(targetIndex, expectedDesc);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check the time started*/"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        command \u003d targetIndex.getOneBased() + \" ts/2000\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setStart(new Time(\"2000\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expected \u003d new EditCommand(targetIndex,expectedDesc);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check the time ended*/"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        command \u003d targetIndex.getOneBased() + \" te/2020\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setEnd(new Time(\"2020\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expected \u003d new EditCommand(targetIndex, expectedDesc);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check the location*/"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        command \u003d targetIndex.getOneBased() + \" l/Great Barrier Reef\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setLocation(new Location(\"Great Barrier Reef\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expected \u003d new EditCommand(targetIndex, expectedDesc);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check depth*/"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        command \u003d targetIndex.getOneBased() + \" d/9.0\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setDepthProfile(new DepthProfile(9.0f));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expected \u003d new EditCommand(targetIndex, expectedDesc);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check initial pressure group*/"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        command \u003d targetIndex.getOneBased() + \" pg/A\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setPressureGroupAtBeginning(new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expected \u003d new EditCommand(targetIndex, expectedDesc);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*Check timezone*/"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        command \u003d targetIndex.getOneBased() + \" tz/+9\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        editCommand \u003d parser.parse(command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedDesc.setTimeZone(new TimeZone(\"+9\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expected \u003d new EditCommand(targetIndex, expectedDesc);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(editCommand, expected);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "arjo129": 80
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.LocationContainsKeywordPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                new FindCommand(new LocationContainsKeywordPredicate(Arrays.asList(\"Tioman\", \"Bali\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseSuccess(parser, \"Tioman Bali\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseSuccess(parser, \" \\n Tioman \\n \\t Bali  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "arjo129": 9
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import static seedu.divelog.logic.parser.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.ParserUtil.MESSAGE_INVALID_DEPTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/*import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.Collections;*/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "//import seedu.divelog.testutil.Assert;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(INDEX_FIRST_DIVE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(INDEX_FIRST_DIVE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void parseDepth_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //No white spaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new DepthProfile(1.0f), ParserUtil.parseDepth(\"1.0\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //Trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new DepthProfile(1.0f), ParserUtil.parseDepth(\" 1.0  \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void parseDepth_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_DEPTH);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ParserUtil.parseDepth(\"otototo MAMAMAMA\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//    /*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//    * Not yet completed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//    * @author Cjunx"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//    public void checkTimeformat_Test() throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        String args \u003d \"ds/25102018 ts/0800 (24Hr Format) de/2102018 \" +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                \"te/0900 ss/084 \" +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                \"d/15 pg/A pge/B l/Sentosa tz/5\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_PRESSURE_GROUP_END,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_LOCATION,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                        CliSyntax.PREFIX_TIMEZONE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_PRESSURE_GROUP_END,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                CliSyntax.PREFIX_LOCATION)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        ParserUtil.checkDateformat(argMultimap);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        //assert"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        ParserUtil.checkTimeZoneformat(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        //assert"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        ParserUtil.checkTimeformat(argMultimap);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//        //assert"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 8,
      "-": 34,
      "arjo129": 73
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_DIVE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "arjo129": 7
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/SetUnitsParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.enums.Units;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SetUnitsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class SetUnitsParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT,SetUnitsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void setUnitsParser_testNormalCasesOK() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        SetUnitsCommand expectedMeters \u003d new SetUnitsCommand(Units.METERS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        SetUnitsCommand expectedFeet \u003d new SetUnitsCommand(Units.FEET);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        SetUnitsCommandParser parser \u003d new SetUnitsCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseSuccess(parser, \"meters\", expectedMeters);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseSuccess(parser, \"feet\", expectedFeet);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void setUnitsParser_testNonsenseEnteredFails() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        SetUnitsCommandParser parser \u003d new SetUnitsCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertParseFailure(parser,\"0cd0e993\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 28
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/pressuregroup/PressureGroupLogicTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "package seedu.divelog.logic.pressuregroup;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.logic.pressuregroup.exceptions.LimitExceededException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "//@@author shuanang"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "public class PressureGroupLogicTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void computePressureGroupFirstDive_test() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pressureGroup \u003d PressureGroupLogic.computePressureGroupFirstDive(new DepthProfile(14),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                50);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), \"N\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        pressureGroup \u003d PressureGroupLogic.computePressureGroupFirstDive(new DepthProfile(1),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                219);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), \"Z\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        pressureGroup \u003d PressureGroupLogic.computePressureGroupFirstDive(new DepthProfile(21),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                10);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), \"C\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void computePressureGroup_test() throws JSONException, LimitExceededException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pressureGroup \u003d PressureGroupLogic.computePressureGroup(new DepthProfile(14),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                50, new PressureGroup(\"d\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), \"T\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        pressureGroup \u003d PressureGroupLogic.computePressureGroup(new DepthProfile(1),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                209, new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), \"Z\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        pressureGroup \u003d PressureGroupLogic.computePressureGroup(new DepthProfile(21),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                10, new PressureGroup(\"j\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), \"P\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void computePressureGroup_actualBottomTimeExceedsNoDecompressionLimitsThrowsException()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            throws LimitExceededException, JSONException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        thrown.expect(LimitExceededException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pressureGroup \u003d PressureGroupLogic.computePressureGroup(new DepthProfile(10),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                210, new PressureGroup(\"a\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void computePressureGroupAfterSurfaceInterval_test() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pressureGroup \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                PressureGroupLogic.computePressureGroupAfterSurfaceInterval(new PressureGroup(\"H\"), 27);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pressureGroup.getPressureGroup(), \"E\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void computeTimeToNextPg_stubTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroupLogicStub pressureGroupLogicStub \u003d new PressureGroupLogicStub();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToNextPg \u003d pressureGroupLogicStub.computeTimeToNextPg(new DiveSession(new OurDate(\"20102018\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"0916\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1045\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new OurDate(\"20102018\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1100\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"R\"), //104 minutes at 10m from Pressure Group A to R"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Location(\"Bali\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new DepthProfile(10.0f),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new TimeZone(\"+8\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(timeToNextPg, 8);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToNextPg1 \u003d pressureGroupLogicStub.computeTimeToNextPg(new DiveSession(new OurDate(\"19102018\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"0916\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1045\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new OurDate(\"19102018\"), //dive ended 1 day before and diver checks"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1100\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"R\"), //104 minutes at 10m from Pressure Group A to R"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Location(\"Bali\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new DepthProfile(10.0f),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new TimeZone(\"+8\")));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(timeToNextPg1, 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void computeTimeToMinPressureGroup_stubTest() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroupLogicStub pressureGroupLogicStub \u003d new PressureGroupLogicStub();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToMinPg \u003d pressureGroupLogicStub.computeTimeToMinPressureGroup(new DiveSession("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new OurDate(\"20102018\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"0916\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1045\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new OurDate(\"20102018\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1100\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"R\"), //104 minutes at 10m from Pressure Group A to R"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Location(\"Bali\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new DepthProfile(10.0f),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new TimeZone(\"+8\")));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(timeToMinPg, 95);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        float timeToMinPg1 \u003d pressureGroupLogicStub.computeTimeToNextPg(new DiveSession(new OurDate(\"19102018\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"0916\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1045\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new OurDate(\"19102018\"), //dive ended 1 day before and diver checks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Time(\"1100\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new PressureGroup(\"R\"), //104 minutes at 10m from Pressure Group A to R"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new Location(\"Bali\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new DepthProfile(10.0f),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                new TimeZone(\"+8\")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(timeToMinPg1, 0);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 122
    }
  },
  {
    "path": "src/test/java/seedu/divelog/model/DiveLogTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveLogTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveLog diveLog \u003d new DiveLog();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(Collections.emptyList(), diveLog.getDiveList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLog.resetData(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void resetData_withValidReadOnlyDiveLog_replacesData() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog newData \u003d getTypicalDiveLog();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLog.resetData(newData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(newData, diveLog);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void hasDiveSession_nullDiveSession_throwsNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLog.hasDive(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void getDiveSessionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLog.getDiveList().remove(0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "shuanang": 3,
      "arjo129": 11
    }
  },
  {
    "path": "src/test/java/seedu/divelog/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.model.Model.PREDICATE_SHOW_ALL_DIVES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_BALI;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_NIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.LocationContainsKeywordPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveLogBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void getFilteredDiveSessionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        modelManager.getFilteredDiveList().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog diveLog \u003d new DiveLogBuilder().withDive(DIVE_AT_BALI).withDive(DIVE_AT_NIGHT).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog differentDiveLog \u003d new DiveLog();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        modelManager \u003d new ModelManager(diveLog, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(diveLog, userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // different diveLog -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentDiveLog, userPrefs)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String[] keywords \u003d {\"Bali\"};"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        modelManager.updateFilteredDiveList(new LocationContainsKeywordPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(diveLog, userPrefs)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        modelManager.updateFilteredDiveList(PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        differentUserPrefs.setDiveLogBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(diveLog, differentUserPrefs)));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "shuanang": 4,
      "arjo129": 16
    }
  },
  {
    "path": "src/test/java/seedu/divelog/model/VersionedDiveLogTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_BALI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_NIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_TIOMAN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveLogBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class VersionedDiveLogTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final ReadOnlyDiveLog diveLogWithBali \u003d new DiveLogBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withDive(DIVE_AT_BALI)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final ReadOnlyDiveLog diveLogWithTioman \u003d new DiveLogBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withDive(DIVE_AT_TIOMAN)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private final ReadOnlyDiveLog diveLogWithCarl \u003d new DiveLogBuilder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withDive(DIVE_AT_NIGHT)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final ReadOnlyDiveLog emptyDiveLog \u003d new DiveLogBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void commit_singleDiveLog_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList(emptyDiveLog);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.commit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertDiveLogListStatus(versionedDiveLog,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Collections.singletonList(emptyDiveLog),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void commit_multipleDiveLogPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.commit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertDiveLogListStatus(versionedDiveLog,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Arrays.asList(emptyDiveLog, diveLogWithBali, diveLogWithTioman),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                diveLogWithTioman,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void commit_multipleDiveLogPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertDiveLogListStatus(versionedDiveLog,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Collections.singletonList(emptyDiveLog),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canUndo_multipleDiveLogPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(versionedDiveLog.canUndo());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canUndo_multipleDiveLogPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(versionedDiveLog.canUndo());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canUndo_singleDiveLog_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList(emptyDiveLog);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.canUndo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canUndo_multipleDiveLogPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.canUndo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canRedo_multipleDiveLogPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(versionedDiveLog.canRedo());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canRedo_multipleDiveLogPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(versionedDiveLog.canRedo());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canRedo_singleDiveLog_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList(emptyDiveLog);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.canRedo());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void canRedo_multipleDiveLogPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.canRedo());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void undo_multipleDiveLogPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.undo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertDiveLogListStatus(versionedDiveLog,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Collections.singletonList(emptyDiveLog),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                diveLogWithBali,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Collections.singletonList(diveLogWithTioman));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void undo_multipleDiveLogPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.undo();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertDiveLogListStatus(versionedDiveLog,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Arrays.asList(diveLogWithBali, diveLogWithTioman));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void undo_singleDiveLog_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList(emptyDiveLog);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertThrows(VersionedDiveLog.NoUndoableStateException.class, versionedDiveLog::undo);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void undo_multipleDiveLogPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertThrows(VersionedDiveLog.NoUndoableStateException.class, versionedDiveLog::undo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void redo_multipleDiveLogPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionversionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionversionedDiveLog, 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionversionedDiveLog.redo();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertDiveLogListStatus(versionversionedDiveLog,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Arrays.asList(emptyDiveLog, diveLogWithBali),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                diveLogWithTioman,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void redo_multipleDiveLogPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        versionedDiveLog.redo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertDiveLogListStatus(versionedDiveLog,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Collections.singletonList(emptyDiveLog),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                diveLogWithBali,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                Collections.singletonList(diveLogWithTioman));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void redo_singleDiveLog_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList(emptyDiveLog);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertThrows(VersionedDiveLog.NoRedoableStateException.class, versionedDiveLog::redo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void redo_multipleDiveLogPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                emptyDiveLog, diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertThrows(VersionedDiveLog.NoRedoableStateException.class, versionedDiveLog::redo);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d prepareDiveLogList(diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog copy \u003d prepareDiveLogList(diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(versionedDiveLog.equals(copy));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(versionedDiveLog.equals(versionedDiveLog));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.equals(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.equals(1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        VersionedDiveLog differentDiveLogList \u003d prepareDiveLogList(diveLogWithTioman, diveLogWithCarl);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertFalse(versionedDiveLog.equals(differentDiveLogList));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog differentCurrentStatePointer \u003d prepareDiveLogList("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                diveLogWithBali, diveLogWithTioman);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedDiveLog, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Asserts that {@code versionedDiveLog} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * states before {@code versionedDiveLog#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * and states after {@code versionedDiveLog#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void assertDiveLogListStatus(VersionedDiveLog versionedDiveLog,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                                         List\u003cReadOnlyDiveLog\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                                         ReadOnlyDiveLog expectedCurrentState,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                                         List\u003cReadOnlyDiveLog\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new DiveLog(versionedDiveLog), expectedCurrentState);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        while (versionedDiveLog.canUndo()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            versionedDiveLog.undo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        for (ReadOnlyDiveLog expectedDiveLog : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            assertEquals(expectedDiveLog, new DiveLog(versionedDiveLog));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            versionedDiveLog.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        for (ReadOnlyDiveLog expectedDiveLog : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            versionedDiveLog.redo();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            assertEquals(expectedDiveLog, new DiveLog(versionedDiveLog));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(versionedDiveLog.canRedo());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedDiveLog.undo());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Creates and returns a {@code VersionedDiveLog} with the {@code diveLogStates} added into it, and the"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code VersionedDiveLog#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param diveLogStates"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private VersionedDiveLog prepareDiveLogList(ReadOnlyDiveLog... diveLogStates) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(diveLogStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        VersionedDiveLog versionedDiveLog \u003d new VersionedDiveLog(diveLogStates[0]);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        for (int i \u003d 1; i \u003c diveLogStates.length; i++) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            versionedDiveLog.resetData(diveLogStates[i]);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            versionedDiveLog.commit();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return versionedDiveLog;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Shifts the {@code versionedDiveLog#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedDiveLog versionedDiveLog, int count) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            versionedDiveLog.undo();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 138,
      "shuanang": 8,
      "arjo129": 159
    }
  },
  {
    "path": "src/test/java/seedu/divelog/model/dive/DepthProfileTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DepthProfileTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 5
    }
  },
  {
    "path": "src/test/java/seedu/divelog/model/divetables/PadiDiveTableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.model.divetables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class PadiDiveTableTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void getSurfaceTable_canRead() throws JSONException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        JSONArray arr \u003d padiDiveTable.getSurfaceTable(new PressureGroup(\"A\"), new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.get(0).toString(), \"00:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.get(1).toString(), \"03:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void getSurfaceTable_canCalculateDivePressure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PressureGroup pressureGroup \u003d new PressureGroup(\"c\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(padiDiveTable.fromSurfaceInterval(pressureGroup, 22.0f), new PressureGroup(\"b\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void depthToPressuregroup_canRead() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PressureGroup pg \u003d padiDiveTable.depthToPg(new DepthProfile(10), 122);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(pg.getPressureGroup(), \"T\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void depthToTimes_canRead() throws JSONException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        JSONArray arr \u003d padiDiveTable.depthToTimes(new DepthProfile(10), new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.getInt(0), 10);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.getInt(1), 209);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_emptyStringThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_tooManyDigitsThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"000:09\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_tooManyMinutesThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"00:090\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_tooManyColonsThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"00:00:00\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_lettersThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"AA:00\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_correctConversion() throws InvalidTimeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(padiDiveTable.timeToMinutes(\"12:12\"), 732);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 91
    }
  },
  {
    "path": "src/test/java/seedu/divelog/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        userPrefs.setDiveLogBookFilePath(Paths.get(\"addressbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 128,
      "shuanang": 1,
      "arjo129": 5
    }
  },
  {
    "path": "src/test/java/seedu/divelog/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.model.DiveLogChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        XmlDiveLogStorage diveLogStorage \u003d new XmlDiveLogStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        storageManager \u003d new StorageManager(diveLogStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void diveLogReadSave() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "         * {@link XmlDiveLogStorage} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlDiveLogStorageTest} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog original \u003d getTypicalDiveLog();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        storageManager.saveDiveLog(original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ReadOnlyDiveLog retrieved \u003d storageManager.readDiveLog().get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(original, new DiveLog(retrieved));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void getDiveLogFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertNotNull(storageManager.getDiveLogFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void handleDiveLogChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlDiveLogStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        storage.handleDiveLogChangedEvent(new DiveLogChangedEvent(new DiveLog()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    class XmlDiveLogStorageExceptionThrowingStub extends XmlDiveLogStorage {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        public XmlDiveLogStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        public void saveDiveLog(ReadOnlyDiveLog diveLog, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "shuanang": 7,
      "arjo129": 19
    }
  },
  {
    "path": "src/test/java/seedu/divelog/storage/XmlAdaptedDiveSessionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.storage.XmlAdaptedDiveSession.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_BALI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.Assert;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class XmlAdaptedDiveSessionTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_START \u003d \"0700\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_END \u003d \"1000\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_SAFETY_STOP \u003d \"0945\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_PRESSURE_GROUP_START \u003d \"A\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_PRESSURE_GROUP_END \u003d \"R\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"Bali\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void toModelType_validDiveSessionDetails_returnsDiveSession() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlAdaptedDiveSession dive \u003d new XmlAdaptedDiveSession(DIVE_AT_BALI);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(DIVE_AT_BALI, dive.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "shuanang": 1,
      "arjo129": 15
    }
  },
  {
    "path": "src/test/java/seedu/divelog/storage/XmlDiveLogStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_BALI;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.DIVE_AT_NIGHT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.getTypicalDiveLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class XmlDiveLogStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlDiveLogStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void readDiveLog_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        readDiveLog(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private java.util.Optional\u003cReadOnlyDiveLog\u003e readDiveLog(String filePath) throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new XmlDiveLogStorage(Paths.get(filePath)).readDiveLog(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(readDiveLog(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        readDiveLog(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void readDiveLog_invalidDiveLog_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //readDiveLog(\"invalidDiveDiveLogBook.xml\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void readDiveLog_invalidAndValidDiveLog_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        readDiveLog(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void readAndSaveDiveLog_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempDiveLog.xml\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog original \u003d getTypicalDiveLog();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        XmlDiveLogStorage xmlDiveLogStorage \u003d new XmlDiveLogStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        xmlDiveLogStorage.saveDiveLog(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        ReadOnlyDiveLog readBack \u003d xmlDiveLogStorage.readDiveLog(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(original, new DiveLog(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        original.addDive(DIVE_AT_BALI);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        xmlDiveLogStorage.saveDiveLog(original, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        readBack \u003d xmlDiveLogStorage.readDiveLog(filePath).get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(original, new DiveLog(readBack));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        original.addDive(DIVE_AT_NIGHT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        xmlDiveLogStorage.saveDiveLog(original); //file path not specified"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        readBack \u003d xmlDiveLogStorage.readDiveLog().get(); //file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(original, new DiveLog(readBack));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void saveDiveLog_nullDiveLog_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        saveDiveLog(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Saves {@code diveLog} at the specified {@code filePath}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private void saveDiveLog(ReadOnlyDiveLog diveLog, String filePath) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            new XmlDiveLogStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                    .saveDiveLog(diveLog, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void saveDiveLog_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        saveDiveLog(new DiveLog(), null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "shuanang": 14,
      "arjo129": 29
    }
  },
  {
    "path": "src/test/java/seedu/divelog/storage/XmlSerializableDiveLogTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.TypicalDiveSessions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class XmlSerializableDiveLogTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableDiveLogTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private static final Path TYPICAL_DIVES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalDivesDiveLogBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private static final Path INVALID_DIVES_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidDiveDiveLogBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void toModelType_typicalDiveSessionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlSerializableDiveLog dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_DIVES_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                XmlSerializableDiveLog.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog diveLogFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveLog typicalDiveSessionsDiveLog \u003d TypicalDiveSessions.getTypicalDiveLog();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(diveLogFromFile, typicalDiveSessionsDiveLog);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void toModelType_invalidDiveSessionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        XmlSerializableDiveLog dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_DIVES_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                XmlSerializableDiveLog.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "shuanang": 6,
      "arjo129": 12
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/Assert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expected} Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expected, VoidCallable callable) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expected, null, callable);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code callable} throws the {@code expectedException} and the {@code expectedMessage}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable)} instead."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see assertThrows(Class\u003c? extends Throwable\u003e, VoidCallable}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedException, String expectedMessage,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                                    VoidCallable callable) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            callable.call();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable actualException) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            String errorMessage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!actualException.getClass().isAssignableFrom(expectedException)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format(\"Expected exception thrown: %s, actual: %s\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        expectedException.getName(), actualException.getClass().getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            } else if (expectedMessage !\u003d null \u0026\u0026 !expectedMessage.equals(actualException.getMessage())) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                errorMessage \u003d String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \"Expected message thrown: %s, actual: %s\", expectedMessage, actualException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(errorMessage, actualException);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new AssertionError(String.format("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Expected %s to be thrown, but nothing was thrown.\", expectedException.getName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function which does not return anything and may throw an exception."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface VoidCallable {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        void call() throws Exception;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 52,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/DiveLogBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A utility class to help with building DiveLog objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": " *     {@code DiveLog ab \u003d new DiveLogBuilder().withDiveSession(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveLogBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private DiveLog diveLog;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLogBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLog \u003d new DiveLog();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLogBuilder(DiveLog diveLog) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.diveLog \u003d diveLog;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Adds a new {@code DiveSession} to the {@code DiveLog} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param dive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLogBuilder withDive(DiveSession dive) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLog.addDive(dive);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveLog build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveLog;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 2,
      "arjo129": 33
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/DiveSessionBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * @author arjo129"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": " * A utility class to help with building DiveSession objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveSessionBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_START \u003d \"0700\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_END \u003d \"0800\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_SAFETY_STOP \u003d \"0745\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_PG_START \u003d \"A\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static final String DEFAULT_PG_END \u003d \"L\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Bali\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_DATE_START \u003d \"01012019\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_DATE_END \u003d \"01012019\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEFAULT_TIMEZONE \u003d \"+8\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final float DEFAULT_DEPTH \u003d 5;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Time start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Time safetyStop;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Time end;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private PressureGroup pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private PressureGroup pressureGroupAtEnd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private DepthProfile depthProfile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private OurDate dateEnd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private OurDate dateStart;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final TimeZone timezone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        start \u003d new Time(DEFAULT_START);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        end \u003d new Time(DEFAULT_END);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        safetyStop \u003d new Time(DEFAULT_SAFETY_STOP);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pressureGroupAtBeginning \u003d new PressureGroup(DEFAULT_PG_START);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pressureGroupAtEnd \u003d new PressureGroup(DEFAULT_PG_END);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        depthProfile \u003d new DepthProfile(DEFAULT_DEPTH);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dateEnd \u003d new OurDate(DEFAULT_DATE_START);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dateStart \u003d new OurDate(DEFAULT_DATE_END);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        timezone \u003d new TimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Initializes the DiveSessionBuilder with the data of {@code diveToCopy}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder(DiveSession diveToCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        start \u003d diveToCopy.getStart();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        end \u003d diveToCopy.getEnd();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        safetyStop \u003d diveToCopy.getSafetyStop();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pressureGroupAtEnd \u003d diveToCopy.getPressureGroupAtEnd();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pressureGroupAtBeginning \u003d diveToCopy.getPressureGroupAtBeginning();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        location \u003d diveToCopy.getLocation();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        depthProfile \u003d diveToCopy.getDepthProfile();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dateEnd \u003d diveToCopy.getDateEnd();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        dateStart \u003d diveToCopy.getDateStart();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        timezone \u003d diveToCopy.getTimeZone();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the start time of the {@code DiveSession} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder withStart(String time) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.start \u003d new Time(time);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the end time of the {@code DiveSession} that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder withEnd(String time) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.end \u003d new Time(time);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the safety stop time of the {@code DiveSession} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder withSafetyStop(String time) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.safetyStop \u003d new Time(time);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the starting pressure group of the {@code DiveSession} that we are building."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder withPressureGroupAtBeginning(String pressureGroup) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtBeginning \u003d new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the ending pressure group of the {@code DiveSession} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder withPressureGroupAtEnd(String pressureGroup) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroupAtEnd \u003d new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the location of the {@code DiveSession} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the depth of the {@code DiveSession} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionBuilder withDepth(float depth) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.depthProfile \u003d new DepthProfile(depth);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Builds the DiveSession object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return DiveSession"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSession build() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new DiveSession(dateStart, start, safetyStop, dateEnd, end,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                pressureGroupAtBeginning, pressureGroupAtEnd, location, depthProfile,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                timezone);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 2,
      "arjo129": 131
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/DiveUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_DEPTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_PRESSURE_GROUP_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_PRESSURE_GROUP_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_SAFETY_STOP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_TIMEZONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_TIME_END;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.logic.parser.CliSyntax.PREFIX_TIME_START;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A utility class for DiveSession."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns an add command string for adding the {@code dive}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static String getAddCommand(DiveSession dive) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getDiveDetails(dive);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns the part of command string for the given {@code dive}\u0027s details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param dive"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static String getDiveDetails(DiveSession dive) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_DATE_START + dive.getDateStart().getOurDateString() + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_TIME_START + dive.getStart().getTimeString() + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_DATE_END + dive.getDateStart().getOurDateString() + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_TIME_END + dive.getEnd().getTimeString() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_SAFETY_STOP + dive.getSafetyStop().getTimeString() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_DEPTH + String.valueOf(dive.getDepthProfile().getDepth()) + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_PRESSURE_GROUP_START + dive.getPressureGroupAtBeginning().getPressureGroup() + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_LOCATION + dive.getLocation().getLocationName() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        sb.append(PREFIX_TIMEZONE + dive.getTimeZone().getTimeZoneString() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns the part of command string for the given {@code EditDiveDescriptor}\u0027s details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static String getEditDiveDescriptorDetails(EditCommand.EditDiveDescriptor descriptor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.getStart().ifPresent(timeStart -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                sb.append(PREFIX_TIME_START).append(timeStart.getTimeString()).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.getEnd().ifPresent(timeEnd -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                sb.append(PREFIX_TIME_END).append(timeEnd.getTimeString()).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.getSafetyStop().ifPresent(safetyStop -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                sb.append(PREFIX_SAFETY_STOP).append(safetyStop.getTimeString()).append(\" \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.getDepthProfile().ifPresent(depth -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                sb.append(PREFIX_DEPTH).append(depth.getDepth()).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.getPressureGroupAtBeginning().ifPresent(pressureGroup -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                sb.append(PREFIX_PRESSURE_GROUP_START).append(pressureGroup.getPressureGroup()).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*descriptor.getPressureGroupAtEnd().ifPresent(pressureGroup -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                sb.append(PREFIX_PRESSURE_GROUP_END).append(pressureGroup.getPressureGroup()).append(\" \"));*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.getLocation().ifPresent(location -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                sb.append(PREFIX_LOCATION).append(location.getLocationName()).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjo129": 69
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/EditDiveDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand.EditDiveDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A utility class to help with building EditDiveDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class EditDiveDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private EditCommand.EditDiveDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor \u003d new EditCommand.EditDiveDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder(EditCommand.EditDiveDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditDiveDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns an {@code EditDiveDescriptor} with fields containing {@code diveSession}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder(DiveSession dive) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor \u003d new EditDiveDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setStart(dive.getStart());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setEnd(dive.getEnd());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setSafetyStop(dive.getSafetyStop());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setLocation(dive.getLocation());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setDepthProfile(dive.getDepthProfile());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setPressureGroupAtBeginning(dive.getPressureGroupAtBeginning());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //descriptor.setPressureGroupAtEnd(dive.getPressureGroupAtEnd());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the start time of the {@code EditDiveDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder withStart(String time) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setStart(new Time(time));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the end time of the {@code EditDiveDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder withEnd(String time) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setEnd(new Time(time));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the safety stop time of the {@code EditDiveDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder withSafetyStop(String safetyStop) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setEnd(new Time(safetyStop));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the depth of the {@code EditDiveDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder withDepth(float depth) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setDepthProfile(new DepthProfile(depth));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the starting pressure group of the {@code EditDiveDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder withStartingPressureGroup(String pressureGroup) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setPressureGroupAtBeginning(new PressureGroup(pressureGroup));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the end pressure group of the {@code EditDiveDescriptor} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder withEndingPressureGroup(String pressureGroup) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setPressureGroupAtEnd(new PressureGroup(pressureGroup));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Sets the end location of the {@code EditDiveDescriptor} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditDiveDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditCommand.EditDiveDescriptor build() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 1,
      "arjo129": 102
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/EventsCollectorRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsCollectorRule implements TestRule {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollector eventsCollector \u003d new EventsCollector();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * A class that collects events raised by other classes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public class EventsCollector {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cBaseEvent\u003e events \u003d new ArrayList\u003cBaseEvent\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public EventsCollector() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Collects any event raised by any class"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        @Subscribe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public void collectEvent(BaseEvent event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            events.add(event);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * Removes collected events from the collected list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reset() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            events.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        public int getSize() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns the most recent event collected"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        public BaseEvent getMostRecent() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            if (events.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.get(events.size() - 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if the collector did not receive any events"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isEmpty() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return events.isEmpty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "arjo129": 3
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/EventsUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper methods related to events."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class EventsUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers. This method will return successfully after the {@code event}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * has been posted to all subscribers."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postNow(BaseEvent event) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        new GuiRobot().interact(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Posts {@code event} to all registered subscribers at some unspecified time in the future."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void postLater(BaseEvent event) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e EventsCenter.getInstance().post(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 23,
      "arjo129": 3
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/SerializableTestClass.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns the middle index of the dive session in the {@code model}\u0027s dive session list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDiveList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns the last index of the dive session in the {@code model}\u0027s dive session list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return Index.fromOneBased(model.getFilteredDiveList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns the dive session in the {@code model}\u0027s dive session list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static DiveSession getDive(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return model.getFilteredDiveList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "shuanang": 3,
      "arjo129": 8
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/TypicalDiveSessions.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A utility class containing a list of {@code DiveSession} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class TypicalDiveSessions {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final DiveSession DIVE_AT_BALI \u003d new DiveSessionBuilder().build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final DiveSession DIVE_AT_TIOMAN \u003d new DiveSessionBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withLocation(\"Tioman\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withPressureGroupAtBeginning(\"F\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withPressureGroupAtEnd(\"G\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final DiveSession DIVE_AT_NIGHT \u003d new DiveSessionBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withLocation(\"Tioman\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withStart(\"2100\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withSafetyStop(\"2145\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .withEnd(\"2200\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String KEYWORD_MATCHING_TIOMAN \u003d \"tioman\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private TypicalDiveSessions() {} // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns an {@code DiveLog} with all the typical dive sessions."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static DiveLog getTypicalDiveLog() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveLog ab \u003d new DiveLog();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        for (DiveSession dive : getTypicalDives()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            ab.addDive(dive);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static List\u003cDiveSession\u003e getTypicalDives() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DIVE_AT_BALI, DIVE_AT_TIOMAN));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 1,
      "arjo129": 45
    }
  },
  {
    "path": "src/test/java/seedu/divelog/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjo129"
        },
        "content": "package seedu.divelog.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Index INDEX_FIRST_DIVE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Index INDEX_SECOND_DIVE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final Index INDEX_THIRD_DIVE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "arjo129": 5
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveSessionBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.DiveUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class AddCommandSystemTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /* Case: add a dive without tags to a non-empty divelog book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * 4. {@code Storage} and {@code DiveListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void assertCommandSuccess(DiveSession toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandSuccess(DiveUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(DiveSession)}. Executes {@code command}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(DiveSession)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void assertCommandSuccess(String command, DiveSession toAdd) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        expectedModel.addDiveSession(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, DiveSession)} except asserts that"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * 2. {@code Storage} and {@code DiveListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, DiveSession)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * 4. {@code Storage} and {@code DiveListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "shuanang": 2,
      "arjo129": 25
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.KEYWORD_MATCHING_TIOMAN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class ClearCommandSystemTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /* Case: clear non-empty divelog book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /* Case: undo clearing divelog book -\u003e original divelog book restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /* Case: redo clearing divelog book -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: selects first card in dive session list and clears divelog book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original divelog book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        selectDive(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: filters the dive session list before clearing -\u003e entire divelog book cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original divelog book"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDivesWithLocation(KEYWORD_MATCHING_TIOMAN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /* Case: clear empty divelog book -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "shuanang": 2,
      "arjo129": 21
    }
  },
  {
    "path": "src/test/java/systemtests/ClockRule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TestRule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runner.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.runners.model.Statement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * This rule makes the time stamp in the status bar predictable during a test."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Before the test starts, the rule replaces the clock in the status bar with a fixed clock."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * At the end of the test, the rule restores the original clock."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Clock#fixed(Instant, ZoneId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClockRule implements TestRule {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Clock injectedClock;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void before() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void after() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Statement apply(final Statement base, final Description description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Statement() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            public void evaluate() throws Throwable {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                before();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    base.evaluate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    after();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Clock getInjectedClock() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return injectedClock;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the clock in the status bar with a fixed clock having the current time as its instance."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setInjectedClockToCurrentTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.logic.commands.DeleteCommand.MESSAGE_DELETE_DIVE_SESSION_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TestUtil.getDive;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DeleteCommandSystemTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: delete the first dive session in the list, command with leading spaces and trailing spaces -\u003edeleted */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: delete the last dive session in the list -\u003e deleted */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: undo deleting the last dive session in the list -\u003e last dive session restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: redo deleting the last dive session in the list -\u003e last dive session deleted again */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: delete the middle dive session in the list -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: filtered dive session list, delete index within bounds of divelog book and dive list -\u003e deleted */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: filtered dive session list, delete index within bounds of divelog book but out of bounds of dive list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* --------------------- Performing delete operation while a dive session card is selected ------------------ */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: delete the selected dive session -\u003e dive list panel selects the dive before the deleted dive */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Removes the {@code DiveSession} at the specified {@code index} in {@code model}\u0027s divelog book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return the removed dive session"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private DiveSession removeDive(Model model, Index index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession targetDiveSession \u003d getDive(model, index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            model.deleteDiveSession(targetDiveSession);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return targetDiveSession;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Deletes the dive at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession deletedDiveSession \u003d removeDive(expectedModel, toDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_DIVE_SESSION_SUCCESS, deletedDiveSession);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 108,
      "shuanang": 16,
      "arjo129": 31
    }
  },
  {
    "path": "src/test/java/systemtests/DiveLogSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import guitests.guihandles.DiveListPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import guitests.guihandles.DiveSessionCardHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.TestApp;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.TypicalDiveSessions;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.CommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.DiveSessionCard;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A system test class for DiveLog, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public abstract class DiveLogSystemTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    protected DiveLog getInitialData() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return TypicalDiveSessions.getTypicalDiveLog();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveListPanelHandle getDiveListPanel() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return mainWindowHandle.getDiveListPanel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Displays all dive in the divelog book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    protected void showAllDives() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(getModel().getDiveLog().getDiveList().size(), getModel().getFilteredDiveList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Displays all dive with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    protected void showDivesWithLocation(String keyword) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(getModel().getFilteredDiveList().size() \u003c getModel().getDiveLog().getDiveList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Selects the dive at {@code index} of the displayed list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    protected void selectDive(Index index) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(index.getZeroBased(), getDiveListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Deletes all dive sessions in the divelog book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    protected void deleteAllDiveSessions() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(0, getModel().getDiveLog().getDiveList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same dive session objects as {@code expectedModel}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * and the dive list panel displays the dive sessions in the model correctly."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(new DiveLog(expectedModel.getDiveLog()), testApp.readStorageDiveLog());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertListMatching(getDiveListPanel(), expectedModel.getFilteredDiveList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code DiveListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        getDiveListPanel().rememberSelectedDiveCard();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * of the previously selected dive session."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertFalse(getDiveListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the dive session in the dive list panel at"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @see DiveListPanelHandle#isSelectedDiveSessionCardChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * TODO REIMPLEMENT"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        getDiveListPanel().navigateToCard(getDiveListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String selectedCardName \u003d getDiveListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getDiveListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the dive session list panel remain unchanged."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @see DiveListPanelHandle#isSelectedDiveSessionCardChanged()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertFalse(getDiveListPanel().isSelectedDiveSessionCardChanged());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertListMatching(getDiveListPanel(), getModel().getFilteredDiveList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Asserts the list"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param diveListPanel"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param filteredDiveList"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static void assertListMatching(DiveListPanelHandle diveListPanel, ObservableList\u003cDiveSession\u003e filteredDiveList) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        DiveSession []dives \u003d filteredDiveList.toArray(new DiveSession[0]);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertListMatching(diveListPanel, dives);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Asserts that the list in {@code DiveListPanelHandle} displays the details of {@code dives} correctly and"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static void assertListMatching(DiveListPanelHandle diveListPanel, DiveSession[] dives) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        for (int i \u003d 0; i \u003c dives.length; i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            diveListPanel.navigateToCard(i);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            assertCardDisplays(dives[i], diveListPanel.getDiveCardHandle(i));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Asserts the card and the dive are the same."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param dive The {@Code DiveSession} has the same data as the divecard"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param diveCardHandle The {@Code DiveSessionCard} in question"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static void assertCardDisplays(DiveSession dive, DiveSessionCardHandle diveCardHandle) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(diveCardHandle.getName(), DiveSessionCard.DIVE_PREFIX + dive.getLocation().getLocationName());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(diveCardHandle.getDepth(), dive.getDepthProfile().getFormattedString());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 218,
      "shuanang": 19,
      "arjo129": 74
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.model.Model.PREDICATE_SHOW_ALL_DIVES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class EditCommandSystemTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: undo editing the last dive session in the list -\u003e last dive session restored */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: redo editing the last dive session in the list -\u003e last dive session edited again */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: edit a dive session with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: edit a dive with new values same as another dive\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tttaus"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: edit a dive with new values same as another dive\u0027s values but with different values"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: filtered dive session list, edit index within bounds of divelog book and dive session list -\u003e edited */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: filtered dive session list, edit index within bounds of divelog book but out of bounds of dive list"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* --------------------- Performing edit operation while a dive session card is selected -------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: selects first card in the dive session list, edit a dive session -\u003e edited, card selection remains"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "         * unchanged but browser url changes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        // browser\u0027s url is updated to reflect the new dive session\u0027s name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /* Check that no index is */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /*String command \u003d \"0 ds/081219 ts/ de/DATE_END te/091219 ss/SAFETY_STOP_TIME\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \" d/DEPTH pg/PG_AT_START pge/PG_AT_END l/LOCATION\"*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(\"edit 0 ts/1210\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(\"edit -1 ts/1210\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        int index \u003d model.getFilteredDiveList().size() + 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(\"edit \" + index + \" ts/1210\", Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(\"edit ts/1210\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(\"edit\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, dive session, Index)} except that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, DiveSession, Index)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, DiveSession editedDive) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedDive, null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the dive session at index {@code toEdit}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * being updated to values specified {@code editedDiveSession}.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param editedDive"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, DiveSession editedDive,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            expectedModel.updateDiveSession(expectedModel.getFilteredDiveList().get(toEdit.getZeroBased()), editedDive);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        expectedModel.updateFilteredDiveList(PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_DIVE_SUCCESS, editedDive), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        expectedModel.updateFilteredDiveList(PREDICATE_SHOW_ALL_DIVES);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tttaus": 1,
      "-": 118,
      "shuanang": 17,
      "arjo129": 43
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class ErrorDialogGuiTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "arjo129": 6
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_DIVE_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class FindCommandSystemTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find multiple dive sessions in divelog book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "         * -\u003e 2 dive sessions found"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: repeat previous find command where dive session list is displaying the dive sessions we are finding"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "         * -\u003e 2 dive sessions found"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find dive session where dive list is not displaying the dive we are finding -\u003e 1 dive found */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find multiple dive session in divelog book, 2 keywords -\u003e 2 dives found */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find multiple dive session in divelog book, 2 keywords in reversed order -\u003e 2 dives found */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find multiple dive sessions in divelog book, 2 keywords with 1 repeat -\u003e 2 dives found */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find multiple dive sessions in divelog book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "         * -\u003e 2 dives found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find same dive sessions in divelog book after deleting 1 of them -\u003e 1 dive session found */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find dive session in divelog book, keyword is same as name but of different case -\u003e 1 dive found */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find dive session in divelog book, keyword is substring of name -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find dive session in divelog book, name is substring of keyword -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find dive session not in divelog book -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find phone number of dive session in divelog book -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find divelog of dive session in divelog book -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find email of dive session in divelog book -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find tags of dive session in divelog book -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find while a dive session is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: find dive session in empty divelog book -\u003e 0 dive sessions found */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * box displays {@code Messages#MESSAGE_DIVE_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                MESSAGE_DIVE_LISTED_OVERVIEW, expectedModel.getFilteredDiveList().size());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 79,
      "shuanang": 21,
      "arjo129": 23
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.BrowserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class HelpCommandSystemTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        getDiveListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DIVE.getOneBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertListMatching(getDiveListPanel(), getModel().getFilteredDiveList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DIVE.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "arjo129": 13
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    private static final Predicate\u003cDiveSession\u003e PREDICATE_MATCHING_NO_DIVES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cDiveSession\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Optional\u003cPredicate\u003cDiveSession\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        model.updateFilteredDiveList(predicate.orElse(PREDICATE_MATCHING_NO_DIVES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static void setFilteredList(Model model, DiveSession... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code DiveSession} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static Predicate\u003cDiveSession\u003e getPredicateMatching(DiveSession other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return diveSession -\u003e diveSession.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "shuanang": 4,
      "arjo129": 6
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.testutil.TestUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class SampleDataTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    protected DiveLog getInitialData() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void diveLog_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession[] expectedList \u003d SampleDataUtil.getSampleDives();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertListMatching(getDiveListPanel(), expectedList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 40,
      "shuanang": 1,
      "arjo129": 8
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_INVALID_DIVE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "import static seedu.divelog.logic.commands.SelectCommand.MESSAGE_SELECT_DIVE_SESSION_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalDiveSessions.KEYWORD_MATCHING_TIOMAN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class SelectCommandSystemTest extends DiveLogSystemTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: select the first card in the dive session list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DIVE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_DIVE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: select the last card in the dive session list -\u003e selected */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        Index diveSessionCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + diveSessionCount.getOneBased();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertCommandSuccess(command, diveSessionCount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: select the middle card in the dive session list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: filtered dive session list, select index within bounds of divelog book but out of bounds of dive list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        showDivesWithLocation(KEYWORD_MATCHING_TIOMAN);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        int invalidIndex \u003d getModel().getDiveLog().getDiveList().size();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        /* Case: filtered dive session list, select index within bounds of divelog book and dive list -\u003e selected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredDiveList().size());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredDiveList().size() + 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        /* Case: select from empty divelog book -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        deleteAllDiveSessions();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_DIVE.getOneBased(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                MESSAGE_INVALID_DIVE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected dive session.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * 4. {@code Storage} and {@code DiveListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuanang"
        },
        "content": "                MESSAGE_SELECT_DIVE_SESSION_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getDiveListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * 4. {@code Storage} and {@code DiveListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see DiveLogSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 110,
      "shuanang": 12,
      "arjo129": 32
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyDiveLog\u003e diveLog, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(diveLog, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "shuanang": 2,
      "arjo129": 2
    }
  },
  {
    "path": "src/test/resources/divetables/Dive_table_1.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "{\"10\": {\"122\": \"T\", \"178\": \"X\", \"219\": \"Z\", \"133\": \"U\", \"88\": \"P\", \"64\": \"L\", \"112\": \"S\", \"82\": \"O\","
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"199\": \"Y\", \"26\": \"C\", \"20\": \"B\", \"160\": \"W\", \"45\": \"H\", \"41\": \"G\", \"145\": \"V\", \"75\": \"N\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"70\": \"M\", \"95\": \"Q\", \"104\": \"R\", \"10\": \"A\", \"59\": \"K\", \"54\": \"J\", \"30\": \"D\", \"37\": \"F\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"50\": \"I\", \"34\": \"E\"},"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"12\": {\"88\": \"S\", \"116\": \"W\", \"53\": \"L\", \"66\": \"O\", \"134\": \"Y\", \"82\": \"R\", \"26\": \"D\", \"23\": \"C\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"45\": \"J\", \"42\": \"I\", \"29\": \"E\", \"9\": \"A\", \"147\": \"Z\", \"76\": \"Q\", \"108\": \"V\", \"125\": \"X\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"71\": \"P\", \"101\": \"U\", \"94\": \"T\", \"38\": \"H\", \"17\": \"B\", \"32\": \"F\", \"57\": \"M\", \"49\": \"K\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"62\": \"N\", \"35\": \"G\"},"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"14\": {\"43\": \"L\", \"61\": \"Q\", \"64\": \"R\", \"53\": \"O\", \"82\": \"V\", \"87\": \"W\", \"24\": \"E\", \"27\": \"F\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"22\": \"D\", \"47\": \"M\", \"29\": \"G\", \"40\": \"K\", \"8\": \"A\", \"68\": \"S\", \"77\": \"U\", \"98\": \"Y\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"73\": \"T\", \"92\": \"X\", \"15\": \"B\", \"19\": \"C\", \"32\": \"H\", \"57\": \"P\", \"37\": \"J\", \"50\": \"N\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"35\": \"I\"},"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"16\": {\"60\": \"T\", \"63\": \"U\", \"67\": \"V\", \"25\": \"G\", \"27\": \"H\", \"21\": \"E\", \"48\": \"P\", \"23\": \"F\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"45\": \"O\", \"42\": \"N\", \"29\": \"I\", \"7\": \"A\", \"39\": \"M\", \"72\": \"X\", \"70\": \"W\", \"13\": \"B\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"17\": \"C\", \"19\": \"D\", \"32\": \"J\", \"56\": \"S\", \"37\": \"L\", \"50\": \"Q\", \"53\": \"R\", \"34\": \"K\"},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"18\": {\"56\": \"W\", \"24\": \"H\", \"26\": \"I\", \"20\": \"F\", \"22\": \"G\", \"46\": \"R\", \"28\": \"J\", \"43\": \"Q\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"41\": \"P\", \"6\": \"A\", \"11\": \"B\", \"39\": \"O\", \"15\": \"C\", \"48\": \"S\", \"16\": \"D\", \"55\": \"V\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"18\": \"E\", \"30\": \"K\", \"51\": \"T\", \"36\": \"N\", \"53\": \"U\", \"34\": \"M\", \"32\": \"L\"},"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"20\": {\"10\": \"B\", \"13\": \"C\", \"30\": \"M\", \"15\": \"D\", \"21\": \"H\", \"16\": \"E\", \"18\": \"F\", \"44\": \"T\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"23\": \"I\", \"28\": \"L\", \"26\": \"K\", \"40\": \"R\", \"34\": \"O\", \"45\": \"U\", \"36\": \"P\", \"25\": \"J\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"6\": \"A\", \"20\": \"G\", \"38\": \"Q\", \"32\": \"N\", \"42\": \"S\"},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"22\": {\"24\": \"K\", \"25\": \"L\", \"13\": \"D\", \"12\": \"C\", \"15\": \"E\", \"21\": \"I\", \"22\": \"J\", \"16\": \"F\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"19\": \"H\", \"18\": \"G\", \"30\": \"O\", \"37\": \"S\", \"29\": \"N\", \"34\": \"Q\", \"27\": \"M\", \"5\": \"A\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"36\": \"R\", \"32\": \"P\", \"9\": \"B\"},"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"25\": {\"11\": \"D\", \"10\": \"C\", \"13\": \"E\", \"15\": \"G\", \"14\": \"F\", \"17\": \"H\", \"23\": \"M\", \"19\": \"J\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"18\": \"I\", \"22\": \"L\", \"28\": \"P\", \"26\": \"O\", \"29\": \"Q\", \"4\": \"A\", \"8\": \"B\", \"25\": \"N\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"21\": \"K\"},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"30\": {\"11\": \"F\", \"10\": \"E\", \"13\": \"H\", \"12\": \"G\", \"15\": \"J\", \"14\": \"I\", \"17\": \"L\", \"16\": \"K\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"19\": \"M\", \"20\": \"N\", \"3\": \"A\", \"6\": \"B\", \"9\": \"D\", \"8\": \"C\"},"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"35\": {\"11\": \"H\", \"10\": \"G\", \"13\": \"J\", \"12\": \"I\", \"14\": \"K\", \"3\": \"A\", \"5\": \"B\", \"7\": \"C\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"9\": \"F\", \"8\": \"D\"},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"40\": {\"9\": \"G\", \"8\": \"F\", \"5\": \"B\", \"7\": \"E\", \"6\": \"C\"},"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"42\": {\"8\": \"F\", \"4\": \"B\", \"7\": \"E\", \"6\": \"D\"}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 34
    }
  },
  {
    "path": "src/test/resources/divetables/Dive_table_2.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "{\"10\": {\"A\": [10, 209], \"C\": [26, 193], \"B\": [20, 199], \"E\": [34, 185], \"D\": [30, 189], \"G\": [41, 178], \"F\": [37, 182], \"I\": [50, 169], \"H\": [45, 174], \"K\": [59, 160], \"J\": [54, 165], \"M\": [70, 149], \"L\": [64, 155], \"O\": [82, 137], \"N\": [75, 144], \"Q\": [95, 124], \"P\": [88, 131], \"S\": [112, 107], \"R\": [104, 115], \"U\": [133, 84], \"T\": [122, 97], \"W\": [160, 59], \"V\": [145, 74], \"Y\": [199, 20], \"X\": [178, 41]}, \"12\": {\"A\": [9, 138], \"C\": [23, 124], \"B\": [17, 130], \"E\": [29, 118], \"D\": [26, 121], \"G\": [35, 112], \"F\": [32, 115], \"I\": [42, 105], \"H\": [38, 109], \"K\": [49, 98], \"J\": [45, 102], \"M\": [57, 90], \"L\": [53, 94], \"O\": [66, 81], \"N\": [57, 90], \"Q\": [76, 71], \"P\": [71, 76], \"S\": [88, 59], \"R\": [82, 65], \"U\": [101, 46], \"T\": [94, 53], \"W\": [116, 31], \"V\": [108, 39], \"Y\": [134, 14], \"X\": [125, 22]}, \"14\": {\"A\": [8, 90], \"C\": [19, 79], \"B\": [15, 83], \"E\": [24, 74], \"D\": [22, 76], \"G\": [29, 69], \"F\": [27, 71], \"I\": [35, 63], \"H\": [32, 66], \"K\": [40, 58], \"J\": [37, 61], \"M\": [47, 51], \"L\": [43, 55], \"O\": [53, 45], \"N\": [50, 48], \"Q\": [61, 37], \"P\": [57, 41], \"S\": [68, 30], \"R\": [64, 34], \"U\": [77, 21], \"T\": [73, 25], \"W\": [87, 11], \"V\": [82, 16], \"X\": [92, 6]}, \"16\": {\"A\": [7, 65], \"C\": [17, 55], \"B\": [13, 59], \"E\": [21, 51], \"D\": [19, 53], \"G\": [25, 47], \"F\": [23, 49], \"I\": [29, 43], \"H\": [27, 45], \"K\": [34, 38], \"J\": [32, 40], \"M\": [39, 33], \"L\": [37, 35], \"O\": [45, 27], \"N\": [42, 30], \"Q\": [50, 22], \"P\": [48, 24], \"S\": [56, 16], \"R\": [53, 19], \"U\": [63, 9], \"T\": [60, 12], \"W\": [70, 2], \"V\": [67, 5]}, \"18\": {\"A\": [6, 50], \"C\": [15, 41], \"B\": [11, 45], \"E\": [18, 38], \"D\": [16, 40], \"G\": [22, 34], \"F\": [20, 36], \"I\": [26, 30], \"H\": [24, 32], \"K\": [30, 26], \"J\": [28, 28], \"M\": [34, 22], \"L\": [32, 24], \"O\": [39, 17], \"N\": [36, 20], \"Q\": [43, 13], \"P\": [41, 15], \"S\": [48, 8], \"R\": [46, 10], \"U\": [53, 3], \"T\": [51, 5]}, \"20\": {\"A\": [6, 39], \"C\": [13, 32], \"B\": [10, 35], \"E\": [16, 29], \"D\": [15, 30], \"G\": [20, 25], \"F\": [18, 27], \"I\": [23, 22], \"H\": [21, 24], \"K\": [26, 19], \"J\": [25, 20], \"M\": [30, 15], \"L\": [28, 17], \"O\": [34, 11], \"N\": [32, 13], \"Q\": [38, 7], \"P\": [36, 9], \"S\": [42, 3], \"R\": [40, 5]}, \"22\": {\"A\": [5, 32], \"C\": [12, 25], \"B\": [9, 28], \"E\": [15, 22], \"D\": [13, 24], \"G\": [18, 19], \"F\": [16, 21], \"I\": [21, 16], \"H\": [19, 18], \"K\": [24, 13], \"J\": [22, 15], \"M\": [27, 10], \"L\": [25, 12], \"O\": [30, 7], \"N\": [29, 8], \"Q\": [34, 3], \"P\": [32, 5]}, \"25\": {\"A\": [4, 25], \"C\": [10, 19], \"B\": [8, 21], \"E\": [13, 16], \"D\": [11, 18], \"G\": [15, 14], \"F\": [14, 15], \"I\": [18, 11], \"H\": [17, 12], \"K\": [21, 8], \"J\": [19, 10], \"M\": [23, 6], \"L\": [22, 7], \"O\": [26, 3], \"N\": [25, 4]}, \"30\": {\"A\": [3, 17], \"C\": [8, 12], \"B\": [6, 14], \"E\": [10, 10], \"D\": [9, 11], \"G\": [12, 8], \"F\": [11, 9], \"I\": [14, 6], \"H\": [13, 7], \"K\": [16, 4], \"J\": [15, 5], \"L\": [17, 3]}, \"35\": {\"A\": [3, 11], \"C\": [7, 7], \"B\": [5, 9], \"E\": [9, 5], \"D\": [98, 6], \"G\": [10, 4], \"F\": [9, 5], \"H\": [11, 3]}, \"40\": {\"A\": [2, 7], \"B\": [5, 4]}}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 1
    }
  },
  {
    "path": "src/test/resources/divetables/surface_table.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shuanang"
        },
        "content": "{\"A\": {\"A\": [\"00:00\", \"03:00\"], \"C\": [\"\", \"\"], \"B\": [\"\", \"\"], \"E\": [\"\", \"\"], \"D\": [\"\", \"\"],"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"],"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"C\": {\"A\": [\"01:10\", \"04:10\"], \"C\": [\"00:00\", \"00:21\"], \"B\": [\"00:22\", \"01:09\"], \"E\": [\"\", \"\"],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"D\": [\"\", \"\"], \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"],"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"B\": {\"A\": [\"00:48\", \"03:48\"], \"C\": [\"\", \"\"], \"B\": [\"00:00\", \"00:47\"], \"E\": [\"\", \"\"], \"D\": [\"\", \"\"],"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"],"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"E\": {\"A\": [\"01:28\", \"04:28\"], \"C\": [\"00:17\", \"00:38\"], \"B\": [\"00:39\", \"01:27\"],"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:00\", \"00:07\"], \"D\": [\"00:08\", \"00:16\"], \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"],"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"],"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"D\": {\"A\": [\"01:19\", \"04:19\"], \"C\": [\"00:09\", \"00:30\"], \"B\": [\"00:31\", \"01:18\"], \"E\": [\"\", \"\"],"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"D\": [\"00:00\", \"00:08\"], \"G\": [\"\", \"\"], \"F\": [\"\", \"\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"\", \"\"], \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"],"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"G\": {\"A\": [\"01:42\", \"04:42\"], \"C\": [\"00:32\", \"00:53\"], \"B\": [\"00:54\", \"01:41\"],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:14\", \"00:22\"], \"D\": [\"00:23\", \"00:31\"], \"G\": [\"00:00\", \"00:06\"],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:07\", \"00:13\"], \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"],"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"],"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"F\": {\"A\": [\"01:35\", \"04:35\"], \"C\": [\"00:25\", \"00:46\"], \"B\": [\"00:47\", \"01:34\"],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:08\", \"00:15\"], \"D\": [\"00:16\", \"00:24\"], \"G\": [\"\", \"\"], \"F\": [\"00:00\", \"00:07\"],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"I\": [\"\", \"\"], \"H\": [\"\", \"\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"I\": {\"A\": [\"01:54\", \"04:54\"], \"C\": [\"00:44\", \"01:05\"], \"B\": [\"01:06\", \"01:53\"],"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:27\", \"00:34\"], \"D\": [\"00:35\", \"00:43\"], \"G\": [\"00:12\", \"00:18\"],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:19\", \"00:26\"], \"I\": [\"00:00\", \"00:05\"], \"H\": [\"00:06\", \"00:11\"], \"K\": [\"\", \"\"],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"\", \"\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"H\": {\"A\": [\"01:48\", \"04:48\"], \"C\": [\"00:38\", \"00:59\"], \"B\": [\"01:00\", \"01:47\"],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:21\", \"00:28\"], \"D\": [\"00:29\", \"00:37\"], \"G\": [\"00:06\", \"00:12\"],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:13\", \"00:20\"], \"I\": [\"\", \"\"], \"H\": [\"00:00\", \"00:05\"], \"K\": [\"\", \"\"], \"J\": [\"\", \"\"],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"K\": {\"A\": [\"02:05\", \"05:05\"], \"C\": [\"00:55\", \"01:15\"], \"B\": [\"01:17\", \"02:04\"],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:38\", \"00:45\"], \"D\": [\"00:46\", \"00:54\"], \"G\": [\"00:23\", \"00:29\"],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:30\", \"00:37\"], \"I\": [\"00:11\", \"00:16\"], \"H\": [\"00:17\", \"00:22\"],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:00\", \"00:04\"], \"J\": [\"00:05\", \"00:10\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"],"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"J\": {\"A\": [\"02:00\", \"05:00\"], \"C\": [\"00:50\", \"01:11\"], \"B\": [\"01:12\", \"01:59\"],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:32\", \"00:40\"], \"D\": [\"00:41\", \"00:49\"], \"G\": [\"00:18\", \"00:24\"],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:25\", \"00:31\"], \"I\": [\"00:06\", \"00:11\"], \"H\": [\"00:12\", \"00:17\"],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"\", \"\"], \"J\": [\"00:00\", \"00:05\"], \"M\": [\"\", \"\"], \"L\": [\"\", \"\"], \"O\": [\"\", \"\"],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"M\": {\"A\": [\"02:15\", \"05:15\"], \"C\": [\"01:05\", \"01:25\"], \"B\": [\"01:26\", \"02:14\"],"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:47\", \"00:55\"], \"D\": [\"00:56\", \"01:04\"], \"G\": [\"00:33\", \"00:39\"],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:40\", \"00:46\"], \"I\": [\"00:20\", \"00:25\"], \"H\": [\"00:26\", \"00:32\"],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:10\", \"00:14\"], \"J\": [\"00:15\", \"00:19\"], \"M\": [\"00:00\", \"00:04\"],"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:05\", \"00:09\"], \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"L\": {\"A\": [\"02:10\", \"05:10\"], \"C\": [\"01:00\", \"01:21\"], \"B\": [\"01:22\", \"02:09\"],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:43\", \"00:50\"], \"D\": [\"00:51\", \"00:59\"], \"G\": [\"00:28\", \"00:34\"],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:35\", \"00:42\"], \"I\": [\"00:16\", \"00:21\"], \"H\": [\"00:22\", \"00:27\"],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:05\", \"00:09\"], \"J\": [\"00:10\", \"00:15\"], \"M\": [\"\", \"\"], \"L\": [\"00:00\", \"00:04\"],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"O\": [\"\", \"\"], \"N\": [\"\", \"\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"O\": {\"A\": [\"02:24\", \"05:24\"], \"C\": [\"01:13\", \"01:34\"], \"B\": [\"01:35\", \"02:23\"],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:56\", \"01:03\"], \"D\": [\"01:04\", \"01:12\"], \"G\": [\"00:42\", \"00:47\"],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:48\", \"00:55\"], \"I\": [\"00:29\", \"00:34\"], \"H\": [\"00:35\", \"00:41\"],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:18\", \"00:23\"], \"J\": [\"00:24\", \"00:28\"], \"M\": [\"00:09\", \"00:12\"],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:13\", \"00:17\"], \"O\": [\"00:00\", \"00:03\"], \"N\": [\"00:04\", \"00:08\"],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"],"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"N\": {\"A\": [\"02:19\", \"05:19\"], \"C\": [\"01:09\", \"01:30\"], \"B\": [\"01:31\", \"02:18\"],"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"00:52\", \"00:59\"], \"D\": [\"01:00\", \"01:08\"], \"G\": [\"00:37\", \"00:43\"],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:44\", \"00:51\"], \"I\": [\"00:25\", \"00:30\"], \"H\": [\"00:31\", \"00:36\"],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:14\", \"00:18\"], \"J\": [\"00:19\", \"00:24\"], \"M\": [\"00:04\", \"00:08\"],"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:09\", \"00:13\"], \"O\": [\"\", \"\"], \"N\": [\"00:00\", \"00:03\"], \"Q\": [\"\", \"\"], \"P\": [\"\", \"\"],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Q\": {\"A\": [\"02:31\", \"05:31\"], \"C\": [\"01:21\", \"01:42\"], \"B\": [\"01:43\", \"02:30\"],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:04\", \"01:11\"], \"D\": [\"01:12\", \"01:20\"], \"G\": [\"00:49\", \"00:55\"],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"00:56\", \"01:03\"], \"I\": [\"00:37\", \"00:42\"], \"H\": [\"00:43\", \"00:48\"],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:26\", \"00:30\"], \"J\": [\"00:31\", \"00:36\"], \"M\": [\"00:17\", \"00:20\"],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:21\", \"00:25\"], \"O\": [\"00:08\", \"00:11\"], \"N\": [\"00:12\", \"00:16\"],"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:00\", \"00:03\"], \"P\": [\"00:04\", \"00:07\"], \"S\": [\"\", \"\"], \"R\": [\"\", \"\"], \"U\": [\"\", \"\"],"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"S\": {\"A\": [\"02:39\", \"05:39\"], \"C\": [\"01:28\", \"01:49\"], \"B\": [\"01:50\", \"02:38\"],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:11\", \"01:18\"], \"D\": [\"01:19\", \"01:27\"], \"G\": [\"00:57\", \"01:03\"],"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:04\", \"01:10\"], \"I\": [\"00:44\", \"00:49\"], \"H\": [\"00:50\", \"00:56\"],"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:33\", \"00:38\"], \"J\": [\"00:39\", \"00:43\"], \"M\": [\"00:24\", \"00:27\"],"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:28\", \"00:32\"], \"O\": [\"00:15\", \"00:18\"], \"N\": [\"00:19\", \"00:23\"],"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:07\", \"00:10\"], \"P\": [\"00:11\", \"00:14\"], \"S\": [\"00:00\", \"00:03\"],"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:04\", \"00:06\"], \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"R\": {\"A\": [\"02:35\", \"05:35\"], \"C\": [\"01:25\", \"01:46\"], \"B\": [\"01:47\", \"02:34\"],"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:08\", \"01:15\"], \"D\": [\"01:16\", \"01:24\"], \"G\": [\"00:53\", \"00:59\"],"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:00\", \"01:07\"], \"I\": [\"00:41\", \"00:46\"], \"H\": [\"00:47\", \"00:52\"],"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:30\", \"00:34\"], \"J\": [\"00:35\", \"00:40\"], \"M\": [\"00:20\", \"00:24\"],"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:25\", \"00:29\"], \"O\": [\"00:12\", \"00:15\"], \"N\": [\"00:16\", \"00:19\"],"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:04\", \"00:07\"], \"P\": [\"00:08\", \"00:11\"], \"S\": [\"\", \"\"], \"R\": [\"00:00\", \"00:03\"],"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"U\": [\"\", \"\"], \"T\": [\"\", \"\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"U\": {\"A\": [\"02:45\", \"05:45\"], \"C\": [\"01:35\", \"01:56\"], \"B\": [\"01:57\", \"02:44\"],"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:18\", \"01:25\"], \"D\": [\"01:26\", \"01:34\"], \"G\": [\"01:03\", \"01:09\"],"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:10\", \"01:17\"], \"I\": [\"00:51\", \"00:56\"], \"H\": [\"00:57\", \"01:02\"],"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:40\", \"00:44\"], \"J\": [\"00:45\", \"00:50\"], \"M\": [\"00:30\", \"00:34\"],"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:35\", \"00:39\"], \"O\": [\"00:22\", \"00:25\"], \"N\": [\"00:26\", \"00:29\"],"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:14\", \"00:17\"], \"P\": [\"00:18\", \"00:21\"], \"S\": [\"00:07\", \"00:09\"],"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:10\", \"00:13\"], \"U\": [\"00:00\", \"00:02\"], \"T\": [\"00:03\", \"00:06\"],"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"\", \"\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"T\": {\"A\": [\"02:42\", \"05:42\"], \"C\": [\"01:32\", \"01:53\"], \"B\": [\"01:54\", \"02:41\"],"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:14\", \"01:22\"], \"D\": [\"01:23\", \"01:31\"], \"G\": [\"01:00\", \"01:06\"],"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:07\", \"01:13\"], \"I\": [\"00:48\", \"00:53\"], \"H\": [\"00:54\", \"00:59\"],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:37\", \"00:41\"], \"J\": [\"00:42\", \"00:47\"], \"M\": [\"00:27\", \"00:31\"],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:32\", \"00:36\"], \"O\": [\"00:18\", \"00:22\"], \"N\": [\"00:23\", \"00:26\"],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:11\", \"00:13\"], \"P\": [\"00:14\", \"00:17\"], \"S\": [\"00:03\", \"00:06\"],"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:07\", \"00:10\"], \"U\": [\"\", \"\"], \"T\": [\"00:00\", \"00:02\"], \"W\": [\"\", \"\"], \"V\": [\"\", \"\"],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"W\": {\"A\": [\"02:51\", \"05:51\"], \"C\": [\"01:41\", \"02:02\"], \"B\": [\"02:03\", \"02:50\"],"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:24\", \"01:31\"], \"D\": [\"01:32\", \"01:40\"], \"G\": [\"01:09\", \"01:15\"],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:16\", \"01:23\"], \"I\": [\"00:57\", \"01:02\"], \"H\": [\"01:03\", \"01:08\"],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:46\", \"00:50\"], \"J\": [\"00:51\", \"00:56\"], \"M\": [\"00:37\", \"00:40\"],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:41\", \"00:45\"], \"O\": [\"00:28\", \"00:31\"], \"N\": [\"00:32\", \"00:36\"],"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:20\", \"00:23\"], \"P\": [\"00:24\", \"00:27\"], \"S\": [\"00:13\", \"00:15\"],"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:16\", \"00:19\"], \"U\": [\"00:06\", \"00:08\"], \"T\": [\"00:09\", \"00:12\"],"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:00\", \"00:02\"], \"V\": [\"00:03\", \"00:05\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"V\": {\"A\": [\"02:48\", \"05:48\"], \"C\": [\"01:38\", \"01:59\"], \"B\": [\"02:00\", \"02:47\"],"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:21\", \"01:28\"], \"D\": [\"01:29\", \"01:37\"], \"G\": [\"01:06\", \"01:12\"],"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:13\", \"01:20\"], \"I\": [\"00:54\", \"00:59\"], \"H\": [\"01:00\", \"01:05\"],"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:43\", \"00:47\"], \"J\": [\"00:48\", \"00:53\"], \"M\": [\"00:34\", \"00:37\"],"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:38\", \"00:42\"], \"O\": [\"00:25\", \"00:28\"], \"N\": [\"00:29\", \"00:33\"],"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:17\", \"00:20\"], \"P\": [\"00:21\", \"00:24\"], \"S\": [\"00:10\", \"00:12\"],"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:13\", \"00:16\"], \"U\": [\"00:03\", \"00:05\"], \"T\": [\"00:06\", \"00:09\"],"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"\", \"\"], \"V\": [\"00:00\", \"00:02\"], \"Y\": [\"\", \"\"], \"X\": [\"\", \"\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Y\": {\"A\": [\"02:57\", \"05:57\"], \"C\": [\"01:47\", \"02:08\"], \"B\": [\"02:09\", \"02:56\"],"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:30\", \"01:37\"], \"D\": [\"01:38\", \"01:46\"], \"G\": [\"01:15\", \"01:21\"],"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:22\", \"01:29\"], \"I\": [\"01:03\", \"01:08\"], \"H\": [\"01:09\", \"01:14\"],"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:52\", \"00:56\"], \"J\": [\"00:57\", \"01:02\"], \"M\": [\"00:42\", \"00:46\"],"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:47\", \"00:51\"], \"O\": [\"00:34\", \"00:37\"], \"N\": [\"00:38\", \"00:41\"],"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:26\", \"00:29\"], \"P\": [\"00:30\", \"00:33\"], \"S\": [\"00:19\", \"00:21\"],"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:22\", \"00:25\"], \"U\": [\"00:12\", \"00:14\"], \"T\": [\"00:15\", \"00:18\"],"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:06\", \"00:08\"], \"V\": [\"00:09\", \"00:11\"], \"Y\": [\"00:00\", \"00:02\"],"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"X\": [\"00:03\", \"00:05\"], \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"X\": {\"A\": [\"02:54\", \"05:54\"], \"C\": [\"01:44\", \"02:05\"], \"B\": [\"02:06\", \"02:53\"],"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:27\", \"01:34\"], \"D\": [\"01:35\", \"01:43\"], \"G\": [\"01:12\", \"01:18\"],"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:19\", \"01:26\"], \"I\": [\"01:00\", \"01:05\"], \"H\": [\"01:06\", \"01:11\"],"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:49\", \"00:53\"], \"J\": [\"00:54\", \"00:59\"], \"M\": [\"00:40\", \"00:43\"],"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:44\", \"00:48\"], \"O\": [\"00:31\", \"00:34\"], \"N\": [\"00:35\", \"00:39\"],"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:23\", \"00:26\"], \"P\": [\"00:27\", \"00:30\"], \"S\": [\"00:16\", \"00:18\"],"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:19\", \"00:22\"], \"U\": [\"00:09\", \"00:11\"], \"T\": [\"00:12\", \"00:15\"],"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:03\", \"00:05\"], \"V\": [\"00:06\", \"00:08\"], \"Y\": [\"\", \"\"], \"X\": [\"00:00\", \"00:02\"],"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Z\": [\"\", \"\"]},"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"Z\": {\"A\": [\"03:00\", \"06:00\"], \"C\": [\"01:50\", \"02:11\"], \"B\": [\"02:12\", \"02:59\"],"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"E\": [\"01:32\", \"01:40\"], \"D\": [\"01:41\", \"01:49\"], \"G\": [\"01:18\", \"01:24\"],"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"F\": [\"01:25\", \"01:31\"], \"I\": [\"01:06\", \"01:11\"], \"H\": [\"01:12\", \"01:17\"],"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"K\": [\"00:55\", \"00:59\"], \"J\": [\"01:00\", \"01:05\"], \"M\": [\"00:45\", \"00:49\"],"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"L\": [\"00:50\", \"00:54\"], \"O\": [\"00:36\", \"00:40\"], \"N\": [\"00:41\", \"00:44\"],"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Q\": [\"00:29\", \"00:31\"], \"P\": [\"00:32\", \"00:35\"], \"S\": [\"00:21\", \"00:24\"],"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"R\": [\"00:25\", \"00:28\"], \"U\": [\"00:15\", \"00:17\"], \"T\": [\"00:18\", \"00:20\"],"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"W\": [\"00:09\", \"00:11\"], \"V\": [\"00:12\", \"00:14\"], \"Y\": [\"00:03\", \"00:05\"],"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"X\": [\"00:06\", \"00:08\"], \"Z\": [\"00:00\", \"00:02\"]},"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "shuanang"
        },
        "content": "  \"P\": {\"P\": [\"00:00\", \"00:03\"], \"O\": [\"00:04\", \"00:07\"], \"N\": [\"00:08\", \"00:12\"],"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"M\": [\"00:13\", \"00:16\"], \"L\": [\"00:17\", \"00:21\"], \"K\": [\"00:22\", \"00:27\"],"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"J\": [\"00:28\", \"00:32\"], \"I\": [\"00:33\", \"00:38\"], \"H\": [\"00:39\", \"00:45\"],"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"G\": [\"00:46\", \"00:51\"], \"F\": [\"00:52\", \"00:59\"], \"E\": [\"01:00\", \"01:07\"],"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"D\": [\"01:08\", \"01:16\"], \"C\": [\"01:17\", \"01:38\"], \"B\": [\"01:39\", \"02:27\"],"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"A\": [\"02:28\", \"05:28\"], \"Q\": [\"\", \"\"], \"R\": [\"\", \"\"], \"S\": [\"\", \"\"],"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"T\": [\"\", \"\"], \"U\": [\"\", \"\"], \"V\": [\"\", \"\"], \"W\": [\"\", \"\"], \"X\": [\"\", \"\"],"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    \"Y\": [\"\", \"\"], \"Z\": [\"\", \"\"]}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shuanang": 180
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003c?import seedu.divelog.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "arjo129": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "\u003cfx:root type\u003d\"seedu.divelog.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "arjo129": 1
    }
  }
]
