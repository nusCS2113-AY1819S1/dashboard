[
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Divelog - Developer Guide v.1.0"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team CS2113-AY1819S1-W13-2` Â Â Â Â  Since: `Aug 2018` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Context"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "When a diver goes on a dive, the pressure underwater causes nitrogen to build up in the blood stream. When the diver returns to the surface, he or she has that level of nitrogen in his or her blood. However, due to the atmospheric pressure being lower than underwater, the partial pressure of nitrogen is different. Having too much nitrogen build up can be dangerous particularly if you are planning a second dive or going on a flight as the nitrogen can form bubbles inside oneâ€™s bloodstream. In order to solve this problem, divers manually calculate their â€œpressure groupsâ€?. The pressure groups are on a range from A,B,C all the way to Z. Depending on your pressure group you can attempt your next dive. It is generally advised to be below the â€œBâ€? pressure group before your next dive."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Before attempting your next dive, you have to plan your dive first! You want to dive to 15 metres for half an hour after your pressure group from your first dive is D. Are you sure it\u0027s safe to do so? Use our Divelog to find out!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "If there is still error after enabling them, you will need to go to `File` \u003e `Settings` \u003e `Build, Execution, Deployment` \u003e `Compiler` \u003e `Java Compiler` \u003e `Javac options` and add the following: `--add-modules\u003djavafx.fxml`. This is illustrated by the diagram below."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::commandlineparameters.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.divelog.MainApp` and try a few commands"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to the data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Some of the choices here was choosing the type of placeholders to use like `labels` etc to store the data. Eventually it boiled down to the nature of the data and how it was to be displayed at the end of the day."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a diveSession) and/or raise events."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the DiveLog data."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cDiveSession\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Some choices made here include the encapsulation of even simple values such as depth which is stored as a `DepthProfile` object."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "By doing so suppose we want to extend Depth to support complex dives with multiple depths or different units, we can simply update"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`DepthProfile` without breaking existing code."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th diveSession in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new diveSession. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the diveSession was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the diveSession being deleted)."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Looking Up Dive Tables For Pressure Groups"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "At the heart of the divelog app is the ability to automatically calculate nitrogen pressure groups."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "To do so we adhere to PADI\u0027s dive charts, available here https://elearning.padi.com/company0/tools/RDP_Table%20Met.pdf. These charts provide a lookup table for divers through which they can determine"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "their current pressure group. The underlying implementation for these charts can be found in the `PadiDiveTable` class."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "A such the dive tales are stored in the `resources` folder as JSON files. They are loaded using the `DiveTableUtil` class"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "via the FASTXML Jackson library. The `PadiDiveTable` itself is a singleton class. This choice was made as it makes sense to"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "load the Dive Tables only once at the stat into memory (although in its current form it is not the case). An example"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "interaction with `PadiDiveTable` and `DiveTableUtil` can be found in the sequence diagram below:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "image::PadiDiveTableUsage.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Internally at the moment, `DiveTableUtil#readJsonFileFromResources` has the following interaction:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "image::DiveTableUtilInternal.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Retrieving Dive Tables"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use JSON files"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to change data within tables."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues if the tables are too large as it reads from disk."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Hard code the tables"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Have mildly smaller impact on performance as data is loaded into memory at start up."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Very tedious to implement, results in unreadable code."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Minimising File Reads And Data Duplication"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice)**: Use a singleton class"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: It is possible to read the file only once and the memory used by the objects will only exist in one place."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "This saves both memory and disc writes."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Can be troublesome to implement."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2: ** Just use `PADIDiveTable` standard classes"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Wastes memory and performs unnecessary IO."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d CRUD for `DiveSession` objects"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "At its heart, the application is a divelog. The source code for this application was adopted from an addressbook application."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "The main implementation consideration was to minimize the number of changes in the existing addressbook class. At its heart"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "the Dive Log uses the Model which is described in (See \u003c\u003cDesign-Model\u003e\u003e). The overall flow for command execution is similar"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "to the case of undo. For additions, additions are made to the model, which is eventually committed to storage."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "An overall sequence diagram is as follows:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Consistency Checks For Diving And Retaining Order [TODO]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "Currently, this is still unimplemented. However, the plan would be to modify the `DiveSession` object such that it implements `java.lang.Comparable`."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "In doing so it allows for the whole model to be traversed in a linear fashion. At the same time, this allows for insertion of"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "new dives at the right locations efficiently through Binary Search. The sorting is achieved by time and date."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g. App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.divelog.ui` package."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.divelog.commons.StringUtilTest`"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.divelog.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.divelog.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a diveSession, and link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each diveSession, and remove the `tag` from each diveSession."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last diveSession in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside diveSession cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a diveSession specified in the `INDEX`. +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first diveSession to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first diveSession."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each diveSession later."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/diveSession/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`]."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`]."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the diveSession will be created without a remark)."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `diveLog.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsDiveLog.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/diveSession/Person.java[`Person`]."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the diveSession that it is currently building."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a diveSession."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "* Is a beginner Diver"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* Goes diving frequently."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "* Has the need to keep track of Nitrogen Levels so that he/she does not end up needing to undergo decompression."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: An automated desktop app to keep track of nitrogen levels for divers."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`, Null (Not Implementing) - `-`"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"2,2,2,2\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ".List of user stories"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d// tag::dataencryption[]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a... |I want to... | So that I can..."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "|Know my current pressure group"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "|Plan my next dive safely"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *`"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|Add dive entries"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "|So that I can know my pressure group."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|`**`"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "|Be able to enter data in local time"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "|Save time when calculating my pressure groups."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "|`**`"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "|Plan my dives ahead of performing them"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "|So that I know what a safe limit is."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "|`*`"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "|Diver"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "|to see where I have been"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "|Reminisce"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "|`-`"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "|Dive master"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "|Check my dive buddyâ€™s logs"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "|Make sure all of us have a safe trip"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `Dive Log Application` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add dive session"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver chooses to add a new dive session"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ". System returns and requests for data from Diver"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver adds time spent at different depths, marine species diver has seen"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ". System confirms the details"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver confirms the details"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ". System adds the dive session and shows it is successful"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver confirms"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ". System shows recommended time to next dive or flight"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The data entered is invalid. (i.e. The diver enters text instead of numeric values for depth.)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. System points to the invalid data and asks user to clarify data."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 3."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: View details of a dive session"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver selects dive session to view details of the dive session"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ". System returns the dive session details"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a dive session"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver selects dive session to edit"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ". System returns the parameters of the specific dive session"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver enters the new information of that dive session"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ". System confirms the edit of that dive session."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "* 5a. The data entered is invalid. (i.e. The diver enters text instead of numeric values for depth.)"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "** 5a1. System points to the invalid data entered and asks user to clarify data."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 5."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "* 7b. The user realizes the input is invalid. He enters undo."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "** 7b1. System rolls back the last edit."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Remove a dive session"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver selects the dive session to remove"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ". System confirms the deletion"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver confirms."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ". System removes dive session."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "* 5a. Diver cancels."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "** 5a1. System does not make any changes to current state."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends here."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Check current pressure group"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver opens system"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ". System shows him a list of dive sessions"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Diver requests system for his current pressure group"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". System displays his current pressure group, the time needed to the next pressure group, and the time needed for him to reach his desired pressure group as well as the recommended time to his next dive or flight."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 dive sessions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should allow users to select and view dives in addition to the command line."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to calculate the pressure groups as specified by PADIâ€™s dive table."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should have a simple tutorial walk through to orientate the users if it is their first time running the application"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "Author: Arjo Chakravarty"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "A few similar products exist out there."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "Firstly, one of the team members (Arjo) uses a paper equivalent of such a dive log. This dive log records all the necessary information and provides a user with the basic safety information of the PG being provided as fields. However, the pressure group information must be hand calculated leading to error or negligence."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "image::paper_notebook.jpg[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "Linus Torvalds, the benevolent dictator of the linux kernel and mastermind behind git has also created a dive log program. Linusâ€™s program, known as Subsurface, is written in C++ and uses the Qt library allowing for cross-platform usage."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "image::subsurface_1.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "Subsurface has a comprehensive interface for entering a lot of details. It allows the user to enter things such as the depth, who the dive master was, dive buddyâ€™s name and equipment. It also has a nice satellite map to show where you are planning the dive. The plot on the right hand side illustrates the depth. This includes the so called â€œsafety stopâ€? where the diver allows some of the nitrogen to be released from his bloodstream before surfacing. The plot also is capable of showing a nitrogen profile and a rough estimate of how much oxygen should be kept in reserve for each part of the dive. All of this make it a very complete product with the exception that its initial learning curve is fairly steep."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "image::subsurface_2.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "When the user first opens the dive log he or she is greeted with this screen, which is not very indicative of what exactly is going on. It takes the user a few attempts to figure out how to add a dive as the add dive is nested very deep inside the menu. It also does not display the pressure group anywhere. This can be confusing for beginner divers as they rely on pressure groups to ensure their own safety."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a diveSession"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a diveSession while all persons are listed"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No diveSession is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/*"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "*below is for later\u0027s edit"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "*/"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d New Parameters in DiveSession"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d ourDate (Date Start/ Date End)"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "The ourDate Class consist of a String. When using the `add` or `edit` feature, the inputs will be parsed and checked to be a 8 digit String, in the format of _[DDMMYYYY]_ through `ParserUtils`. Only Integers will be accepted."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Date Start and Date End will have prefixes `ds/` and `de/` respectively, and these prefixes will be used when using the `add` or `edit` feature."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d Timezone"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "The timeZone class consists of a Integer (ranging from -12 to +12). This integer is dependent on the user input, which is the timezone in the format of UTC. If there are no integers in this string, there will be an exception thrown."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Timezone will have prefix `tz/` which will be used when using the `add` or `edit` feature."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automatic Calculation of Pressure Group"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Takes into account the latest (in terms of time) Dive Session. Subtracting the current time from the latest dive, the method will be able to automatically calculate time until the current Pressure group will fall to the next group, which is the time until it is safe to dive again."
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d Pressure Group"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Pressure group utilises a 3d Array in the form of `hashmap\u003cint, hashmap\u003cstring, string\u003e\u003e`."
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Pressure groups range from A to Z. (i anyhow)."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "\u003d\u003d\u003d\u003d CompareUtils"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "CompareUtils is a helper method class implemented to assist with the automatic calculations of `PressureGroup`"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "The current methods in this Class include:"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `checkTimeDifference()` -- When 2 ourDate Strings and 2 time Strings parameters are passed, the method will return the time difference in number of minutes. This will be used in calculations"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `convertTimetoLocal()` -- This method uses the new `timeZone` parameter in DiveSession to convert any time to local time, based on the timeZone value (in UTC)."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "This method returns a long type of length 12, in the format of _[DDMMYYYYHHMM]_."
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `getCurrentDateTime()` -- This method returns the current time in `Date` format"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `getCurrentDateTimeLong()` -- This method returns the current time in `long` format, in _[DDMMYYYYHHMM]_"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `readTimeFromLong` -- This method"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "* `readDateFromLong()` -- This method"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 38,
      "-": 1098
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Dive Log - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Awesomest Dive Log is a dive log for tracking dives."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "It provides a simple one stop way for divers to input details of their dive and keep track of their nitrogen levels."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "This allows divers to plan their next trip safely."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Dive Log."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add l/LOCATION`, `LOCATION` is a parameter which can be used as `add l/Sentosa`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `â€¦`â€‹ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a dive session: `add`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Adds a dive session to the Dive Log."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Format: `add ds/DATE_STAERTED ts/TIME_DIVE_STARTED de/DATE_ENDED te/TIME_DIVE_ENDED ss/SAFETY_STOP  d/DEPTH  l/LOCATION pg/INITIAL_PRESSURE_GROUP pge/FINAL_PRESSURE_GROUP`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "TIP: Words in UPPER_CASE are the parameters, items in SQUARE_BRACKETS are optional. Order of parameters are fixed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Put a `ts/` before the time started(24 hours format - HHMM), te/time ended (24 hours format - HHMM), d/depth (in metres), l/ location (location name), per dive at v1.0) (optional) and pg/initial pressure group, pge/final pressure group."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "_Example:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "add ds/04082018 ts/0900 de/04082018  te/1020 ss/1015 d/15 l/Bukit Lagoon pg/C pge/F tz/+8_"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ".Table of Prefix and Data"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "[options\u003d\"header\"]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Data                                           |Prefix         |Example"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Date started / Ended (DDMMYYYY)                |ds or de       |ds/04082018 or de/05082018"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Time Started / Ended (DDMMYYYY)                |ts or de       |ts/0800 or te/0900"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Location                                       |l              |l/Sentosa"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Depth (integer value)                          |d              |d/18"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Initial/Final Pressure Group (Character Value) |pg or pge      |pg/A or pge/D"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|Timezone (in UTC)                              |tz             |tz/+12 or tz/-5"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all dives : `list`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all dives in the dive log. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a dive : `edit`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Edits an existing dive session in the Dive Log. +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [ts/TIME_START] [te/TIME_END] [ss/SAFETY_STOP_TIME] [d/DEPTH] [pg/PG_AT_START][pge/PG_AT_END][l/LOCATION]...`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the dive at the specified `INDEX`. The index refers to the index number shown in the displayed dive list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "`edit 1 pge/F l/Tioman`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating dives by location: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Finds dives whose location contain any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `tioman` will match `Tioman`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the location is searched."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Bali` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `Dive at Bali`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a dive : `delete`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Deletes the specified dive from the Dive Log. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the dive at the specified `INDEX`."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed dive list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd dive in the Dive Log."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Bali` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st dive in the results of the `find` command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a diveSession : `select`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the dive identified by the index number used in the displayed dive list. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the dive and loads the details of the dive at the specified `INDEX`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed diveSession list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Selects the 2nd dive in the Dive Log."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Bali` +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st dive in the results of the `find` command."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Restores the Dive Log to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Undoable commands: those commands that modify the Dive Log\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Clears all entries from the Dive Log. +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "WARNING: Once you cleared all entries, your data will not be recoverable"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "Luckily for you, your Dive Log data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Dive Log folder."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 33,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DIVE_LISTED_OVERVIEW \u003d \"%1$d dives listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME_FORMAT \u003d \"Invalid time format! (Not 24Hr format) \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d \"Invalid date format! (Not DDMMYYYY) \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final String MESSAGE_INVALID_TIMEZONE_FORMAT \u003d \"Invalid timezone format! (UTC format)\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/CompareUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import java.util.concurrent.TimeUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * A class with methods to compare Date and Time, with respect to Timezone"
      },
      {
        "lineNumber": 12,
        "content": " * @@author Cjunx"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class CompareUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Tells time difference between 2 timings in MINUTES (long)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public long checkTimeDifference(String startTime, String endTime, String startDate, String endDate)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        SimpleDateFormat format \u003d new SimpleDateFormat(\"DDMMYYYYHHMM\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String startTimeDate \u003d startDate.concat(startTime);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String endTimeDate \u003d endDate.concat(endTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date time1 \u003d format.parse(startTimeDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date time2 \u003d format.parse(endTimeDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long difference \u003d (time2.getTime() - time1.getTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return (difference / 1000);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Converts date and time into LOCAL time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * returns first 8 digits of Date in DDMMYYYY, next 4 digits in HHMM"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public Long convertTimeToLocal(Time time, OurDate date, TimeZone timezone) throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String timeNowString \u003d date.getOurDateString().concat(time.getTimeString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        SimpleDateFormat inputFormat \u003d new SimpleDateFormat(\"DDMMYYYYHHMM\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date oldTime \u003d inputFormat.parse(timeNowString);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Date newtime \u003d new Date(oldTime.getTime() + TimeUnit.HOURS.toMillis(timezone.getTimeZone()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String newDateTime \u003d new SimpleDateFormat(\"DDMMYYYYHHMM\").format(newtime);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long newDateTimeLong \u003d Integer.parseInt(newDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return newDateTimeLong;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * gets current date and time in Date"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public Date getCurrentDateTime() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"DDMMYYYYHHMM\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * gets current date and time in long"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public long getCurrentDateTimeLong() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Date currentDateTime \u003d getCurrentDateTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        String currentDateTimeString \u003d new SimpleDateFormat(\"DDMMYYYYHHMM\").format(currentDateTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long currentDateTimeLong \u003d Integer.parseInt(currentDateTimeString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return currentDateTimeLong;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Converts DDMMYYYYHHMM into DDMMYYYY"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public long readTimeFromLong(long date) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long time;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        time \u003d date % 10000;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     * Converts DDMMYYYYHHMM into HHMM"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public long readDateFromLong(long longdate) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        long date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        date \u003d longdate / 10000;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "cjunxiang": 79,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/divelog/commons/util/DiveTableUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.datatype.jsonorg.JsonOrgModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Loads dive tables from JSON files"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveTableUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .findAndRegisterModules()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            .registerModule(new JsonOrgModule());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final String filename;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveTableUtil(String filename) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.filename \u003d filename;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Retrieves a JSONObject file from resources"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return JSONObject containing the dive tables"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws IOException if file format is wrong."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public JSONObject readJsonFileFromResources() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ClassLoader classLoader \u003d getClass().getClassLoader();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        File file \u003d new File(Objects.requireNonNull(classLoader.getResource(filename)).getFile());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        JSONObject jsonObject \u003d objectMapper.readValue(file, JSONObject.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return jsonObject;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "arjo129": 27
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the divelog book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the divelog book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_START + \"DATE_START (DDMMYYYY Format) \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_TIME_START + \"START_TIME (24Hr Format) \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_END + \"DATE_END (DDMMYYYY Format) \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_TIME_END + \"END_TIME (24Hr Format) \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_SAFETY_STOP + \"SAFETY_STOP_TIME (24Hr Format) \\n\\t\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_DEPTH + \"DEPTH \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_START + \"PRESSURE_GROUP_START \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_END + \"PRESSURE_GROUP_END \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"LOCATION\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_TIMEZONE + \"TIMEZONE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_START + \"04082018 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_TIME_START + \"0700 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_DATE_END + \"04082018 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_TIME_END + \"0945 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_SAFETY_STOP + \"0930 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_DEPTH + \"15 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_START + \"A \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_END + \"R \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"Sentosa \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_TIMEZONE + \"+8\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New dive session added!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DiveSession toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(DiveSession dive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(dive);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d dive;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addDiveSession(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitDiveLog();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 6,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.parser.CliSyntax;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the divelog book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the dive identified \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed dive list. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE_START + \"DATE_START] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TIME_START + \"TIME_START] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DATE_END + \"DATE_END] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_TIME_END + \"TIME_END] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_SAFETY_STOP + \"SAFETY_STOP_TIME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_DEPTH + \"DEPTH] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PRESSURE_GROUP_START + \"PG_AT_START]\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_PRESSURE_GROUP_END + \"PG_AT_END]\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + CliSyntax.PREFIX_LOCATION + \"LOCATION]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + CliSyntax.PREFIX_PRESSURE_GROUP_END + \"F \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_LOCATION + \"Tioman \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            + CliSyntax.PREFIX_TIMEZONE + \"+7 \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_DIVE_SUCCESS \u003d \"Edited Dive: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditDiveDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditDiveDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditDiveDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cDiveSession\u003e lastShownList \u003d model.getFilteredDiveList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        DiveSession diveToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        DiveSession editedDive \u003d createEditedDive(diveToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateDiveSession(diveToEdit, editedDive);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (seedu.divelog.model.dive.exceptions.DiveNotFoundException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredDiveList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitDiveLog();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_DIVE_SUCCESS, editedDive));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static DiveSession createEditedDive(DiveSession diveToEdit, EditDiveDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert diveToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        OurDate dateStart \u003d editPersonDescriptor.getDateStart().orElse(diveToEdit.getDateStart());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Time start \u003d editPersonDescriptor.getStart().orElse(diveToEdit.getStart());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        OurDate dateEnd \u003d editPersonDescriptor.getDateEnd().orElse(diveToEdit.getDateEnd());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Time end \u003d editPersonDescriptor.getEnd().orElse(diveToEdit.getEnd());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Time safetyStop \u003d editPersonDescriptor.getSafetyStop().orElse(diveToEdit.getSafetyStop());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        PressureGroup pressureGroupAtBeginning \u003d editPersonDescriptor.getPressureGroupAtBeginning()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElse(diveToEdit.getPressureGroupAtBeginning());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        PressureGroup pressureGroupAtEnd \u003d editPersonDescriptor.getPressureGroupAtEnd()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElse(diveToEdit.getPressureGroupAtEnd());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Location location \u003d editPersonDescriptor.getLocation().orElse(diveToEdit.getLocation());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        DepthProfile depth \u003d editPersonDescriptor.getDepthProfile().orElse(diveToEdit.getDepthProfile());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        TimeZone timezone \u003d editPersonDescriptor.getTimeZone().orElse(diveToEdit.getTimeZone());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return new DiveSession(dateStart, start, safetyStop, dateEnd, end, pressureGroupAtBeginning, pressureGroupAtEnd,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                location, depth, timezone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditDiveDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        private OurDate dateStart;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Time start;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Time safetyStop;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        private OurDate dateEnd;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Time end;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private PressureGroup pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        private PressureGroup pressureGroupAtEnd;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private DepthProfile depthProfile;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        private TimeZone timezone;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditDiveDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditDiveDescriptor(EditDiveDescriptor descriptor) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            setDateStart(descriptor.dateStart);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setStart(descriptor.start);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setSafetyStop(descriptor.safetyStop);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            setDateEnd(descriptor.dateEnd);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            setEnd(descriptor.end);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            setPressureGroupAtBeginning(descriptor.pressureGroupAtBeginning);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            setPressureGroupAtEnd(descriptor.pressureGroupAtEnd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            setLocation(descriptor.location);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setDepthProfile(descriptor.depthProfile);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            setTimeZone(descriptor.timezone);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(dateStart, start, safetyStop, dateEnd, end,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    pressureGroupAtBeginning, pressureGroupAtEnd, location, depthProfile, timezone);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditDiveDescriptor)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            EditDiveDescriptor e \u003d (EditDiveDescriptor) other;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return getDateStart().equals(e.getDateStart())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getStart().equals(e.getStart())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getDateEnd().equals(e.getDateEnd())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEnd().equals(e.getEnd())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPressureGroupAtBeginning().equals(e.getPressureGroupAtBeginning())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPressureGroupAtEnd().equals(e.getPressureGroupAtEnd())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getDepthProfile().equals(e.getDepthProfile())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTimeZone().equals(e.getTimeZone());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void setDateStart(OurDate dateStart) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void setDateEnd(OurDate dateEnd) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setStart(Time start) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.start \u003d start;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setSafetyStop(Time safetyStop) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.safetyStop \u003d safetyStop;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEnd(Time end) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            this.end \u003d end;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPressureGroupAtBeginning(PressureGroup pressureGroupAtBeginning) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            this.pressureGroupAtBeginning \u003d pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPressureGroupAtEnd(PressureGroup pressureGroupAtEnd) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.pressureGroupAtEnd \u003d pressureGroupAtEnd;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setDepthProfile(DepthProfile depthProfile) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            this.depthProfile \u003d depthProfile;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public void setTimeZone(TimeZone timezone) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public Optional\u003cOurDate\u003e getDateStart() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return Optional.ofNullable(dateStart);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public Optional\u003cOurDate\u003e getDateEnd() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return Optional.ofNullable(dateEnd);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cTime\u003e getStart() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(start);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cTime\u003e getSafetyStop() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(safetyStop);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cTime\u003e getEnd() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(end);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPressureGroup\u003e getPressureGroupAtBeginning() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(pressureGroupAtBeginning);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPressureGroup\u003e getPressureGroupAtEnd() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(pressureGroupAtEnd);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cDepthProfile\u003e getDepthProfile() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(depthProfile);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        public Optional\u003cTimeZone\u003e getTimeZone() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            return Optional.ofNullable(timezone);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 41,
      "-": 235
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                        CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        CliSyntax.PREFIX_PRESSURE_GROUP_END,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_LOCATION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        CliSyntax.PREFIX_TIMEZONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                CliSyntax.PREFIX_PRESSURE_GROUP_END,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                CliSyntax.PREFIX_LOCATION)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        ParserUtil.checkTimeformat(argMultimap);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        ParserUtil.checkDateformat(argMultimap);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        ParserUtil.checkTimeZoneformat(argMultimap);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        OurDate dateStart \u003d new OurDate(argMultimap.getValue(CliSyntax.PREFIX_DATE_START).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Time startTime \u003d new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        OurDate dateEnd \u003d new OurDate(argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Time endTime \u003d new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Time safetyStop \u003d new Time(argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        PressureGroup pressureGroupAtBegining \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new PressureGroup(argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_START).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        PressureGroup pressureGroupAtEnd \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new PressureGroup(argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_END).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        Location location \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new Location(argMultimap.getValue(CliSyntax.PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        DepthProfile depthProfile \u003d ParserUtil.parseDepth(argMultimap.getValue(CliSyntax.PREFIX_DEPTH).get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        TimeZone timezone \u003d new TimeZone(argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        DiveSession dive \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new DiveSession(dateStart, startTime, safetyStop, dateEnd, endTime, pressureGroupAtBegining,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                        pressureGroupAtEnd, location, depthProfile, timezone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(dive);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 29,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final Prefix PREFIX_DATE_START \u003d new Prefix(\"ds/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TIME_START \u003d new Prefix(\"ts/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final Prefix PREFIX_DATE_END \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TIME_END \u003d new Prefix(\"te/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SAFETY_STOP \u003d new Prefix(\"ss/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DEPTH \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PRESSURE_GROUP_START \u003d new Prefix(\"pg/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PRESSURE_GROUP_END \u003d new Prefix(\"pge/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public static final Prefix PREFIX_TIMEZONE \u003d new Prefix(\"tz/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_DATE_START,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_TIME_START,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_DATE_END,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_TIME_END,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_SAFETY_STOP,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_DEPTH,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_PRESSURE_GROUP_START,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_PRESSURE_GROUP_END,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        CliSyntax.PREFIX_LOCATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        EditCommand.EditDiveDescriptor editPersonDescriptor \u003d new EditCommand.EditDiveDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DATE_START).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setStart(new Time(argMultimap.getValue(CliSyntax.PREFIX_DATE_START).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIME_START).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setStart(new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setSafetyStop(new Time(argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DATE_END).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setStart(new Time(argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIME_END).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setEnd(new Time(argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DEPTH).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setDepthProfile("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    ParserUtil.parseDepth(argMultimap.getValue(CliSyntax.PREFIX_DEPTH).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_START).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setPressureGroupAtBeginning("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    ParserUtil.parsePressureGroup(argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_START).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_END).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setPressureGroupAtEnd("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    ParserUtil.parsePressureGroup(argMultimap.getValue(CliSyntax.PREFIX_PRESSURE_GROUP_END).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            editPersonDescriptor.setLocation("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    new Location(argMultimap.getValue(CliSyntax.PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "arjo129": 69
    }
  },
  {
    "path": "src/main/java/seedu/divelog/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_DEPTH \u003d \"Depth must be a number.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PRESSURE_GROUP \u003d \"Pressure group must be a single alphabet from A-Z\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses depth profile"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth - The depth in String Format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return a Depth Profile object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException if the depth is not a valid float."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static DepthProfile parseDepth(String depth) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new DepthProfile(Float.valueOf(depth));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (NumberFormatException n) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_DEPTH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *  @author Cjunx"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *  Returns true if string given is DATE FORMATTED"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static void checkDateformat(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_DATE_START).get().length() !\u003d 8"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                || argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get().length() !\u003d 8) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_DATE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_DATE_START).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_DATE_END).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_DATE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *  @author Cjunx"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *  Returns true if string given is TIMEZONE FORMATTED"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static void checkTimeZoneformat(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().length() !\u003d 2"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().length() !\u003d 3) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIMEZONE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().startsWith(\"+\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(CliSyntax.PREFIX_TIMEZONE).get().startsWith(\"-\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIMEZONE_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @author Cjunx"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static void checkTimeformat(ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get().length() !\u003d 4"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                || argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get().length() !\u003d 4"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                || argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get().length() !\u003d 4) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIME_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_TIME_END).get());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_SAFETY_STOP).get());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Integer.parseInt(argMultimap.getValue(CliSyntax.PREFIX_TIME_START).get());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(String.format(Messages.MESSAGE_INVALID_TIME_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Parses a pressure group"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup - The pressure group as a string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return a {@code PressureGroup} object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws ParseException if the pressureGroup is not a valid pressure group. {@see PressureGroup#PressureGroup}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static PressureGroup parsePressureGroup (String pressureGroup) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!PressureGroup.isValid(pressureGroup)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_PRESSURE_GROUP);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 2,
      "-": 29,
      "arjo129": 84
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/DepthProfile.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Keeps track of the Depth of a dive."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Currently as of v1.1, only simple dives to a fixed depth are supported"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * TODO: Implement complex dives"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DepthProfile {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String DEPTH_VALIDATION_REGEX \u003d \"[+-]?([0-9]*[.])?[0-9]+\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final float depth;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DepthProfile(float depth) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assert depth \u003e 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.depth \u003d depth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Verifies the validity of a depth argument"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth The depth. Must be a decimal number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return if the depth string is valid, return true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static boolean isValidDepth(String depth) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return depth.matches(DEPTH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public float getDepth() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return depth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof DepthProfile)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DepthProfile other \u003d (DepthProfile) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return other.getDepth() \u003d\u003d depth;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "arjo129": 38
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/DiveSession.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * @author arjo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * This class represents a single dive session"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class DiveSession {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final OurDate dateStart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Time start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Time safetyStop;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final OurDate dateEnd;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Time end;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PressureGroup pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PressureGroup pressureGroupAtEnd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DepthProfile depthProfile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final TimeZone timezone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public DiveSession("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            OurDate dateStart, Time start, Time safetyStop,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            OurDate dateEnd, Time end,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            PressureGroup pressureGroupAtBeginning,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            PressureGroup pressureGroupAtEnd, Location location,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            DepthProfile depthProfile, TimeZone timezone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.safetyStop \u003d safetyStop;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pressureGroupAtBeginning \u003d pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pressureGroupAtEnd \u003d pressureGroupAtEnd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.depthProfile \u003d depthProfile;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public OurDate getDateStart() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateStart;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public OurDate getDateEnd() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateEnd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Time getStart() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Time getEnd() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return end;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public PressureGroup getPressureGroupAtBeginning() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PressureGroup getPressureGroupAtEnd() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return pressureGroupAtEnd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Time getSafetyStop() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return safetyStop;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public DepthProfile getDepthProfile() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return depthProfile;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public TimeZone getTimeZone() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return timezone;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof DiveSession)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DiveSession other \u003d (DiveSession) obj;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return other.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getDateStart().equals(getDateStart())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getDateEnd().equals(getDateEnd())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getStart().equals(getStart())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getSafetyStop().equals(getSafetyStop())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPressureGroupAtBeginning().equals(getPressureGroupAtBeginning())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPressureGroupAtEnd().equals(getPressureGroupAtEnd())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getEnd().equals(getEnd())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getDepthProfile().equals(getDepthProfile())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getTimeZone().equals(getTimeZone());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(\"Dive Location: \" + getLocation().getLocationName() + \"\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(\"\\tStart: \" + getDateStart().getOurDateString() + \" \" + getStart().getTimeString() + \"\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(\"\\tEnd: \" + getDateEnd().getOurDateString() + \" \" + getEnd().getTimeString() + \"\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(\"\\tPressureGroup: \" + getPressureGroupAtBeginning().getPressureGroup() + \"-\u003e\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + getPressureGroupAtEnd().getPressureGroup() + \"\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(\"\\tDepth: \" + getDepthProfile().getDepth() + \"\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        stringBuilder.append(\"\\tTime Zone:\" + getTimeZone().getTimeZoneString());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return stringBuilder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 26,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/OurDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * This is the date class:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * TODO: Implement parsing of date etc."
      },
      {
        "lineNumber": 6,
        "content": " * @@author Cjunx"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class OurDate {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public OurDate(String date) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.value \u003d date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public String getOurDateString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof OurDate)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((OurDate) obj).getOurDateString().equals(value);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "cjunxiang": 20,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/PressureGroup.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "import seedu.divelog.model.divetables.PadiDiveTable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Represents a pressure group"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class PressureGroup {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String PRESSURE_GROUP_VALIDATION_REGEX \u003d \"([A-Z||a-z])\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final String pressureGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private String newPg \u003d \" \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private int totalBottomTime \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Constructs a pressure group object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup A String that must be 1 alphabetical character in length"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup(String pressureGroup) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assert pressureGroup.length() \u003d\u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assert Character.isLetter(pressureGroup.charAt(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.pressureGroup \u003d pressureGroup.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    //@@author shuanang"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public PressureGroup(String pressureGroup, int newDepth, int minutesRepeatDive) throws JSONException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assert pressureGroup.length() \u003d\u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assert Character.isLetter(pressureGroup.charAt(0));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        this.pressureGroup \u003d pressureGroup.toUpperCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        JSONArray arr \u003d padiDiveTable.depthToTimes(new DepthProfile(newDepth), new PressureGroup(pressureGroup));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assert minutesRepeatDive \u003c\u003d arr.getInt(1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        this.totalBottomTime \u003d arr.getInt(0) + minutesRepeatDive;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pg \u003d padiDiveTable.depthToPg(new DepthProfile(newDepth), this.totalBottomTime);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        newPg \u003d pg.getPressureGroup();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public String getPressureGroup() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return pressureGroup;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public String getNewPressureGroup() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return newPg;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * Checks if a string is a valid pressure group. A valid pressure group consists only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * of 1 alphabetical character."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @param token"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     * @return The validity of the string"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shuanang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public static boolean isValid(String token) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return token.matches(PRESSURE_GROUP_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        if (!(obj instanceof PressureGroup)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shuanang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pg \u003d (PressureGroup) obj;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        return pg.getPressureGroup().equals(pressureGroup);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "shuanang": 40,
      "arjo129": 27
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/dive/TimeZone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * This is the timeZone class: assumes UTC +8 default"
      },
      {
        "lineNumber": 5,
        "content": " * @@author Cjunx"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " * TODO: Implement parsing of time, locales etc."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "public class TimeZone {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private int timeZoneDifference;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public TimeZone(String timezone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            this.timeZoneDifference \u003d Integer.parseInt(timezone);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            System.err.println(\"Illegal Timezone input\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getTimeZone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return timeZoneDifference;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTimeZoneString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"\" + timeZoneDifference;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof TimeZone)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return ((TimeZone) obj).timeZoneDifference \u003d\u003d timeZoneDifference;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "cjunxiang": 20,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/divetables/PadiDiveTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.model.divetables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.util.DiveTableUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * This class loads dive tables"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class PadiDiveTable {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(PadiDiveTable.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String TIME_VALIDATION_REGEX \u003d \"[0-9][0-9][:][0-9][0-9]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static PadiDiveTable diveTable \u003d new PadiDiveTable();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveTableUtil surfaceTable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveTableUtil depthToPressureGroup;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final DiveTableUtil diveTableUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private PadiDiveTable() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.surfaceTable \u003d new DiveTableUtil(\"divetables/surface_table.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.depthToPressureGroup \u003d new DiveTableUtil(\"divetables/Dive_table_1.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.diveTableUtil \u003d new DiveTableUtil(\"divetables/Dive_table_2.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        logger.info(\"Successfully loaded dive tables\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static PadiDiveTable getInstance() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return diveTable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Looks up surface interval table"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup1 - Pressure group along x axis"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup2 - Pressure group along y axis"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return returns a JSON Array with the surface intervals"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public JSONArray getSurfaceTable(PressureGroup pressureGroup1, PressureGroup pressureGroup2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"Attempting to read json\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d surfaceTable.readJsonFileFromResources();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"attempting to lookup data\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(pressureGroup1.getPressureGroup());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return column.getJSONArray(pressureGroup2.getPressureGroup());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException json) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Malformatted json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + e.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Get data from the surface interval table"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param startingPressureGroup - Initial pressure group"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param minutes - number of minutes"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return - Final pressure group"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup fromSurfaceInterval(PressureGroup startingPressureGroup, float minutes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d surfaceTable.readJsonFileFromResources();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(startingPressureGroup.getPressureGroup());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            Iterator\u003cString\u003e keys \u003d column.keys();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            while (keys.hasNext()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                String pressureGroup \u003d keys.next();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                JSONArray interval \u003d column.getJSONArray(pressureGroup);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String start \u003d interval.getString(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    String end \u003d interval.getString(1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    float minInterval \u003d timeToMinutes(start);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    float maxInterval \u003d timeToMinutes(end);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    if (minutes \u003e\u003d minInterval \u0026\u0026 minutes \u003c\u003d maxInterval) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                        return new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                } catch (JSONException je) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    logger.severe(\"Malformatted json: \" + je.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                } catch (InvalidTimeException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                    logger.warning(\"Could not parse time\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException je) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Malformatted json: \" + je.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + e.getMessage());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return new PressureGroup(\"A\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Converts a duration in HH:MM to minutes"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @throws InvalidTimeException"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public float timeToMinutes(String time) throws InvalidTimeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (time.matches(TIME_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String[] minutes \u003d time.split(\":\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return Integer.parseInt(minutes[0]) * 60 + Integer.parseInt(minutes[1]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            throw new InvalidTimeException();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Looks up depth to PG"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth - The depth"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param duration - minutes;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public PressureGroup depthToPg(DepthProfile depth, int duration) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"Attempting to read json\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d depthToPressureGroup.readJsonFileFromResources();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.info(\"attempting to lookup data\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String key \u003d findClosestKey(table, depth.getDepth());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(key);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            key \u003d findClosestKey(column, duration);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String pressureGroup \u003d column.getString(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return new PressureGroup(pressureGroup);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + io.getMessage());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException json) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to parse JSON\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Reads the depth and pressure group and returns an array containing the minimum time"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param depth - depth dove to"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param pressureGroup - pressure group at time"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @return an array containing"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public JSONArray depthToTimes(DepthProfile depth, PressureGroup pressureGroup) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject table \u003d diveTableUtil.readJsonFileFromResources();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String key \u003d findClosestKey(table, depth.getDepth());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            JSONObject column \u003d table.getJSONObject(key);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return column.getJSONArray(pressureGroup.getPressureGroup());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to read dive tables due to an IOException\\n\\t\" + io.getMessage());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        } catch (JSONException json) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            logger.severe(\"Failed to parse JSON\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Looks for the nearest key"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param object - JSON Object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @param key - The key that is nearest to that value."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static String findClosestKey(JSONObject object, float key) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Iterator\u003cString\u003e keys \u003d object.keys();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ArrayList\u003cInteger\u003e integerKeys \u003d new ArrayList\u003cInteger\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        while (keys.hasNext()) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            String curr \u003d keys.next();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            integerKeys.add(Integer.parseInt(curr));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        Collections.sort(integerKeys);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        while (key \u003e integerKeys.get(i)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return integerKeys.get(i).toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "arjo129": 163
    }
  },
  {
    "path": "src/main/java/seedu/divelog/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.DiveLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.ReadOnlyDiveLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code DiveLog} with sample data."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static DiveSession[] getSampleDives() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DiveSession[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            new DiveSession(new OurDate(\"04082018\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    new Time(\"0700\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Time(\"0945\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    new OurDate(\"04082018\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Time(\"1000\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    new PressureGroup(\"A\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    new PressureGroup(\"R\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Location(\"Bali\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    new DepthProfile(10.0f),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                    new TimeZone(\"+5\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyDiveLog getSampleDiveLog() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        DiveLog sampleDl \u003d new DiveLog();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        for (DiveSession dive : getSampleDives()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleDl.addDive(dive);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleDl;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 9,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/divelog/storage/XmlAdaptedDiveSession.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.OurDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.Time;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "import seedu.divelog.model.dive.TimeZone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the DiveSession."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedDiveSession {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DiveSession\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private String dateStart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String safetyStop;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private String dateEnd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String pressureGroupAtEnd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private float depthProfile;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    @XmlElement(required \u003d false)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    private String timezone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedDiveSession."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedDiveSession() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedDiveSession} with the given person details."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "    public XmlAdaptedDiveSession("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            String dateStart, String startTime, String safetyStop, String dateEnd,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            String endTime, String pressureGroupAtBeginning,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "            String pressureGroupAtEnd, String location, float depthProfile, String timezone) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateStart \u003d dateStart;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.safetyStop \u003d safetyStop;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateEnd \u003d dateEnd;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pressureGroupAtBeginning \u003d pressureGroupAtBeginning;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pressureGroupAtEnd \u003d pressureGroupAtEnd;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.depthProfile \u003d depthProfile;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.timezone \u003d timezone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given DiveSession into this class for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedDiveSession"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedDiveSession(DiveSession source) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateStart \u003d source.getDateStart().getOurDateString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startTime \u003d source.getStart().getTimeString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.safetyStop \u003d source.getSafetyStop().getTimeString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        this.dateEnd \u003d source.getDateEnd().getOurDateString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endTime \u003d source.getEnd().getTimeString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.location \u003d source.getLocation().getLocationName();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pressureGroupAtBeginning \u003d source.getPressureGroupAtBeginning().getPressureGroup();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.pressureGroupAtEnd \u003d source.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.depthProfile \u003d source.getDepthProfile().getDepth();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.timezone \u003d Integer.toString(source.getTimeZone().getTimeZone());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted dive session object into the model\u0027s DiveSession object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public DiveSession toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!PressureGroup.isValid(pressureGroupAtBeginning)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(\"Invalid pressure group!!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!PressureGroup.isValid(pressureGroupAtEnd)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(\"Invalid pressure group!!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return new DiveSession(new OurDate(dateStart), new Time(startTime), new Time(safetyStop),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new OurDate(dateEnd), new Time(endTime),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new PressureGroup(pressureGroupAtBeginning), new PressureGroup(pressureGroupAtEnd),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                new Location(location), new DepthProfile(depthProfile), new TimeZone(timezone));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedDiveSession)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedDiveSession x \u003d (XmlAdaptedDiveSession) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "        return dateStart.equals(x.dateStart)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                \u0026\u0026 startTime.equals(x.startTime)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjunxiang"
        },
        "content": "                \u0026\u0026 dateEnd.equals(x.dateEnd)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 endTime.equals(x.endTime)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 safetyStop.equals(x.safetyStop)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 location.equals(x.location)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 pressureGroupAtEnd.equals(x.pressureGroupAtEnd)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 pressureGroupAtBeginning.equals(x.pressureGroupAtBeginning)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 depthProfile \u003d\u003d x.depthProfile;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjunxiang": 24,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/divelog/ui/DiveSessionCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * An UI component that displays information of a {@code DiveSession}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveSessionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DIVE_PREFIX \u003d \"Dive at \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String DEPTH_UNITS \u003d \"m\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String FXML \u003d \"DiveListCards.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on DiveLog level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public final DiveSession dive;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label depth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionCard(DiveSession dive, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        this.dive \u003d dive;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        name.setText(DIVE_PREFIX + dive.getLocation().getLocationName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        depth.setText(dive.getDepthProfile().getDepth() + DEPTH_UNITS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(other instanceof DiveSessionCard)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSessionCard card \u003d (DiveSessionCard) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "                \u0026\u0026 dive.equals(card.dive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "arjo129": 54
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BrowserPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_DIVE_DEPTH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_DIVE_LOCATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_SAFETY_STOP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.ui.BrowserPanel.FORMAT_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * A handler for the {@code BrowserPanel} of the UI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class BrowserPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public static final String BROWSER_ID \u003d \"#\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String LOCATION_ID \u003d \"#diveLocation\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String DEPTH_FIELD_ID \u003d \"#diveDepth\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String PG_START_ID \u003d \"#pgStart\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String PG_END_ID \u003d \"#pgEnd\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String START_ID \u003d \"#startTime\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String END_ID \u003d \"#endTime\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String SAFETY_STOP_ID \u003d \"#safetyStop\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label diveLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label diveDepth;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label pgStart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label pgEnd;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private Label safetyStop;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public BrowserPanelHandle(Node node) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        super(node);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveLocation \u003d getChildNode(LOCATION_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        diveDepth \u003d getChildNode(DEPTH_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pgStart \u003d getChildNode(PG_START_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        pgEnd \u003d getChildNode(PG_END_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        startTime \u003d getChildNode(START_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        endTime \u003d getChildNode(END_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        safetyStop \u003d getChildNode(SAFETY_STOP_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!(obj instanceof DiveSession)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        DiveSession dive \u003d (DiveSession) obj;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String location \u003d String.format(FORMAT_DIVE_LOCATION, dive.getLocation().getLocationName());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!location.equals(diveLocation.getText())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String depth \u003d String.format(FORMAT_DIVE_DEPTH, dive.getDepthProfile().getDepth());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!depth.equals(diveDepth.getText())) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String startingPG \u003d dive.getPressureGroupAtBeginning().getPressureGroup();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!startingPG.equals(pgStart.getText())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String endingPG \u003d dive.getPressureGroupAtEnd().getPressureGroup();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!endingPG.equals(pgEnd.getText())) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String timeStart \u003d String.format(FORMAT_START_TIME, dive.getStart().getTimeString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!timeStart.equals(startTime.getText())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String timeEnd \u003d String.format(FORMAT_END_TIME, dive.getEnd().getTimeString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!timeEnd.equals(endTime.getText())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        String timeSafetyStop \u003d String.format(FORMAT_SAFETY_STOP, dive.getSafetyStop().getTimeString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        if (!timeSafetyStop.equals(safetyStop.getText())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "arjo129": 69
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/DiveSessionCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DiveSession;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.ui.DiveSessionCard;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjo129"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjo129"
        },
        "content": " * Provides a handle to a dive card in the dive list panel."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjo129"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class DiveSessionCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private static final String DEPTH_FIELD_ID \u003d \"#depth\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    private final Label depth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public DiveSessionCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        depth \u003d getChildNode(DEPTH_FIELD_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public String getDepth() { return depth.getText(); }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * Returns true if this handle contains {@code dive}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     * TODO: Check depth also!!"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public boolean equals(DiveSession dive) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        return getName().equals(DiveSessionCard.DIVE_PREFIX + dive.getLocation().getLocationName());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "arjo129": 38
    }
  },
  {
    "path": "src/test/java/seedu/divelog/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.logic.parser.ParserUtil.MESSAGE_INVALID_DEPTH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.divelog.testutil.TypicalIndexes.INDEX_FIRST_DIVE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_DIVE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_DIVE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void parseDepth_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //No white spaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new DepthProfile(1.0f), ParserUtil.parseDepth(\"1.0\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        //Trailing whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(new DepthProfile(1.0f), ParserUtil.parseDepth(\" 1.0  \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    //@@author arjo129"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void parseDepth_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_DEPTH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        ParserUtil.parseDepth(\"otototo MAMAMAMA\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "arjo129": 17
    }
  },
  {
    "path": "src/test/java/seedu/divelog/model/dive/PressureGroupTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.model.dive;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shuanang"
        },
        "content": "//@@author shuanang"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shuanang"
        },
        "content": "public class PressureGroupTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shuanang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    public void pressureGroup_repeatDive() throws JSONException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        PressureGroup pg \u003d new PressureGroup(\"d\", 14, 50);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shuanang"
        },
        "content": "        assertEquals(pg.getNewPressureGroup(), \"T\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shuanang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shuanang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "shuanang": 9
    }
  },
  {
    "path": "src/test/java/seedu/divelog/model/divetables/PadiDiveTableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.divelog.model.divetables;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONArray;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.json.JSONException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.DepthProfile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.PressureGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.divelog.model.dive.exceptions.InvalidTimeException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjo129"
        },
        "content": "//@@author arjo129"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjo129"
        },
        "content": "public class PadiDiveTableTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void getSurfaceTable_canRead() throws JSONException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        JSONArray arr \u003d padiDiveTable.getSurfaceTable(new PressureGroup(\"A\"), new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.get(0).toString(),\"00:00\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.get(1).toString(),\"03:00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void getSurfaceTable_canCalculateDivePressure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PressureGroup pressureGroup \u003d new PressureGroup(\"c\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(padiDiveTable.fromSurfaceInterval(pressureGroup, 22.0f), new PressureGroup(\"b\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void depthToPressuregroup_canRead() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PressureGroup pg \u003d padiDiveTable.depthToPg(new DepthProfile(10), 122);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(pg.getPressureGroup(),\"T\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void depthToTimes_canRead() throws JSONException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        JSONArray arr \u003d padiDiveTable.depthToTimes(new DepthProfile(10), new PressureGroup(\"A\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.getInt(0), 10);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(arr.getInt(1),209);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_emptyStringThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_tooManyDigitsThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"000:09\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_tooManyMinutesThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"00:090\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_tooManyColonsThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"00:00:00\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_lettersThrowsException () throws InvalidTimeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        thrown.expect(InvalidTimeException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        padiDiveTable.timeToMinutes(\"AA:00\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjo129"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    public void timeToMinutes_correctConversion() throws InvalidTimeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        PadiDiveTable padiDiveTable \u003d PadiDiveTable.getInstance();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arjo129"
        },
        "content": "        assertEquals(padiDiveTable.timeToMinutes(\"12:12\"), 732);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arjo129"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arjo129"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "arjo129": 77
    }
  }
]
