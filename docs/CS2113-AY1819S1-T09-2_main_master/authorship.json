[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Something Daily"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "https://travis-ci.org/CS2113-AY1819S1-T09-2/main[image:https://travis-ci.org/CS2113-AY1819S1-T09-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "https://coveralls.io/github/CS2113-AY1819S1-T09-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2113-AY1819S1-T09-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "https://www.codacy.com/app/arty9/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2113-AY1819S1-T09-2/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/3d7dd42b99cf438eadcea16b80457d11[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop task and expenditure tracker application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java application intended to assist students in managing all of their academic work and spendings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code that is based on https://github.com/se-edu/addressbook-level4[Address Book L4], a Java sample application intended for students in learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Features:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** A more sophisticated GUI that includes a list  panel and an in-built Browser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** More test cases, including automated GUI testing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "* This application is built upon https://github.com/se-edu/addressbook-level4[Address Book L4] by https://github.com/se-edu[SE-EDU]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 34,
      "arty9": 4
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    implementation group: \u0027org.jfree\u0027, name: \u0027jfreechart\u0027, version: \u00271.0.19\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "    archiveName \u003d \u0027somethingdaily.jar\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arty9"
        },
        "content": "//allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level4\u0027,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level4\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 245,
      "feijunzi": 1,
      "arty9": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Something Daily was developed by the https://se-edu.github.io/docs/Team.html[T09-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Wang Shining"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "image::SHININGGGG.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/SHININGGGG[github]] [\u003c\u003cSHININGGGG#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "Responsibilities: Expenditure tracker \u0026 Calender components"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Tay Ran Tian"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "image::arty9.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/arty9[github]] [\u003c\u003carty9#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "Responsibilities: To-do list component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Xin Shenzi"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "image::feijunzi.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/feijunzi[github]] [\u003c\u003cfeijunzi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "Responsibilities: Expenditure tracker component"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Xiao Yunhan"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "image::XiaoYunhan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "{empty}[http://github.com/XiaoYunhan[github]] [\u003c\u003cXiaoYunhan#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "Responsibilities: To-do list component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 1,
      "-": 39,
      "arty9": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d Something Daily - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "By: `Team T09-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "arty9"
        },
        "content": "* stores the Todo List and Expenditure Tracker data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arty9"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` and `ObservableList\u003cExpenditure\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arty9"
        },
        "content": "* can save the Todo List and Expenditure Tracker data in xml format and read it back."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::completeuncomplete[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Completing/Uncompleting a Task feature"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "arty9"
        },
        "content": "Marking of a task as `completed` or `uncompleted` uses both `Logic` and `Model` components."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "arty9"
        },
        "content": "Both commands are similiar in most areas, the key differences are in the respective `Command` classes."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "arty9"
        },
        "content": "This feature reuses the methods in the `Model` component used by the edit task command."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "arty9"
        },
        "content": "The following sequence diagram shows how the `TDL_complete` operation works:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "arty9"
        },
        "content": "image::CompleteUncompleteTaskSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Methods to support the completed/uncompleted commands"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "arty9"
        },
        "content": "* **Alternative 1 (current choice):** Reuses the same methods available in `Model`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Pros: Easy to implement with no modification to `Model` component."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Cons: May have performance issues in terms of memory usage due to an additional `Task` object."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "arty9"
        },
        "content": "* **Alternative 2:** Create additional methods in `Model`"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Pros: Should use less memory."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Cons: We must ensure that the implementation of each individual methods are correct."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::completeuncomplete[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::viewtask[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Viewing Tasks feature"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect:"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::viewtask[]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "// tag::sorttask[]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "\u003d\u003d\u003d Sort To-do list"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "Sorting tasks in the to-do list uses both Logic and Model components."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "Generally, the implementation of `TDL_sort date`, `TDL_sort priority` and `TDL_sort module` are quite similar,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "and they use different comparators. These features sort ObservableList\u003cTask\u003e and use the method sort()"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "from List\u003c\u003e."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "`TDL_sort reverse` use the method `Collection.reverse()` to reverse the sequence of tasks in to-do list."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Methods to support the sort commands"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "// end::sorttask[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "// tag::checkexpenditure[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d Check Expenditure"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Check the total money spent in a specific period uses both Logic and Model components."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "It also generate a chart to show each expenditure in this period on each date."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "image::CheckSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Methods to support the check commands"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "// end::checkexpenditure[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "arty9"
        },
        "content": "* NUS SoC students"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Is busy and has a need to better manage his/her student life"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Has a need to manage a significant number of academic tasks"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Has a need to keep track on expenditures"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Prefer desktop applications over mobile platforms"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Prefers typing over mouse input"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Is reasonably comfortable using CLI applications"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "arty9"
        },
        "content": "*Value proposition*: To assist students in managing all of their academic work and spendings which will improve their student life"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// tag::userStories[]"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the application"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student |add a new task to the to-do list |"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student |edit a task on the to-do list |keep my tasks updated and correct"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student |delete a task on the to-do list |remove any entries that I no longer need"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student |archive completed tasks |have a history of all tasks completed earlier throughout the school semester"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student with multiple modules |tag each task with a module code |identify all tasks specific to a particular module"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student with multiple tasks |tag each task with a deadline |identify all tasks that are time sensitive"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student with multiple tasks |tag each task with different levels of importance/priority |identify all tasks that requires more attention"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student with multiple tasks |filter the todo list by completion status |obtain a list of tasks based on their completion status"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "|`* * *` |student |add a new expenditure to the expenditure tracker |"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "|`* * *` |student |edit an expenditure in the expenditure tracker |keep my expenditures updated and correct"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "|`* * *` |student |delete an expenditure in the expenditure tracker |remove any entries that I typed wrongly"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student who is not capable of managing expenditure |see and check where did I spend my money and how much did I spend for each expenditure with the corresponding date |better understand my spending habits"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* * *` |student who wants to know how much money did I spend and how much income did I get for a certain period |see the amount of spendings and income respectively by keying in the starting date and end date of a particular period |"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* *` |student with multiple tasks |sort the todo list by module |view all tasks specific to a particular module"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* *` |student with multiple tasks |sort the todo list by deadline |view which task is due the earliest"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* *` |student with multiple tasks |sort the todo list by importance/priority |view which tasks are more important than the other"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* *` |student with tasks that may last for a long time |easily record and view my progress with progress bar |"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* *` |student |delete all archived completed tasks after the semester is done | get ready for the next semester"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* *` |student with difficulty in remembering all deadlines |get notified at a certain time before deadline based on my choice |submit my work on time"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`* *` |student who wants to know how to save my money |obtain advices from the Expenditure Tracker by checking the categories which I mainly spent my money on |control my spendings in a particular category"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`*` |student with multiple projects |have a separate project window |view all tasks specific only to projects"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`*` |student with multiple tasks to complete in a day |let the system automatically generate the order of tasks based on priority |start working on the tasks"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "arty9"
        },
        "content": "|`*` |student who does not record their money spending regularly |notified by the Expenditure Tracker to note down the amount of money spent on food, snacks or other categories respectively everyday |"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// end::userStories[]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "arty9"
        },
        "content": "(For all use cases below, the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d Use case 1: Add task"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "arty9"
        },
        "content": "1.  User enters `TDL_add` command and keys in the task"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2.  To-do list shows the task entered in the list"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d Use case 2: Edit or Update task"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "arty9"
        },
        "content": "1.  User enters `TDL_edit` command followed by index number"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2.  To-do list confirms task is present in the list"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "3.  User enter relevant contents"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "4.  To-do list shows the updated task in the list"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "  2a. The list is empty."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "  2b. The given index is invalid."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    2b1. To-do list shows an error message"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d Use case 3: Delete task"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_delete` command followed by index number"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. To-do list confirms task is present and deletes the task"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "   2a. The list is empty."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "   2b. The given index is invalid"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     2b1. To-do list shows an error message"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d Use case 4: Check tasks for a module"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_sort by mod` command"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. To-do list shows a sorted list of tasks grouped by modules"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d Use case 5: Check for urgent tasks"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_sort by ddl` command"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. To-do list shows the all uncompleted modules sorted by deadlines, the task with latest deadline is the first task"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "\u003d\u003d\u003d Use case 6: Checking tasks with high importance"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_sort by impt` command"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. To-do list shows a sorted list of tasks grouped by priority level in descending order"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 7: View all completed tasks"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_view completed` command"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. To-do list shows a list of tasks that has been marked as completed"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 8: View all uncompleted tasks"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_view uncompleted` command"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. To-do list shows a list of tasks that have not been marked as completed"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 9: View all tasks"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "arty9"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "arty9"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_view all` command"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "arty9"
        },
        "content": "2. To-do list shows a list of tasks regardless of its completion status"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "arty9"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 10: Marking a task as completed"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_complete` command followed by index number"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "arty9"
        },
        "content": "2. To-do list marks task as completed"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "   2a. The list is empty."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "   2b. The given index is invalid"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     2b1. To-do list shows an error message"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 11: Marking a task as uncompleted"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "arty9"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "arty9"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enters `TDL_uncomplete` command followed by index number"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "arty9"
        },
        "content": "2. To-do list marks task as uncompleted"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "arty9"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "arty9"
        },
        "content": "   2a. The list is empty."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "arty9"
        },
        "content": "   2b. The given index is invalid"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "arty9"
        },
        "content": "     2b1. To-do list shows an error message"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "arty9"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 12: Receiving reminders for a task"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "To-do list"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "1. To-do list notifies user of task close to deadline"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. User receives and acknowledges the reminder"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 13: Add expenditure / income"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Expenditure Tracker \u0026 Calendar"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enter `add` command followed by the amount of money"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. Expenditure tracker receives information and shows the dates to be added"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "3. User choose the date"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "4. Expenditure tracker notifies user to pick category"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "5. User choose the category to be added"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "6. Expenditure Tracker record and display the income / outcome on calendar"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 14: Check expenditure / income status"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "arty9"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Expenditure Tracker \u0026 Calendar"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "arty9"
        },
        "content": "1. User enter `check status` command"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. Expenditure tracker asks user to choose whether to check in the visual calendar or key in the starting date and closing date of a particular period"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "arty9"
        },
        "content": "3. User keys in `visual` command or `manual` command"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "arty9"
        },
        "content": "4. Calendar shows the expenditure / income for each day visually or Expenditure Tracker shows the expenditure / income status by displaying the amount of money."
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 15: Delete expenditure / income"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Expenditure Tracker \u0026 Calendar"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "1. User enters `ET_delete` command followed by index number"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. Expenditure tracker confirms expenditure is present and deletes the expenditure"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "   2a. The list is empty."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "   2b. The given index is invalid"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     2b1. Expenditure list shows an error message"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Use case 16: Edit or Update expenditure"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*System:*"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Expenditure Tracker \u0026 Calendar"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "1.  User enters `ET_edit` command followed by index number"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2.  Expenditure tracker confirms expenditure is present in the list"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "3.  User enter relevant contents"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "4.  Expenditure tracker shows the updated expenditure in the list"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "  2a. The list is empty."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "  2b. The given index is invalid."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    2b1. To-do list shows an error message"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "arty9"
        },
        "content": ".  Should be able to hold up to 500 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "arty9"
        },
        "content": ".  Command-line commands should be simple and easy to remember."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "arty9"
        },
        "content": "*Things* +"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "arty9"
        },
        "content": "A to-do list mobile application"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "arty9"
        },
        "content": "Author: Ran Tian"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "1. Clean UI that is user friendly"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. Able to add deadlines for every tasks at hand"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "3. Able to create custom tags for tagging tasks"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "1. Not specialized for students"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "2. Unable to sort tasks by tags"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "3. Lack of a reminder feature"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 18,
      "SHININGGGG": 7,
      "-": 913,
      "feijunzi": 150,
      "arty9": 149
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿\u003d Something Daily - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": ":repoURL: https://github.com/CS2113-AY1819S1-T09-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team T09-2`      Since: `Sep 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Something Daily (SD) is for those who *prefer to use a desktop app to manage a significant number of academic tasks and keep track on expenditures*. More importantly, SD is *optimized for those who prefer to work with a Command Line Interface* while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SD can get your tasks management and expenditure tracking done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": ".  Download the latest `somethingdaily.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "* **`TDL_add`**`t/Tutorial 5 m/CS2101 d/12-09 p/1` : adds a task named `Tutorial 5` to the To-do List."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "* **`TDL_delete`**`3` : deletes the 3rd task in the To-do List"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Our product will be divided to two sub-parts which are called `To-do List` and `Expenditure Tracker`. For each part, do remember to add the domain command `TDL` (which represents To-do List) or `ET` (which represents Expenditure Tracker). E.g. in `ET check status`, `ET` is the domain command that leads you to Expenditure Tracker."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `TDL_add t/TASK`, `TASK` is a parameter which can be used as `add t/Homework`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g. `t/TASK [d/DATE]` can be used as `t/Homework d/12-09` or as `t/Homework`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `t/TASK m/MODULE`, `m/MODULE t/TASK` is also acceptable."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of commands +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::TDLadd[]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Adding a task: `TDL_add`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a task to the to-do list +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `TDL_add t/TASK m/MODULE d/DATE p/PRIORITY`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The format for `m/MODULE` tag is controlled by the list of modules availble in the application. Hence, only valid NUS module codes are allowed. [Coming in v1.4]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Currently, the format for `m/MODULE` tag is strictly 2 alphabetic characters (upper or lower case) followed by 4 numbers."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The format for `d/DATE` tag must be `DD-MM`, where `DD` refers to the date and `MM` refers to the month in numbers."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* The `p/PRIORITY` tag only accepts integer 1, 2 or 3, where `1` refers to highest importance and `3` refers to lowest importance."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_add t/Tutorial 5 m/CS2101 d/12-09 p/1`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::TDLadd[]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::TDLedit[]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Editing a task : `TDL_edit`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing task in the to-do list. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `TDL_edit INDEX [t/TASK] [m/MODULE] [d/DATE] [p/PRIORITY]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Edits the task at the specified `INDEX`. The index refers to the index number shown in the displayed tasks list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "* At least one of the optional fields should be provided. There will not be any changes made if no optional fields are provided."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "* You can remove any task’s date or priority by typing `d/` or `p/` without specifying any fields after it. [Coming in v2.0]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_edit 1 t/Tutorial 2 m/CS2113` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the task name and module code of the 1st task to be `Tutorial 2` and `CS2113` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_edit 2 t/Tutorial 2 d/ p/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "[Coming in v2.0] Edits the task name of the 2nd task to be `Tutorial 2` and clears all existing deadlines and priority tags associated with this task."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::TDLedit[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::TDLdelete[]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Deleting a task : `TDL_delete`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified task from the to-do list. +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `TDL_delete INDEX`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the task at the specified `INDEX`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The index refers to the index number shown in the displayed tasks list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_delete 2` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd task in the to-do list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_delete 1` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st task in the to-do list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::TDLdelete[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::TDLcomplete[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Marking a task as completed: `TDL_complete`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "Marks the specified task in the to-do list as completed. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `TDL_complete INDEX`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Mark the task at the specified `INDEX` as `completed`."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The index refers to the index number shown in the displayed tasks list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_complete 3` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arty9"
        },
        "content": "The 3rd task in the to-do list is now marked as completed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::TDLcomplete[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::TDLuncomplete[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Marking a task as uncompleted: `TDL_uncomplete`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": "Marks the specific task in the to-do list as uncompleted. +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `TDL_uncomplete INDEX`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arty9"
        },
        "content": "****"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Mark the task at the specified `INDEX` as `uncompleted`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The index refers to the index number shown in the displayed tasks list."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arty9"
        },
        "content": "****"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arty9"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_uncomplete 3` +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arty9"
        },
        "content": "The 3rd task in the to-do list is now marked as uncompleted."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::TDLuncomplete[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::TDLview[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Viewing tasks : `TDL_view`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arty9"
        },
        "content": "Shows a filtered list of tasks in the to-do list. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `TDL_view PARAMETER`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arty9"
        },
        "content": "* PARAMETER is either `completed`, `uncompleted` or `all`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The default view for the to-do list upon starting up is _all tasks_."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arty9"
        },
        "content": "* Performing `TDL_view uncompleted` with the to-do list displaying _uncompleted tasks_ will not result in any changes. The same is applied to _completed tasks_ list with `TDL_view completed` command."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The GUI should allow the user to understand which list they are currently looking at. [Coming in v2.0]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_view completed` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The list is now populated with tasks marked as completed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_view all` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arty9"
        },
        "content": "The list is now populated with all tasks regardless of their completion status."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::TDLview[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arty9"
        },
        "content": "// tag::TDLsort[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Sorting tasks : `TDL_sort`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Sorts and displays the to-do list by a certain tag. +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `TDL_sort PARAMETER`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arty9"
        },
        "content": "* PARAMETER is either `module`, `date` or `priority`."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arty9"
        },
        "content": "* PARAMETER can be set as `default` and tasks will be sorted alphabetically by their names."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* PARAMETER can also be set as `reverse` and the former order of tasks will be reversed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "* Users can use `TDL_sort` after `TDL_view` for sorting certain tasks (completed/uncompleted)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "* `TDL_sort date` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arty9"
        },
        "content": "The tasks are now sorted by its due date."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* `TDL_view uncompleted` + `TDL_sort priority` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arty9"
        },
        "content": "All uncompleted tasks will be sorted by their priority level."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arty9"
        },
        "content": "// end::TDLsort[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// tag::ETadd[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Adding an expenditure : `ET_add`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Adds an expenditure to Expenditure Tracker +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Format: `ET_add e/DESCRIPTION d/DATE m/MONEY c/CATEGORY`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* The format for `e/DESCRIPTION` must be of String format, it cannot be null or spaces."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* The format for `d/DATE` must be DD-MM-YYYY, where DD refers to the date, MM refers to the month and YYYY refers to the year in numbers."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* The m/MONEY field accepts both integer and floating point numbers."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The format for `c/CATEGORY` must be one of the following: Food, Drink, Clothing, Electronics, DailyNecessities, Sports, Communications, Travels, Study, Office, Pets, Gifts, Entertainment, Traffic, Shopping, Beauty, Furniture."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* `ET_add e/Chicken rice d/12-09-2018 m/4.2 c/Food`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// end::ETadd[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Editing an expenditure : `ET_edit`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Edits an existing expenditure in the Expenditure Tracker. +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Format: `ET_edit INDEX [e/DESCRIPTION] [d/DATE] [m/MONEY] [c/CATEGORY]`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* Edits the expenditure at the specified `INDEX`. The index refers to the index number shown in the displayed expenditures list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* At least one of the optional fields should be provided. There will not be any changes made if no optional fields are provided."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "****"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* `ET_edit 1 e/Beef rice m/12.5` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arty9"
        },
        "content": "Edits the expenditure description and money detail of the 1st expenditure in the Expenditure Tracker list to be `Beef rice` and `12.5` respectively."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* `ET_edit 2 d/09-12-2018 c/Electronics` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Edits the expenditure date and category of the 2nd expenditure to be `09-12-2018` and `Electronics` respectively."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003d\u003d\u003d Deleting an expenditure : `ET_delete`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Deletes the specified expenditure from the Expenditure Tracker. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Format: `ET_delete INDEX`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "****"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* Deletes the expenditure at the specified `INDEX`."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* The index refers to the index number shown in the displayed expenditures list."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* `ET_delete 2` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Deletes the 2nd expenditure in the Expenditure Tracker."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* `ET_delete 1` +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Deletes the 1st expenditure in the Expenditure Tracker."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// tag::ETview[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Viewing expenditures : `ET_view`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "arty9"
        },
        "content": "Shows a filtered list of expenditures in the expenditure tracker. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `ET_view PARAMETER`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "arty9"
        },
        "content": "* PARAMETER is either `DATE`, `CATEGORY` or `all`."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "arty9"
        },
        "content": "* The default view for the expenditure tracker upon starting up is _all expenditures_."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "arty9"
        },
        "content": "* If `DATE` is used, the input must be in DD-MM-YYYY, where DD refers to the date, MM refers to the month and YYYY refers to the year in numbers."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "arty9"
        },
        "content": "* If `CATEGORY` is used, the input must only be one of the following: Food, Drink, Clothing, Electronics, DailyNecessities, Sports, Communications, Travels, Study, Office, Pets, Gifts, Entertainment, Traffic, Shopping, Beauty, Furniture."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `ET_view 01-01-2018` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "arty9"
        },
        "content": "The list is now populated with expenditures of date `01-01-2018`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `ET_view Electronics` +"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "arty9"
        },
        "content": "The list is now populated with expenditures of `Electronics` category."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `ET_view all` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arty9"
        },
        "content": "The list is now populated with all expenditures regardless of their date or category."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// end::ETview[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "// tag::ETcheck[]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Checking expenditures : `ET_check`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arty9"
        },
        "content": "Checks the status of the expenditures in a particular period and generates a graph [coming in v1.4] to demonstrate how much money was spent on each unit period. +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "arty9"
        },
        "content": "Format: `ET_check start/STARTDATE end/ENDDATE`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "arty9"
        },
        "content": "****"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `start/STARTDATE` and `end/ENDDATE` must be in the format of DD-MM-YYYY, where DD refers the date, MM refers the month and YYYY refers the year in numbers."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `end/ENDDATE` must be of a later date than `start/STARTDATE`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "arty9"
        },
        "content": "****"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "arty9"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `ET_check start/01-01-2017 start/01-01-2018` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Checks the status of the expenditures from 01-01-2017 to 01-01-2018 and generates a graph [coming in v1.4] to demonstrate how much money was spent on each expenditure."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "// end::ETcheck[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// tag::ETadvice[]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003d\u003d\u003d Getting advice for spending money : `ET_advice`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "arty9"
        },
        "content": "Gives a short summary of the expenditures made so far and provides advice on how to spend a particular amount of money in a given period of time. +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Format: `ET_advice m/MONEY numofdays/NUMBEROFDAYS`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "****"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `m/MONEY` accepts both integer and floating point numbers."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `numofdays/NUMBEROFDAYS` only accepts integer which represents the number of days"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "****"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* `ET_advice m/1000 numofdays/25` +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Gives a short summary of the expenditures made so far and provides advice on how to spend 1000 SGD in the following 25 days."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* `ET_advice m/240 numofdays/14` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "Gives a short summary of the expenditures made so far and provides advice on how to spend 240 SGD in the following 14 days."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "// end::ETadvice[]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo` [Coming in v1.4]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "arty9"
        },
        "content": "Restores the application to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "arty9"
        },
        "content": "Undoable commands: those commands that modify the application\u0027s content (`add`, `delete`, `edit` and `complete`)."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_complete 3` +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "arty9"
        },
        "content": "`TDL_view completed` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "arty9"
        },
        "content": "`undo` (reverses the `TDL_complete 3` command) +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo` [Coming in v1.4]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "arty9"
        },
        "content": "* `TDL_complete 3` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "arty9"
        },
        "content": "`undo` (reverses the `TDL_complete 3` command) +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "arty9"
        },
        "content": "`redo` (reapplies the `TDL_complete 3` command) +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "arty9"
        },
        "content": "Exits the program +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "arty9"
        },
        "content": "All to-do list data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "arty9"
        },
        "content": "*Q*: How do I transfer my data to another computer? +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "arty9"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data files it creates with the files that contains the data in your previous data folder."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "arty9"
        },
        "content": "*General:*"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Undo* : `undo` [Coming in v1.4]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Redo* : `redo` [Coming in v1.4]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "arty9"
        },
        "content": "*To-do List:*"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Add* : `TDL_add t/TASK m/MODULE d/DATE p/PRIORITY`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Edit* : `TDL_edit INDEX [t/TASK] [m/MODULE] [d/DATE] [p/PRIORITY]`"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Delete* : `TDL_delete INDEX`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Complete* : `TDL_complete INDEX`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Uncomplete* : `TDL_uncomplete INDEX`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *View* : `TDL_view PARAMETER`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Sort* : `TDL_sort PARAMETER`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "arty9"
        },
        "content": "*Expenditure Tracker:*"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Add* : `ET_add e/DESCRIPTION d/DATE m/MONEY c/CATEGORY`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Edit* : `ET_edit INDEX [e/DESCRIPTION] [d/DATE] [m/MONEY] [c/CATEGORY]`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Delete* : `ET_delete INDEX`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *View* : `ET_view PARAMETER`"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Check* : `ET_check start/STARTDATE end/ENDDATE`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Advice* : `ET_advice m/MONEY numofdays/NUMBEROFDAYS`"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 1,
      "SHININGGGG": 50,
      "-": 185,
      "feijunzi": 5,
      "arty9": 152
    }
  },
  {
    "path": "docs/team/SHININGGGG.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Wang Shining - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: Something Daily"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Something Daily is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Major enhancement*: designed *models for Expenditure Tracker*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** What it does: the most basic components of this product, execute the commands typed by user in the lowest level."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** Justification: This enhancement improves the product significantly because the models are the foundation of Expenditure Tracker."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Major enhancement*: designed *storage for Expenditure Tracker*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** What it does: stores the expenditures that user has recorded and direct it to a particular path."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** Justification: This enhancement improves the product significantly because the storage keeps the record of expenditures recorded by the user so that he/she will never lose the history records."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Major enhancement*: designed *user interface for Expenditure Tracker*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** What it does: displays the expenditures recorded in Expenditure Tracker properly."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** Justification: This enhancement improves the product significantly because the UI is the only place for users to see the expenditures and do commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Major enhancement*: added *tests for Expenditure Tracker*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** What it does: tests that whether everything related to Expenditure Tracker works properly."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** Justification: This enhancement improves the product significantly because the tests help developers find out the bug to fix."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Major enhancement*: added *the ability to add an expenditure*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** What it does: allows the user to add an expenditure to Expenditure Tracker."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** Justification: This feature improves the product significantly because a user needs to add an expenditure to record."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Major enhancement*: added *the ability to get advice from Expenditure Tracker on how to save money*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** What it does: If the user has no idea on where he/she spent there money and want to get some advice on how to save money in the following period, this command will give the user a summary on those."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** Justification: This feature improves the product significantly because a user who is not capable of managing money can get advice on how to spend their money properly."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Major enhancement*: added *the ability to view expenditure on a particular day or of a particular category*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** What it does: allows the user to see only the expenditures on a specific day or of a specific category."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "** Justification: This feature improves the product significantly because user might not want to see all the expenditures have been made from beginning till now, this enhancement provides user with features that user can view the expenditures only on a particular day or of a particular category, which depends on the user\u0027s preference."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] [https://nuscs2113-ay1819s1.github.io/dashboard/#\u003dundefined\u0026search\u003d\u0026sort\u003ddisplayName\u0026since\u003d2018-09-12\u0026until\u003d2018-10-30\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Dashboard]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "*** Added expenditure tracker information to User Guide and Developer Guide."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "*** PRs reviewed (with review comments): https://github.com/CS2113-AY1819S1-T09-2/main/pulls?q\u003dis%3Apr+is%3Aclosed[#80], https://github.com/CS2113-AY1819S1-T09-2/main/pulls?q\u003dis%3Apr+is%3Aclosed[#68], https://github.com/CS2113-AY1819S1-T09-2/main/pulls?q\u003dis%3Apr+is%3Aclosed[#23], https://github.com/CS2113-AY1819S1-T09-2/main/pulls?q\u003dis%3Apr+is%3Aclosed[#20]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nusCS2113-AY1819S1/forum/issues[#60])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "include::../UserGuide.adoc[tag\u003dETadd]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "include::../UserGuide.adoc[tag\u003dETview]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "include::../UserGuide.adoc[tag\u003dETadvice]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "|_The user stories of Expenditure Tracker given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserStories]"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 37,
      "-": 38
    }
  },
  {
    "path": "docs/team/XiaoYunhan.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Xiao Yunhan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: Something Daily"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Something Daily is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "* *Major enhancement*: designed *the logic (commands/ parser) for To-do List*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "** What it does: the most basic components of To-do List, parser will judge which \"command\" function to execute and \"commands\" will run corresponding methods in \"model\"."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "** Justification: This enhancement is the foundation of To-do List, it provides users the way to use certain features by keying in certain commands."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "** Specific features: (include add/ delete/ edit) Users can add, delete and edit certain tasks in the To-do List."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "* *Major enhancement*: designed *user interface for To-do List*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "** What it does: display tasks recorded in To-do List"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "** Justification: This enhancement make it possible for user checking tasks more visually and easier."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "* *Major enhancement*: designed *the ability to sort tasks in To-do List*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "** What it does: Provide users a way to sort tasks in the To-do List by certain task attribution (name, module code, deadline) and users can also reverse the rank of sorting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "** Justification: This enhancement make users easier to check their tasks recorded in the To-do list based on a certain standard."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "* *Minor enhancement*: add \"undoable_command\" class related methods to fix \"undo\" command on both To-do List side and Expenditure Tracker side."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "* *Minor enhancement*: add a few tests to increase coverage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "*** Add implementation of TDL_sort command in the Developer Guide and update To-do List-related logic part in both User guide and Developer guide."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#20], https://github.com[#24], https://github.com[#47], https://github.com[#48], https://github.com[#74], https://github.com[#78], https://github.com[#82]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTDLsort]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsorttask]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 19,
      "-": 46
    }
  },
  {
    "path": "docs/team/arty9.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tay Ran Tian - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: Something Daily"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "Something Daily is a desktop task and expenditure tracker application created for NUS SoC students to aid them in their busy student life. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Major enhancement*: Designed *model component for To-do List*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "** What it does: It is the component that holds all to-do list related data of the app in-memory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Justification: This component is a core building block of the to-do list in the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Major enhancement*: Designed *storage component for To-do List*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "** What it does: It is the component that reads and writes to-do list data to the hard disk."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Justification: This component allows user\u0027s to-do list data to be stored, hence allowing the user to keep track of his/her task\u0027s progress."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Major enhancement*: Added *the ability to mark a task as completed/uncompleted*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "** What it does: The command allows the user to mark a specific task in the to-do list as completed or uncompleted. The status is then updated accordingly in the UI of the to-do list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Justification: This feature is key to a functioning to-do list, where users can keep track of the status of his/her tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Highlights: This enhancement enables commands like viewing a filtered list based on task\u0027s status."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Major enhancement*: Added *the ability to view a filtered list of tasks*"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "** What it does: The command allows the user to view a list of tasks based on task\u0027s status."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Justification: This feature improves the user experience and efficiency as it helps the user in navigating through all of the tasks in the to-do list. Users can now easily separate out uncompleted tasks from completed task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Minor enhancement*: updated application icon and application name to reflect on our product"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "* *Minor enhancement*: modified console messages in the application to enhance user experience"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Set up team organisation on GitHub"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Set up and managed GitHub issue tracker and labels"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Set up and managed milestones on GitHub"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Managed releases `v1.2` - `v1.3.1` (3 releases) on GitHub"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Updated README document to reflect our application"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Updated the About Us page to reflect our team members"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Restructured commands listing in section 3 \u0026 5 of the User Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Updated class diagrams for model and storage components in Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Set up Travis CI for the team repo"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Set up Coveralls for the team repo"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Set up Codacy for the team repo"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "*** Set up auto-publishing of documentations for the team repo"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTDLadd]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTDLedit]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTDLdelete]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTDLcomplete]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTDLuncomplete]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTDLview]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcompleteuncomplete]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dviewtask]"
      }
    ],
    "authorContributionMap": {
      "-": 39,
      "arty9": 45
    }
  },
  {
    "path": "docs/team/feijunzi.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Xin Shenzi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: Something Daily"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Something Daily is a desktop address book application used for teaching Software"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "Engineering principles. The user interacts with it using a CLI, and it has a GUI"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Major enhancement*: added *the check command for Expenditure Tracker*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** What it does: allows the user to check how much money they have spent in a specific period."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** Justification: This feature improves the product significantly because if a user want to know how much money they have spent in a period, they can easily get the value."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Major enhancement*: added *a chart to show the expenditure*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** What it does: allows the user to see where and how much they have spent when they want to use the check command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** Justification: This feature improves the product significantly because users can see their each expense in a period directly."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** Highlights: This enhancement will appear a new window to show the chart."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** Credits: This feature needs another library *jfreechart* to draw the chart."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Major enhancement*: added *the ability to delete an expenditure*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** What it does: allows the user to delete an expenditure by index."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** Justification: This feature improves the product significantly because users may add a wrong expenditure."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Major enhancement*: added *the ability to edit an expenditure*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** What it does: allows the user to edit an expenditure by index."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "** Justification: This feature improves the product significantly because users may want to change some parts of an expenditure."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Minor enhancement*: change GUI for expenditure tracker part"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*** PRs reviewed (with review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "*** Integrated a third party library (jFreeChart) to the project"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dETcheck]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "ability to write technical documentation and the technical depth of my contributions"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "to the project._"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dcheckexpenditure]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "feijunzi": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ExpenditureTracker;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.storage.ExpenditureTrackerStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.storage.TodoListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.storage.XmlExpenditureTrackerStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.storage.XmlTodoListStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureTrackerStorage expenditureTrackerStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new XmlExpenditureTrackerStorage(userPrefs.getExpenditureTrackerFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoListStorage todoListStorage \u003d new XmlTodoListStorage(userPrefs.getTodoListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, expenditureTrackerStorage, todoListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Optional\u003cReadOnlyExpenditureTracker\u003e expenditureTrackerOptional;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Optional\u003cReadOnlyTodoList\u003e todoListOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": "        ReadOnlyTodoList initialTodoListData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ReadOnlyExpenditureTracker initialExpenditureTracker;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            expenditureTrackerOptional \u003d storage.readExpenditureTracker();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "            todoListOptional \u003d storage.readTodoList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "            if (!todoListOptional.isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TodoList\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            initialExpenditureTracker \u003d expenditureTrackerOptional"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    .orElseGet(SampleDataUtil::getSampleExpenditureTracker);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "            initialTodoListData \u003d todoListOptional.orElseGet(SampleDataUtil::getSampleTodoList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initialExpenditureTracker \u003d new ExpenditureTracker();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "            initialTodoListData \u003d new TodoList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initialExpenditureTracker \u003d new ExpenditureTracker();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "            initialTodoListData \u003d new TodoList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return new ModelManager(initialData, initialTodoListData, initialExpenditureTracker, userPrefs);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 12,
      "-": 209,
      "arty9": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private String appTitle \u003d \"Something Daily\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 73,
      "arty9": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            \"The expenditure index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_EXPENDITURE_LISTED_OVERVIEW \u003d \"%1$d expenditure listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "feijunzi": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/ExpenditureTrackerChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/** Indicates that the Expenditure Tracker has been changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureTrackerChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final ReadOnlyExpenditureTracker data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTrackerChangedEvent(ReadOnlyExpenditureTracker data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return \"number of expenditures \" + data.getExpenditureList().size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TodoListChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/** Indicates the TodoList in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TodoListChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public final ReadOnlyTodoList data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoListChangedEvent(ReadOnlyTodoList data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return \"number of tasks \" + data.getTaskList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExpenditurePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditurePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Expenditure newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditurePanelSelectionChangedEvent(Expenditure newSelection) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Expenditure getNewSelection() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of expenditures */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getFilteredExpenditureList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 4,
      "-": 30,
      "arty9": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return model.getFilteredTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 5,
      "-": 57,
      "arty9": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/UndoableCommandHistory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Stores the history of undoable commands executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class UndoableCommandHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private Stack\u003cString\u003e undoableCommandList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public UndoableCommandHistory() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        undoableCommandList \u003d new Stack\u003c\u003e();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered if the input is undoable TodoList command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public void addTodoList() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        undoableCommandList.push(\"TDL\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Appends {@code userInput} to the list of user input entered if the input is undoable Expenditure command.."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public void addExpenditureTracker() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        undoableCommandList.push(\"ET\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public String getCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (undoableCommandList.empty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return \"EMPTY\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return undoableCommandList.pop();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddExpenditureCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Adds an expenditure to the expenditure tracker."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class AddExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ET_add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expenditure to the expenditure tracker. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_MONEY + \"MONEY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_DESCRIPTION + \"iPhone7 Plus \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_DATE + \"25-12-2017 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_MONEY + \"1000 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_CATEGORY + \"Electronics \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expenditure added: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Expenditure toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Creates an AddExpenditureCommand to add the specified {@code Expenditure}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public AddExpenditureCommand(Expenditure expenditure) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        toAdd \u003d expenditure;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        model.addExpenditure(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        model.commitExpenditureList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        model.commitUndoableExpenditure();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Adds a task to the to-do list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class AddTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"TDL_add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to the to-do list. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_TASK + \"TASK \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_MODULE + \"MODULE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_TASK + \"Tutorial 5 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_MODULE + \"CS2101 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_DATE + \"12-09 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: %1$s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the to-do list\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Creates an TDLAddCommand to add the specified {@code Task}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public AddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitTodoList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitUndoableTodoList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                || (other instanceof AddTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CheckExpenditureCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "//@@author feijunzi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import org.jfree.chart.ChartFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import org.jfree.chart.ChartFrame;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import org.jfree.chart.JFreeChart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import org.jfree.data.general.DefaultPieDataset;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class CheckExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ET_check\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    //public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \": Check expenditures in a specific period\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_START + \"DATE1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_END + \"DATE2 (must be larger than DATE1)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_START + \"27-09-2018 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_END + \"09-10-2018 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Total amount spent in this period: %.2f\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    private final String date1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    private final String date2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public CheckExpenditureCommand(String d1, String d2) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(d1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(d2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        date1 \u003d d1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        date2 \u003d d2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        List\u003cExpenditure\u003e lastShownList \u003d model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Expenditure editedExpenditure;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        DefaultPieDataset dpd \u003d new DefaultPieDataset();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        float total \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        while (index \u003c lastShownList.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            editedExpenditure \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int year1 \u003d Integer.parseInt(date1.substring(6));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int month1 \u003d Integer.parseInt(date1.substring(3, 5));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int day1 \u003d Integer.parseInt(date1.substring(0, 2));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int year2 \u003d Integer.parseInt(date2.substring(6));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int month2 \u003d Integer.parseInt(date2.substring(3, 5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int day2 \u003d Integer.parseInt(date2.substring(0, 2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int year \u003d Integer.parseInt(editedExpenditure.getDate().toString().substring(6));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int month \u003d Integer.parseInt(editedExpenditure.getDate().toString().substring(3, 5));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            int day \u003d Integer.parseInt(editedExpenditure.getDate().toString().substring(0, 2));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            if ((year1 \u003c year) \u0026\u0026 (year2 \u003e year)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                        Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            } else if ((year1 \u003d\u003d year) \u0026\u0026 (year2 \u003d\u003d year)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                if ((month1 \u003c month) \u0026\u0026 (month2 \u003e month)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                    + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                            Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                } else if ((month1 \u003d\u003d month) \u0026\u0026 (day1 \u003c\u003d day)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                    + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                            Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                } else if ((month2 \u003d\u003d month) \u0026\u0026 (day2 \u003e\u003d day)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                    + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                            Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            } else if ((year1 \u003d\u003d year) \u0026\u0026 (year2 \u003e year)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                if (month1 \u003c month) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                    + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                            Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                } else if ((month1 \u003d\u003d month) \u0026\u0026 (day1 \u003c\u003d day)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                    + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                            Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            } else if ((year1 \u003c year) \u0026\u0026 (year2 \u003d\u003d year)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                if (month2 \u003e month) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                    + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                            Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                } else if ((month2 \u003d\u003d month) \u0026\u0026 (day2 \u003e\u003d day)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    total \u003d total + Float.parseFloat(editedExpenditure.getMoney().toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    dpd.setValue(editedExpenditure.getDescription().toString() + \":\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                                    + Integer.parseInt(editedExpenditure.getMoney().toString()),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                            Integer.parseInt(editedExpenditure.getMoney().toString()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        JFreeChart chart \u003d ChartFactory.createPieChart(\"My Expense During\" + date1 + \"to\" + date2, dpd, true, true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        ChartFrame chartFrame \u003d new ChartFrame(\"My Expense During\" + date1 + \"to\" + date2, chart);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        chartFrame.pack();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        chartFrame.setVisible(true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, total));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "feijunzi": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String COMMAND_INITIAL \u003d \"C\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "feijunzi": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompleteTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.storage.XmlSerializableTodoList.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Edits the {@code isComplete} field of an existing task in the to-do list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class CompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"TDL_complete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \": Marks the task identified by the index number used in the displayed to-do list as completed.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_COMPLETE_TASK_SUCCESS \u003d \"Completed Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public CompleteTaskCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedTask \u003d taskToEdit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedTask.setAsCompleted();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.commitTodoList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitUndoableTodoList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETE_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!(other instanceof CompleteTaskCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "        CompleteTaskCommand c \u003d (CompleteTaskCommand) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return targetIndex.equals(c.targetIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 1,
      "arty9": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteExpenditureCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "//@@author feijunzi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * {@code DeleteExpenditureCommand}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class DeleteExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ET_delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    //public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \": Deletes the expenditure identified by the index number used in the displayed expenditure list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_DELETE_SUCCESS \u003d \"Deleted expenditure: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public DeleteExpenditureCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        List\u003cExpenditure\u003e lastShownList \u003d model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Expenditure expenditureToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        model.deleteExpenditure(expenditureToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        model.commitExpenditureList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        model.commitUndoableExpenditure();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SUCCESS, expenditureToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "feijunzi": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"TDL_delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    //public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \": Deletes the task identified by the index number used in the displayed to-do list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public DeleteTaskCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitTodoList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitUndoableTodoList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TASK_SUCCESS, taskToDelete));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                || (other instanceof DeleteTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTaskCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditExpenditureCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "//@@author feijunzi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Money;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Edits the details of an existing expenditure in the expenditure tracker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class EditExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ET_edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    //public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expenditure identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"by the index number used in the displayed expenditure list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"[\" + PREFIX_MONEY + \"MONEY] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY]\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Chicken rice \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_DATE + \"25/12/2017 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_MONEY + \"500 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENDITURE_SUCCESS \u003d \"Edited Expenditure: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENDITURE \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            \"This expenditure already exists in the expenditure tracker.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    private final EditExpenditureDescriptor editExpenditureDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public EditExpenditureCommand(Index index, EditExpenditureDescriptor editExpenditureDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(editExpenditureDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        this.editExpenditureDescriptor \u003d new EditExpenditureDescriptor(editExpenditureDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        List\u003cExpenditure\u003e lastShownList \u003d model.getFilteredExpenditureList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENDITURE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Expenditure expenditureToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Expenditure editedexpenditure \u003d createEditedExpenditure(expenditureToEdit, editExpenditureDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (!expenditureToEdit.isSameExpenditure(editedexpenditure) \u0026\u0026 model.hasExpenditure(editedexpenditure)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENDITURE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        model.updateExpenditure(expenditureToEdit, editedexpenditure);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        model.updateFilteredExpenditureList(Model.PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        model.commitExpenditureList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        model.commitUndoableExpenditure();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENDITURE_SUCCESS, editedexpenditure));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Creates and returns a {@code Expenditure} with the details of {@code ExpenditureToEdit}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * edited with {@code editExpenditureDescriptor}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    private static Expenditure createEditedExpenditure(Expenditure expenditureToEdit, EditExpenditureDescriptor"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            editExpenditureDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        assert expenditureToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Description updatedDescription \u003d editExpenditureDescriptor.getDescription()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                .orElse(expenditureToEdit.getDescription());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Date updatedDate \u003d editExpenditureDescriptor.getDate().orElse(expenditureToEdit.getDate());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Money updatedMoney \u003d editExpenditureDescriptor.getMoney().orElse(expenditureToEdit.getMoney());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Category updatedCategory \u003d editExpenditureDescriptor.getCategory().orElse(expenditureToEdit.getCategory());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new Expenditure(updatedDescription, updatedDate, updatedMoney, updatedCategory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (!(other instanceof EditExpenditureCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        EditExpenditureCommand e \u003d (EditExpenditureCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                \u0026\u0026 editExpenditureDescriptor.equals(e.editExpenditureDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Stores the details to edit the Expenditure with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * corresponding field value of the Expenditure."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static class EditExpenditureDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        private Money money;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public EditExpenditureDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public EditExpenditureDescriptor(EditExpenditureDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            setMoney(toCopy.money);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, date, money, category);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public void setMoney(Money money) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            this.money \u003d money;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public Optional\u003cMoney\u003e getMoney() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return Optional.ofNullable(money);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            if (!(other instanceof EditExpenditureDescriptor)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            EditExpenditureDescriptor e \u003d (EditExpenditureDescriptor) other;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    \u0026\u0026 getMoney().equals(e.getMoney())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "feijunzi": 217
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskPriority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Edits the details of an existing task in the address book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class EditTaskCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"TDL_edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"[\" + PREFIX_TASK + \"TASK] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_TASK + \"Tutorial 2 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + PREFIX_MODULE + \"CS2113\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the to-do list.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private final EditTaskDescriptor tdleditTaskDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * @param tdleditTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public EditTaskCommand(Index index, EditTaskDescriptor tdleditTaskDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(tdleditTaskDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        this.tdleditTaskDescriptor \u003d new EditTaskDescriptor(tdleditTaskDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        Task tdleditedTask \u003d createEditedTask(taskToEdit, tdleditTaskDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (!taskToEdit.isSameTask(tdleditedTask) \u0026\u0026 model.hasTask(tdleditedTask)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.updateTask(taskToEdit, tdleditedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitTodoList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitUndoableTodoList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, tdleditedTask));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * edited with {@code tdleditTaskDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor tdleditTaskDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskName updatedName \u003d tdleditTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskModule updatedModule \u003d tdleditTaskDescriptor.getModule().orElse(taskToEdit.getModule());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskDate updatedDate \u003d tdleditTaskDescriptor.getDate().orElse(taskToEdit.getDate());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskPriority updatedPriority \u003d tdleditTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        boolean status \u003d taskToEdit.getComplete();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return new Task(updatedName, updatedModule, updatedDate, updatedPriority, status);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (!(other instanceof EditTaskCommand)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        EditTaskCommand e \u003d (EditTaskCommand) other;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                \u0026\u0026 tdleditTaskDescriptor.equals(e.tdleditTaskDescriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        private TaskDate taskDate;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        private TaskModule taskModule;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        private TaskName taskName;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        private TaskPriority taskPriority;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            setName(toCopy.taskName);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            setModule(toCopy.taskModule);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            setDate(toCopy.taskDate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            setPriority(toCopy.taskPriority);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return CollectionUtil.isAnyNonNull(taskName, taskModule, taskDate, taskPriority);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void setName(TaskName name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            this.taskName \u003d name;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public Optional\u003cTaskName\u003e getName() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return Optional.ofNullable(taskName);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void setModule(TaskModule module) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            this.taskModule \u003d module;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public Optional\u003cTaskModule\u003e getModule() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return Optional.ofNullable(taskModule);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void setDate(TaskDate date) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            this.taskDate \u003d date;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public Optional\u003cTaskPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return Optional.ofNullable(taskPriority);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void setPriority(TaskPriority taskPriority) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            this.taskPriority \u003d taskPriority;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public Optional\u003cTaskDate\u003e getDate() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return Optional.ofNullable(taskDate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                    \u0026\u0026 getModule().equals(e.getModule())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExpenditureGetAdviceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Get advice on how to spend money"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureGetAdviceCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ET_advice\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gives user advice on \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"how to save money based on past records.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_MONEY + \"MONEY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_PERIOD + \"PERIOD \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_MONEY + \"1000 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + PREFIX_PERIOD + \"30 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here\u0027s the advice on how to \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"spend your money in the following period:\\n\\n%s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private String advice;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private double money;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private int numOfDays;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Get advice on how to spend money"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureGetAdviceCommand(String m, String n) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(m);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(n);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        money \u003d Double.parseDouble(m);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        numOfDays \u003d Integer.parseInt(n);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        double dailyExpense \u003d money / numOfDays;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        double totalExpenditure \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Map \u003cString, Double\u003e map;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Map \u003cString, Integer\u003e percentageMap \u003d new HashMap\u003cString, Integer\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        map \u003d model.getExpenditureRecords();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        StringBuilder x \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        x.append(\"This is a summary of the expenditures you have made in the past.\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                + \"From the first day you used this app till now, you have spent:\\n\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (Map.Entry s : map.entrySet()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            totalExpenditure +\u003d map.get(s.getKey());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (Map.Entry m : map.entrySet()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            percentageMap.put(m.getKey().toString(), (int) Math.round(100 * map.get(m.getKey()) / totalExpenditure));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            x.append(m.getValue())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(\" SGD on \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(m.getKey())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(\", which takes approximately \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append((int) Math.round(100 * map.get(m.getKey()) / totalExpenditure))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(\"% of the total expenditure you have made.\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        x.append(\"\\nBased on the information given, I hope you can better understand how you spent your money.\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        x.append(\"If you plan to spend a total of \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(money)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(\" SGD in a period of \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(numOfDays)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(\" days, on average, the maximum amount of money that you can spend per day is \")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(dailyExpense)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(\".\\n\\n\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(\"According to your expenditure history, here\u0027s a more detailed advice \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    + \"on how much money you can spend on each category in the following period.\\n\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .append(\"Do note that the sum of advised individual expenditure will not necessarily \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    + \"be the same as the target money, and there might be a slight difference.\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (Map.Entry t : map.entrySet()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            x.append(t.getKey())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    .append(\": \")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    .append(money * percentageMap.get(t.getKey()) / 100)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    .append(\" SGD\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        x.append(\"\\nHappy planning! : )\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        advice \u003d x.toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, advice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!model.canRedoTodoList()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.redoTodoList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "arty9": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class SortTaskCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"TDL_sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \": Sort tasks in the order of module, date, priority, default or reverse order.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Parameters: default, date, module, priority or reverse\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" date\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DATE \u003d \"Sorted all tasks based on due date\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_PRIORITY \u003d \"Sorted all tasks based on priority level\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_MODULE \u003d \"Sorted all tasks based on module code\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DEFAULT \u003d \"Sorted all tasks based on default naming order\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public static final String MESSAGE_SUCCESS_REVERSE \u003d \"Task list reversed\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private final String filter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * @param filter to determine the predicate used for updating filtered task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public SortTaskCommand(String filter) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(filter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (\"date\".equals(filter)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            model.rankFilteredTaskDeadline();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        } else if (\"module\".equals(filter)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            model.rankFilteredTaskModule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        } else if (\"default\".equals(filter)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            model.rankTaskDefault();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_DEFAULT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        } else if (\"reverse\".equals(filter)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            model.reverseTodoList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_REVERSE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            model.rankFilteredTaskPriority();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_PRIORITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UncompleteTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.storage.XmlSerializableTodoList.MESSAGE_DUPLICATE_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Edits the {@code isComplete} field of an existing task in the to-do list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class UncompleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"TDL_uncomplete\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \": Marks the task identified by the index number used in the displayed to-do list as uncompleted.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_COMPLETE_TASK_SUCCESS \u003d \"Uncompleted Task: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public UncompleteTaskCommand(Index index) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedTask \u003d taskToEdit;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedTask.setAsUncompleted();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.updateTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.commitTodoList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.commitUndoableTodoList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETE_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!(other instanceof UncompleteTaskCommand)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UncompleteTaskCommand c \u003d (UncompleteTaskCommand) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return targetIndex.equals(c.targetIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 1,
      "arty9": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENDITURES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (\"EMPTY\".equals(model.getUndoableCommand())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        else if (\"TDL\".equals(model.getUndoableCommand())) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "            if (!model.canUndoTodoList()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "            model.undoTodoList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        else if (\"ET\".equals(model.getUndoableCommand())) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            if (!model.canUndoExpenditureList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            model.undoExpenditureList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            model.updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (!model.canUndoTodoList()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.undoTodoList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 21,
      "-": 30,
      "arty9": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewExpenditureCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENDITURES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Lists particular expenditures in the Expenditure Tracker to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ViewExpenditureCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"ET_view\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \": Shows a list of expenditures made on a particular day or of a specific category \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"in the displayed Expenditure Tracker.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"Parameters: DATE, CATEGORY or all\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 01-01-2018\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL \u003d \"Listed all expenditures\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_SUCCESS_DATE \u003d \"Listed expenditures on %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_SUCCESS_CATEGORY \u003d \"Listed expenditures of %s category\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{4}\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final String filter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @param filter to determine the predicate used for updating filtered task list"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ViewExpenditureCommand(String filter) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(filter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Predicate\u003cExpenditure\u003e predicateShowExpendituresOnDate \u003d model.getPredicateShowExpendituresOnDate(filter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Predicate\u003cExpenditure\u003e predicateShowExpendituresOfCategory \u003d model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .getPredicateShowExpendituresOfCategory(filter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (filter.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOnDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_DATE, filter));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Food\".equals(filter)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Drink\".equals(filter)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Clothing\".equals(filter)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Electronics\".equals(filter)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"DailyNecessities\".equals(filter)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Sports\".equals(filter)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Communications\".equals(filter)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Travels\".equals(filter)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Study\".equals(filter)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Office\".equals(filter)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Pets\".equals(filter)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Gifts\".equals(filter)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Entertainment\".equals(filter)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Traffic\".equals(filter)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Shopping\".equals(filter)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Beauty\".equals(filter)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (\"Furniture\".equals(filter)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(predicateShowExpendituresOfCategory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS_CATEGORY, filter));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            model.updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ViewTaskCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_COMPLETED_TASKS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_UNCOMPLETED_TASKS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class ViewTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"TDL_view\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \": Shows a list of uncompleted/completed/all tasks in the displayed to-do list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \"Parameters: uncompleted, completed or all\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" completed\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_SUCCESS_ALL \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_SUCCESS_COMPLETED \u003d \"Listed all completed tasks\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_SUCCESS_UNCOMPLETED \u003d \"Listed all uncompleted tasks\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final String filter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param filter to determine the predicate used for updating filtered task list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ViewTaskCommand(String filter) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(filter);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.filter \u003d filter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (filter.equals(\"uncompleted\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_UNCOMPLETED_TASKS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_UNCOMPLETED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } else if (filter.equals(\"completed\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_COMPLETED_TASKS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_COMPLETED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS_ALL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "arty9": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddExpenditureCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.AddExpenditureCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Money;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class AddExpenditureCommandParser implements Parser\u003cAddExpenditureCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public AddExpenditureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_MONEY, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_MONEY, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    AddExpenditureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Date date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Money money \u003d ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Expenditure expenditure \u003d new Expenditure(description, date, money, category);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new AddExpenditureCommand(expenditure);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskModule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.model.task.TaskPriority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class AddTaskCommandParser implements Parser\u003cAddTaskCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public AddTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_MODULE, PREFIX_DATE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK, PREFIX_MODULE, PREFIX_DATE, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskName taskName \u003d ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_TASK).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskModule taskModule \u003d ParserUtil.parseTaskModule(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskDate taskDate \u003d ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        TaskPriority taskPriority \u003d ParserUtil.parseTaskPriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        Task task \u003d new Task(taskName, taskModule, taskDate, taskPriority, false);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return new AddTaskCommand(task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.AddExpenditureCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.commands.CheckExpenditureCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.EditExpenditureCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.ExpenditureGetAdviceCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SortTaskCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.UncompleteTaskCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.ViewExpenditureCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.ViewTaskCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        case AddTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new AddTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        case AddExpenditureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new AddExpenditureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "        case EditTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new EditTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        case EditExpenditureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new EditExpenditureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        case DeleteExpenditureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new DeleteExpenditureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "        case CompleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new CompleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "        case UncompleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new UncompleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        case ExpenditureGetAdviceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new ExpenditureGetAdviceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "        /*case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        case ClearCommand.COMMAND_INITIAL:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new FindCommandParser().parse(arguments);*/"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        case CheckExpenditureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return new CheckExpenditureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        case ViewExpenditureCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new ViewExpenditureCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "        case ViewTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new ViewTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": "        case SortTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new SortTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "            //case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new RedoCommand();*/"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 18,
      "XiaoYunhan": 1,
      "-": 77,
      "feijunzi": 6,
      "arty9": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CheckExpenditureCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.commands.CheckExpenditureCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Parses input arguments and creates a new CheckExpenditureCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class CheckExpenditureCommandParser implements Parser\u003cCheckExpenditureCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public CheckExpenditureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START, PREFIX_END);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START, PREFIX_END)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    CheckExpenditureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Date date1 \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Date date2 \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        String d1 \u003d date1.addingDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        String d2 \u003d date2.addingDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new CheckExpenditureCommand(d1, d2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "feijunzi": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TASK \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /* Expenditure prefix definition */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Prefix PREFIX_MONEY \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"start/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"end/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Prefix PREFIX_PERIOD \u003d new Prefix(\"numofdays/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 6,
      "-": 19,
      "feijunzi": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CompleteTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Parses input arguments and creates a new CompleteTaskCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class CompleteTaskCommandParser implements Parser\u003cCompleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompleteTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * and returns an CompleteTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public CompleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new CompleteTaskCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteExpenditureCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.commands.DeleteExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Parses input arguments and creates a new DeleteExpenditureCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class DeleteExpenditureCommandParser implements Parser\u003cDeleteExpenditureCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteExpenditureCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * and returns an DeleteExpenditureCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public DeleteExpenditureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            return new DeleteExpenditureCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteExpenditureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "feijunzi": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new DeleteTaskCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditExpenditureCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.commands.EditExpenditureCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.commands.EditExpenditureCommand.EditExpenditureDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Parses input arguments and creates a new EditExpenditureCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class EditExpenditureCommandParser implements Parser\u003cEditExpenditureCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditExpenditureCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * and returns an EditExpenditureCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public EditExpenditureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_DATE, PREFIX_MONEY, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, EditExpenditureCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        EditExpenditureDescriptor editExpenditureDescriptor \u003d new EditExpenditureDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            editExpenditureDescriptor.setDescription(ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    .getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            editExpenditureDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MONEY).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            editExpenditureDescriptor.setMoney(ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            editExpenditureDescriptor.setCategory("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "                    ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (!editExpenditureDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new ParseException(EditExpenditureCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new EditExpenditureCommand(index, editExpenditureDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 9,
      "feijunzi": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class EditTaskCommandParser implements Parser\u003cEditTaskCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public EditTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK, PREFIX_MODULE, PREFIX_DATE, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        EditTaskCommand.EditTaskDescriptor editTaskDescriptor \u003d new EditTaskCommand.EditTaskDescriptor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TASK).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            editTaskDescriptor.setName(ParserUtil.parseTaskName(argMultimap.getValue(PREFIX_TASK).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            editTaskDescriptor.setModule(ParserUtil.parseTaskModule(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            editTaskDescriptor.setDate(ParserUtil.parseTaskDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            editTaskDescriptor.setPriority(ParserUtil.parseTaskPriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return new EditTaskCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExpenditureGetAdviceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PERIOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.ExpenditureGetAdviceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Money;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Parses input arguments and creates a new ExpenditureGetAdviceCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureGetAdviceCommandParser implements Parser\u003cExpenditureGetAdviceCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExpenditureGetAdviceCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * and returns an ExpenditureGetAdviceCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureGetAdviceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONEY, PREFIX_PERIOD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MONEY, PREFIX_PERIOD)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    ExpenditureGetAdviceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Money money \u003d ParserUtil.parseMoney(argMultimap.getValue(PREFIX_MONEY).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String m \u003d money.addingMoney;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String n \u003d argMultimap.getValue(PREFIX_PERIOD).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new ExpenditureGetAdviceCommand(m, n);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "import seedu.address.model.expenditureinfo.Money;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.TaskPriority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Parses a {@code String name} into a {@code TaskName}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static TaskName parseTaskName(String name) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TaskName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(TaskName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new TaskName(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Parses a {@code String module} into a {@code TaskModule}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws ParseException if the given {@code module} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static TaskModule parseTaskModule(String module) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedModule \u003d module.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TaskModule.isValidModule(trimmedModule)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(TaskModule.MESSAGE_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new TaskModule(trimmedModule);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Parses a {@code String date} into a {@code TaskDate}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static TaskDate parseTaskDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TaskDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(TaskDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new TaskDate(trimmedDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Parses a {@code String priority} into a {@code TaskPriority}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static TaskPriority parseTaskPriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!TaskPriority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(TaskPriority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new TaskPriority(trimmedPriority);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new ParseException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new ParseException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Parses a {@code String money} into a {@code Money}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * @throws ParseException if the given {@code money} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static Money parseMoney(String money) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(money);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        String trimmedMoney \u003d money.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (!Money.isValidMoney(trimmedMoney)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new ParseException(Money.MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new Money(trimmedMoney);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Parses a {@code String category} into a {@code category}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 17,
      "-": 162,
      "feijunzi": 48,
      "arty9": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "//@@author XiaoYunhan"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.commands.SortTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " * Parses input arguments and creates a new SortTaskCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class SortTaskCommandParser implements Parser\u003cSortTaskCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * and returns an SortTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public SortTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        String filter \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        if (\"module\".equals(filter) || \"date\".equals(filter) || \"priority\".equals(filter) || \"default\".equals(filter)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new SortTaskCommand(filter);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        } else if (\"reverse\".equals(filter)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            return new SortTaskCommand(filter);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UncompleteTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.UncompleteTaskCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Parses input arguments and creates a new CompleteTaskCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class UncompleteTaskCommandParser implements Parser\u003cUncompleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UncompleteTaskCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * and returns an UncompleteTaskCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public UncompleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new UncompleteTaskCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UncompleteTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewExpenditureCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.commands.ViewExpenditureCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Parses input arguments and creates a new ViewExpenditureCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ViewExpenditureCommandParser implements Parser\u003cViewExpenditureCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{4}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * and returns an ViewTaskCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ViewExpenditureCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String test \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (test.matches(DATE_VALIDATION_REGEX) || \"Food\".equals(test)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Drink\".equals(test)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Clothing\".equals(test)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Electronics\".equals(test)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"DailyNecessities\".equals(test)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Sports\".equals(test)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Communications\".equals(test)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Travels\".equals(test)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Study\".equals(test)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Office\".equals(test)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Pets\".equals(test)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Gifts\".equals(test)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Entertainment\".equals(test)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Traffic\".equals(test)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Shopping\".equals(test)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Beauty\".equals(test)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Furniture\".equals(test) || \"all\".equals(test)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return new ViewExpenditureCommand(test);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewExpenditureCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ViewTaskCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.ViewTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Parses input arguments and creates a new ViewTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class ViewTaskCommandParser implements Parser\u003cViewTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ViewTaskCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * and returns an ViewTaskCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ViewTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String filter \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (filter.equals(\"uncompleted\") || filter.equals(\"completed\") || filter.equals(\"all\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return new ViewTaskCommand(filter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ViewTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Removes {@code tag} from this {@code Person}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeTagFromPerson(Tag tag, Person person) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e(person.getTags());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!newTags.remove(tag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Person newPerson \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), newTags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        updatePerson(person, newPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code tag} from all persons in this {@code AddressBook}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeTag(Tag tag) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.forEach(person -\u003e removeTagFromPerson(tag, person));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "arty9": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Calendar information initializer"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class CalendarInfo {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final int firstDay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public CalendarInfo() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        firstDay \u003d calendar.get(Calendar.DAY_OF_WEEK);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Calendar getCalendar() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ExpenditureTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.ExpenditureList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureTracker implements ReadOnlyExpenditureTracker {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final ExpenditureList expenditures \u003d new ExpenditureList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTracker() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTracker(ReadOnlyExpenditureTracker toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void setExpenditures(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.expenditures.setExpenditures(expenditures);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void resetData(ReadOnlyExpenditureTracker newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        setExpenditures(newData.getExpenditureList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if an expenditure with the same identity as"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@code expenditure} exists in the expenditure tracker."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditures.contains(expenditure);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void addExpenditure(Expenditure e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditures.add(e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Get the expenditure records"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Map getExpenditureRecords() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditures.getExpenditureRecords();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Removes a person to the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void removeExpenditure(Expenditure key) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditures.remove(key);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Replaces the given expenditure {@code target} in the list with {@code editedExpenditure}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@code target} must exist in the expenditure tracker."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * must not be the same as another existing expenditure in the expenditure tracker."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void updateExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(editedExpenditure);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditures.setExpenditures(target, editedExpenditure);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditures.asUnmodifiableObservableList().size() + \" expenditures\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getExpenditureList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditures.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof ExpenditureTracker // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 expenditures.equals(((ExpenditureTracker) other).expenditures));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditures.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Predicate\u003cExpenditure\u003e PREDICATE_SHOW_ALL_EXPENDITURES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /** {@code Predicate} that evaluates based on the status of the task */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_COMPLETED_TASKS \u003d task -\u003e (task.getComplete());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_UNCOMPLETED_TASKS \u003d task -\u003e (!task.getComplete());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /** {@code Predicate} that evaluates based on the date of the task */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Predicate\u003cExpenditure\u003e getPredicateShowExpendituresOnDate(String date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Predicate\u003cExpenditure\u003e getPredicateShowExpendituresOfCategory(String category);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /** Returns the TodoList */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    ReadOnlyTodoList getTodoList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /** Returns the ExpenditureTracker */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    ReadOnlyExpenditureTracker getExpenditureTracker();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the to-do list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if an expenditure with the same identity as {@code expenditure} exists in the expenditure tracker."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    boolean hasExpenditure(Expenditure expenditure);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Deletes the given task."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * The task must exist in the to-do list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Deletes the given expenditure."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * The expenditure must exist in the expenditure tracker."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void deleteExpenditure(Expenditure target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Adds the given task."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code task} must not already exist in the to-do list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Adds the given expenditure."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    void addExpenditure(Expenditure expenditure);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Get the expenditure records."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Map getExpenditureRecords();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code target} must exist in the to-do list."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the to-do list."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void updateTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Replaces the given expenditure {@code target} with {@code editedExpenditure}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code target} must exist in the expenditure tracker."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * The expenditure identity of {@code editedExpenditure} must not be the same as another existing expenditure in"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * the expenditure tracker."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    void updateExpenditure(Expenditure target, Expenditure editedExpenditure);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void deleteTag(Tag tag);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expenditure list */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arty9"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getFilteredExpenditureList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Updates the filter of the filtered expenditure list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    void rankFilteredTaskDeadline();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    void rankFilteredTaskModule();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    void rankFilteredTaskPriority();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void reverseTodoList();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void rankTaskDefault();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if the model has previous to-do list states to restore."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arty9"
        },
        "content": "    boolean canUndoTodoList();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if the model has undone to-do list states to restore."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arty9"
        },
        "content": "    boolean canRedoTodoList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Restores the model\u0027s to-do list to its previous state."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void undoTodoList();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Restores the model\u0027s to-do list to its previously undone state."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void redoTodoList();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Saves the current to-do list state for undo/redo."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void commitTodoList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Saves the current expenditure tracker state for undo/redo."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    boolean canUndoExpenditureList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    boolean canRedoExpenditureList();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    void undoExpenditureList();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    void redoExpenditureList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    void commitExpenditureList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    String getUndoableCommand();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    void commitUndoableTodoList();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    void commitUndoableExpenditure();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 22,
      "XiaoYunhan": 20,
      "-": 102,
      "feijunzi": 3,
      "arty9": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.model.ExpenditureTrackerChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.events.model.TodoListChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "import seedu.address.logic.UndoableCommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final VersionedTodoList versionedTodoList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final VersionedExpenditureTracker versionedExpenditureTracker;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final FilteredList\u003cExpenditure\u003e filteredExpenditures;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    private final UndoableCommandHistory undoableCommandHistory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyTodoList todoList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                        ReadOnlyExpenditureTracker expenditureTracker, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireAllNonNull(addressBook, todoList, expenditureTracker, userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList \u003d new VersionedTodoList(todoList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        versionedExpenditureTracker \u003d new VersionedExpenditureTracker(expenditureTracker);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        filteredExpenditures \u003d new FilteredList\u003c\u003e(versionedExpenditureTracker.getExpenditureList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(versionedTodoList.getTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        undoableCommandHistory \u003d new UndoableCommandHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this(new AddressBook(), new TodoList(), new ExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Predicate\u003cExpenditure\u003e getPredicateShowExpendituresOnDate(String date) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditure -\u003e (expenditure.getDate().toString().equals(date));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Predicate\u003cExpenditure\u003e getPredicateShowExpendituresOfCategory(String category) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditure -\u003e (expenditure.getCategory().toString().equals(category));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ReadOnlyTodoList getTodoList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return versionedTodoList;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ReadOnlyExpenditureTracker getExpenditureTracker() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return versionedExpenditureTracker;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void indicateExpenditureTrackerChanged() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        raise(new ExpenditureTrackerChangedEvent(versionedExpenditureTracker));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private void indicateTodoListChanged() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "        raise(new TodoListChangedEvent(versionedTodoList));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return versionedTodoList.hasTask(task);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(expenditure);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return versionedExpenditureTracker.hasExpenditure(expenditure);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.removeTask(target);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arty9"
        },
        "content": "        indicateTodoListChanged();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void deleteExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedExpenditureTracker.removeExpenditure(target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        indicateExpenditureTrackerChanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.addTask(task);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arty9"
        },
        "content": "        updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arty9"
        },
        "content": "        indicateTodoListChanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        versionedExpenditureTracker.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        indicateExpenditureTrackerChanged();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Map getExpenditureRecords() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return versionedExpenditureTracker.getExpenditureRecords();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.updateTask(target, editedTask);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arty9"
        },
        "content": "        indicateTodoListChanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void updateExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedExpenditureTracker.updateExpenditure(target, editedExpenditure);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        indicateExpenditureTrackerChanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removeTag(tag);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arty9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code versionedTodoList}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredTasks);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arty9"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arty9"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expenditure List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expenditure} backed by the internal list of"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code versionedExpenditureTracker}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredExpenditures);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arty9"
        },
        "content": "        filteredExpenditures.setPredicate(predicate);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Rank Filtered Task List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rankFilteredTaskDeadline() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTodoList.sortTaskDate();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rankFilteredTaskModule() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTodoList.sortTaskModule();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rankFilteredTaskPriority() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTodoList.sortTaskPriority();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    public void reverseTodoList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTodoList.reverseTasks();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rankTaskDefault() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedTodoList.sortTaskDefault();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public boolean canUndoExpenditureList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return versionedExpenditureTracker.canUndo();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public boolean canRedoExpenditureList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return versionedExpenditureTracker.canRedo();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public void undoExpenditureList() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        versionedExpenditureTracker.undo();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        indicateExpenditureTrackerChanged();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public void redoExpenditureList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        versionedExpenditureTracker.redo();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        indicateExpenditureTrackerChanged();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public void commitExpenditureList() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        versionedExpenditureTracker.commit();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean canUndoTodoList() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return versionedTodoList.canUndo();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean canRedoTodoList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return versionedTodoList.canRedo();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void undoTodoList() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.undo();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "arty9"
        },
        "content": "        indicateTodoListChanged();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void redoTodoList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.redo();"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "arty9"
        },
        "content": "        indicateTodoListChanged();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void commitTodoList() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.commit();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public String getUndoableCommand() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        return undoableCommandHistory.getCommand();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public void commitUndoableTodoList() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        undoableCommandHistory.addTodoList();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    public void commitUndoableExpenditure() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        undoableCommandHistory.addExpenditureTracker();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 versionedExpenditureTracker.equals(other.versionedExpenditureTracker)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 filteredExpenditures.equals(other.filteredExpenditures)"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 versionedTodoList.equals(other.versionedTodoList)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 37,
      "XiaoYunhan": 46,
      "-": 211,
      "feijunzi": 13,
      "arty9": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyExpenditureTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public interface ReadOnlyExpenditureTracker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns an unmodifiable view of the expenditures list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    ObservableList\u003cExpenditure\u003e getExpenditureList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTodoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Unmodifiable view of a to-do list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "public interface ReadOnlyTodoList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns an unmodifiable view of the tasks list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * This list will not contain any duplicate tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TodoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Wraps all data at the to-do-list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TodoList implements ReadOnlyTodoList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final UniqueTaskList tasks \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoList() {}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Creates an TodoList using the Tasks in the {@code toBeCopied}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoList(ReadOnlyTodoList toBeCopied) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.tasks.setTasks(tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Resets the existing data of this {@code TodoList} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void resetData(ReadOnlyTodoList newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    //// task-level operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if a task with the same identity as {@code task} exists in the to-do list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return tasks.contains(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Adds a task to the to-do list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * The task must not already exist in the to-do list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "        tasks.add(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code target} must exist in the to-do list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the to-do list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "        tasks.setTask(target, editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Removes {@code key} from this {@code TodoList}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code key} must exist in the to-do list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "        tasks.remove(key);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortTaskDate() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.sortDate();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortTaskPriority() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.sortPriority();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortTaskModule() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.sortModule();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void reverseTasks () {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.reverseTask();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortTaskDefault () {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        tasks.sortDefault();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return tasks.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return tasks.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "                || (other instanceof TodoList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 tasks.equals(((TodoList) other).tasks));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return tasks.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "arty9": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Path expenditureTrackerFilePath \u003d Paths.get(\"data\", \"expendituretracker.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Path todoListFilePath \u003d Paths.get(\"data\" , \"todolist.xml\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Path getExpenditureTrackerFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditureTrackerFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Path getTodoListFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return todoListFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void setExpenditureTrackerFilePath(Path expenditureTrackerFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.expenditureTrackerFilePath \u003d expenditureTrackerFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTodoListFilePath(Path todoListFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.todoListFilePath \u003d todoListFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 Objects.equals(todoListFilePath, o.todoListFilePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 9,
      "-": 68,
      "arty9": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedExpenditureTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * {@code ExpenditureTracker} that keeps track of its own history."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class VersionedExpenditureTracker extends ExpenditureTracker {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final List\u003cReadOnlyExpenditureTracker\u003e expenditureTrackerStateList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public VersionedExpenditureTracker(ReadOnlyExpenditureTracker initialState) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureTrackerStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureTrackerStateList.add(new ExpenditureTracker(initialState));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Saves a copy of the current {@code ExpenditureTracker} state at the end of the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureTrackerStateList.add(new ExpenditureTracker(this));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureTrackerStateList.subList(currentStatePointer + 1, expenditureTrackerStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        resetData(expenditureTrackerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        resetData(expenditureTrackerStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return currentStatePointer \u003c expenditureTrackerStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!(other instanceof VersionedExpenditureTracker)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        VersionedExpenditureTracker otherVersionedExpenditureTracker \u003d (VersionedExpenditureTracker) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return super.equals(otherVersionedExpenditureTracker)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 expenditureTrackerStateList.equals(otherVersionedExpenditureTracker.expenditureTrackerStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedExpenditureTracker.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            super(\"Current state pointer at start of expenditureTrackerState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            super(\"Current state pointer at end of expenditureTrackerState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTodoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": " * {@code TodoList} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class VersionedTodoList extends TodoList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final List\u003cReadOnlyTodoList\u003e todoListStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public VersionedTodoList(ReadOnlyTodoList initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoListStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoListStateList.add(new TodoList(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Saves a copy of the current {@code TodoList} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoListStateList.add(new TodoList(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoListStateList.subList(currentStatePointer + 1, todoListStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Restores the to-do list to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        resetData(todoListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Restores the to-do list to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "        resetData(todoListStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if {@code undo()} has to-do list states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if {@code redo()} has to-do list states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return currentStatePointer \u003c todoListStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!(other instanceof VersionedTodoList)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList otherVersionedTodoList \u003d (VersionedTodoList) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return super.equals(otherVersionedTodoList)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 todoListStateList.equals(otherVersionedTodoList.todoListStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTodoList.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arty9"
        },
        "content": "            super(\"Current state pointer at start of todoListState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "            super(\"Current state pointer at end of todoListState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Represents a Expenditure\u0027s category in the expenditure tracker."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_CATEGORY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \"Category can only take few values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //public static final String CATEGORY_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @param category A valid category."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        categoryName \u003d category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return \"Food\".equals(test)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Drink\".equals(test)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Clothing\".equals(test)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Electronics\".equals(test)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"DailyNecessities\".equals(test)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Sports\".equals(test)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Communications\".equals(test)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Travels\".equals(test)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Study\".equals(test)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Office\".equals(test)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Pets\".equals(test)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Gifts\".equals(test)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Entertainment\".equals(test)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Traffic\".equals(test)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Shopping\".equals(test)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Beauty\".equals(test)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || \"Furniture\".equals(test);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Represents an expenditure\u0027s date in expenditure tracker."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \"Dates should only be in the format of DD-MM-YYYY, and it should not be blank.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                + \"DD must be in the range of 01 to 31, and MM must be in the range of 01 to 12.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{4}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final int DAY_MAX_LIMIT \u003d 31;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final int DAY_MIN_LIMIT \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final int MONTH_MAX_LIMIT \u003d 12;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final int MONTH_MIN_LIMIT \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final String addingDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        addingDate \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            String[] numbers \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            int day \u003d Integer.parseInt(numbers[0]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            int month \u003d Integer.parseInt(numbers[1]);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            if (day \u003e DAY_MAX_LIMIT || day \u003c DAY_MIN_LIMIT) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            } else if (month \u003e MONTH_MAX_LIMIT || month \u003c MONTH_MIN_LIMIT) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return addingDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 addingDate.equals(((Date) other).addingDate)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return addingDate.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/Description.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Represents a Expenditure\u0027s description in the expenditure tracker."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final String descriptionName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        descriptionName \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return descriptionName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 descriptionName.equals(((Description) other).descriptionName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return descriptionName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/Expenditure.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class Expenditure {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Money money;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Expenditure(Description description, Date date, Money money, Category category) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireAllNonNull(description, date, money, category);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Money getMoney() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return money;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if both expenditures have the same identity fields."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * This defines a weaker notion of equality between two expenditures."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean isSameExpenditure(Expenditure otherExpenditure) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (otherExpenditure \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return otherExpenditure !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 otherExpenditure.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 otherExpenditure.getDate().equals(getDate())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 otherExpenditure.getMoney().equals(getMoney())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 otherExpenditure.getCategory().equals(getCategory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return Objects.hash(date, money, category);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        builder.append(\" Description: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(\" Money: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(getMoney())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(\" Category \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .append(getCategory());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/ExpenditureList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.exceptions.DuplicateExpenditureException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.exceptions.ExpenditureNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * A list of expenditures."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * The removal of a person uses Expenditure#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureList implements Iterable\u003cExpenditure\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final ObservableList\u003cExpenditure\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean contains(Expenditure toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpenditure);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Adds an expenditure to the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void add(Expenditure toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Removes the equivalent expenditure from the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * The expenditure must exist in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void remove(Expenditure toRemove) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new ExpenditureNotFoundException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void setExpenditures(ExpenditureList replacement) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void setExpenditures(List\u003cExpenditure\u003e expenditures) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireAllNonNull(expenditures);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        internalList.setAll(expenditures);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void setExpenditures(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireAllNonNull(target, editedExpenditure);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new ExpenditureNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!target.isSameExpenditure(editedExpenditure) \u0026\u0026 contains(editedExpenditure)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new DuplicateExpenditureException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        internalList.set(index, editedExpenditure);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Map getExpenditureRecords() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Map \u003cString, Double\u003e map \u003d new HashMap \u003cString, Double\u003e ();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String category;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        double money;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        //System.out.println(\"Now we are in expenditureList executing getExpenditureRecords.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        while (index \u003c internalList.size()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            category \u003d internalList.get(index).getCategory().categoryName;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            money \u003d Double.parseDouble(internalList.get(index).getMoney().addingMoney);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            if (!map.containsKey(category)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                map.put(category, 0.0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            map.put(category, map.get(category) + money);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ObservableList\u003cExpenditure\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Iterator\u003cExpenditure\u003e iterator() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof ExpenditureList // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 internalList.equals(((ExpenditureList) other).internalList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/Money.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class Money {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MESSAGE_MONEY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \"Dates should only contain integer or floating point number, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MONEY_VALIDATION_REGEX \u003d \"[-+]?[0-9]+\\\\.?[0-9]*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final String addingMoney;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Money(String money) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(money);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        checkArgument(isValidMoney(money), MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        addingMoney \u003d money;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static boolean isValidMoney(String test) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return test.matches(MONEY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return addingMoney;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                || (other instanceof Money // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 addingMoney.equals(((Money) other).addingMoney)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return addingMoney.hashCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/exceptions/DuplicateExpenditureException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.model.expenditureinfo.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Signals that the operation will result in duplicate Expenditures (Expenditures are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class DuplicateExpenditureException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public DuplicateExpenditureException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        super(\"Operation would result in duplicate expenditures\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "feijunzi": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expenditureinfo/exceptions/ExpenditureNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "package seedu.address.model.expenditureinfo.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " * Signals that the operation is unable to find the specified expenditure."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "feijunzi"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "public class ExpenditureNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "feijunzi": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Represents a Task in the to-do list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final TaskName name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final TaskModule module;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final TaskDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final TaskPriority priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Task(TaskName name, TaskModule module, TaskDate date, TaskPriority priority, boolean isComplete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireAllNonNull(name, module, date, priority);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskName getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskModule getModule() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskDate getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskPriority getPriority() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean getComplete() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setAsCompleted() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        isComplete \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setAsUncompleted() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        isComplete \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getMonth() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return date.toString().substring(3, 5);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return date.toString().substring(0, 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getNameString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.toString();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both tasks are totally the same."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 otherTask.getModule().equals(getModule());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * This defines a stronger notion of equality between two tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 otherTask.getModule().equals(getModule())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 otherTask.getDate().equals(getDate())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return Objects.hash(name, module, date, priority, isComplete);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arty9"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arty9"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .append(\" Module: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .append(getModule())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .append(getPriority());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "arty9": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Represents a Task\u0027s due date in the to-do list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskDate {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "            \"Dates should be of the format DD-MM, where DD and MM are numbers.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "                    + \"DD must be in the range of 01 to 31, and MM must be in the range of 01 to 12.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"[\\\\d]{2}\" + \"-\" + \"[\\\\d]{2}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final int DAY_MAX_LIMIT \u003d 31;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final int DAY_MIN_LIMIT \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final int MONTH_MAX_LIMIT \u003d 12;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final int MONTH_MIN_LIMIT \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Constructs an {@code TaskDate}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskDate(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "            String[] numbers \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "            int day \u003d Integer.parseInt(numbers[0]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "            int month \u003d Integer.parseInt(numbers[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "            if (day \u003e DAY_MAX_LIMIT || day \u003c DAY_MIN_LIMIT) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "            } else if (month \u003e MONTH_MAX_LIMIT || month \u003c MONTH_MIN_LIMIT) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "                || (other instanceof TaskDate // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 value.equals(((TaskDate) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskModule.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Represents a Task\u0027s module code in the to-do list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModule(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskModule {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_MODULE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "            \"Module code should be of the format XXNNNN, where X is an alphabetical character and N is a number\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MODULE_VALIDATION_REGEX \u003d \"[a-zA-Z]{2}[\\\\d]{4}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Constructs an {@code TaskModule}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param module A valid module."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskModule(String module) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        checkArgument(isValidModule(module), MESSAGE_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        value \u003d module.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if a given string is a valid module."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static boolean isValidModule(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return test.matches(MODULE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "                || (other instanceof TaskModule // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 value.equals(((TaskModule) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Represents a Task\u0027s name in the to-do list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "            \"Task name can contain any characters, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\S][\\\\p{ASCII} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskName(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "                || (other instanceof seedu.address.model.task.TaskName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 fullName.equals(((seedu.address.model.task.TaskName) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "arty9": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/TaskPriority.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Represents a Task\u0027s priority in the to-do list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskPriority {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_PRIORITY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "            \"Priority should only contain one number: 1, 2 or 3\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String PRIORITY_VALIDATION_REGEX \u003d \"[123]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Constructs a {@code TaskPriority}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param priority A valid priority."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskPriority(String priority) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns true if a given string is a valid priority number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return test.matches(PRIORITY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "                || (other instanceof TaskPriority // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 value.equals(((TaskPriority) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.SortComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A task is considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating of"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniqueTaskList. However, the removal of a task uses Task#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent task as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a task to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task identity of {@code editedTask} must not be the same as another existing task in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent task from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The task must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code tasks} must not contain duplicate tasks."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortDate() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(internalList, Comparator.comparing(Task::getMonth).thenComparing(Task::getDay));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortModule() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.sort(SortComparator.compareModule());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortPriority() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.sort(SortComparator.comparePriority());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void reverseTask() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(internalList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sortDefault() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.sort(internalList, Comparator.comparing(Task::getNameString));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code tasks} contains only unique tasks."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 151,
      "arty9": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": " * identity fields)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Signals that the operation is unable to find the specified task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ExpenditureTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Money;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskModule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskPriority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //@@author SHININGGGG"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static Expenditure[] getSampleExpenditures() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new Expenditure[] {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Expenditure(new Description(\"Mcdonalds McFlurry\"), new Date(\"01-01-2018\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new Money(\"8.5\"), new Category(\"Food\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Expenditure(new Description(\"Chicken rice\"), new Date(\"02-01-2018\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new Money(\"4.2\"), new Category(\"Food\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Expenditure(new Description(\"iPhoneX\"), new Date(\"03-01-2018\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new Money(\"1680\"), new Category(\"Electronics\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Expenditure(new Description(\"iPhoneXS MAX\"), new Date(\"13-10-2018\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new Money(\"2135\"), new Category(\"Electronics\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Expenditure(new Description(\"Aircon\"), new Date(\"14-10-2018\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new Money(\"799.00\"), new Category(\"Furniture\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Expenditure(new Description(\"Nike hoodie\"), new Date(\"15-10-2018\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new Money(\"135\"), new Category(\"Clothing\"))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new Task[] {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Task(new TaskName(\"Milestone 3\"), new TaskModule(\"CS2113\"), new TaskDate(\"01-11\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new TaskPriority(\"1\"), false),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Task(new TaskName(\"Tutorial 7\"), new TaskModule(\"CS2102\"), new TaskDate(\"02-11\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new TaskPriority(\"3\"), true),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Task(new TaskName(\"Assignment 3\"), new TaskModule(\"CG2027\"), new TaskDate(\"23-10\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new TaskPriority(\"1\"), false),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Task(new TaskName(\"Essay\"), new TaskModule(\"CG2028\"), new TaskDate(\"10-11\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new TaskPriority(\"2\"), true),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Task(new TaskName(\"Forum Post\"), new TaskModule(\"CS2101\"), new TaskDate(\"20-11\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new TaskPriority(\"2\"), false),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            new Task(new TaskName(\"Webcast\"), new TaskModule(\"CS1231\"), new TaskDate(\"14-11\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    new TaskPriority(\"3\"), true),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static ReadOnlyExpenditureTracker getSampleExpenditureTracker() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureTracker sampleEt \u003d new ExpenditureTracker();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (Expenditure sampleExpenditure : getSampleExpenditures()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            sampleEt.addExpenditure(sampleExpenditure);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return sampleEt;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static ReadOnlyTodoList getSampleTodoList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        TodoList sampleTd \u003d new TodoList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            sampleTd.addTask(sampleTask);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return sampleTd;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 76,
      "-": 41,
      "arty9": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExpenditureTrackerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Represents a storage for {@link seedu.address.model.ExpenditureTracker}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public interface ExpenditureTrackerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Path getExpenditureTrackerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns Expenditure data as a {@link ReadOnlyExpenditureTracker}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Optional\u003cReadOnlyExpenditureTracker\u003e readExpenditureTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @see #getExpenditureTrackerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Optional\u003cReadOnlyExpenditureTracker\u003e readExpenditureTracker(Path filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenditureTracker} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @param expenditureTracker cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @see #saveExpenditureTracker(ReadOnlyExpenditureTracker)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.model.ExpenditureTrackerChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.events.model.TodoListChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public interface Storage extends AddressBookStorage, ExpenditureTrackerStorage, TodoListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Path getExpenditureTrackerFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    Optional\u003cReadOnlyExpenditureTracker\u003e readExpenditureTracker() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Path getTodoListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void saveTodoList(ReadOnlyTodoList todoList) throws IOException;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Saves the current version of the Expenditure Tracker to the hard disk."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    void handleExpenditureTrackerChangedEvent(ExpenditureTrackerChangedEvent etce);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Saves the current version of the To-do List to the hard disk."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void handleTodoListChangedEvent(TodoListChangedEvent tdce);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 17,
      "-": 40,
      "arty9": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.model.ExpenditureTrackerChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.events.model.TodoListChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Manages storage of AddressBook, TodoList data in local storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private ExpenditureTrackerStorage expenditureTrackerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private TodoListStorage todoListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, ExpenditureTrackerStorage expenditureTrackerStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                          TodoListStorage todoListStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.expenditureTrackerStorage \u003d expenditureTrackerStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.todoListStorage \u003d todoListStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "        logger.fine(\"Attempting to read AB data from file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        logger.fine(\"Attempting to write to AB data file: \" + filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenditureTracker methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Path getExpenditureTrackerFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditureTrackerStorage.getExpenditureTrackerFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureTracker\u003e readExpenditureTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return readExpenditureTracker(expenditureTrackerStorage.getExpenditureTrackerFilePath());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureTracker\u003e readExpenditureTracker(Path expenditureFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        logger.fine(\"Attempting to read ET data from file: \" + expenditureFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditureTrackerStorage.readExpenditureTracker(expenditureFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        saveExpenditureTracker(expenditureTracker, expenditureTrackerStorage.getExpenditureTrackerFilePath());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                                       Path filePath) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        logger.fine(\"Attempting to write to ET data file: \" + filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureTrackerStorage.saveExpenditureTracker(expenditureTracker, filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arty9"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TodoList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Path getTodoListFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return todoListStorage.getTodoListFilePath();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return readTodoList(todoListStorage.getTodoListFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arty9"
        },
        "content": "        logger.fine(\"Attempting to read TDL data from file: \" + filePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return todoListStorage.readTodoList(filePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList) throws IOException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arty9"
        },
        "content": "        saveTodoList(todoList, todoListStorage.getTodoListFilePath());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arty9"
        },
        "content": "        logger.fine(\"Attempting to write to TDL data file: \" + filePath);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoListStorage.saveTodoList(todoList, filePath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arty9"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to AB file\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void handleExpenditureTrackerChangedEvent(ExpenditureTrackerChangedEvent event) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to ET file\"));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            saveExpenditureTracker(event.data);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void handleTodoListChangedEvent(TodoListChangedEvent event) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arty9"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to TDL file\"));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arty9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arty9"
        },
        "content": "            saveTodoList(event.data);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arty9"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 43,
      "-": 94,
      "arty9": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TodoListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Represents a storage for {@link seedu.address.model.TodoList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "public interface TodoListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Path getTodoListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns TodoList data as a {@link ReadOnlyTodoList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @see #getTodoListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    Optional\u003cReadOnlyTodoList\u003e readTodoList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Saves the given {@link ReadOnlyTodoList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param todoList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void saveTodoList(ReadOnlyTodoList todoList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @see #saveTodoList(ReadOnlyTodoList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "    void saveTodoList(ReadOnlyTodoList todoList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedExpenditure.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Money;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * JAXB-friendly version of the Expenditure."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class XmlAdaptedExpenditure {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expenditure\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private String money;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public XmlAdaptedExpenditure() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Constructs an {@code XmlAdaptedExpenditure} with the given person details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public XmlAdaptedExpenditure(String description, String date, String money, String category) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.money \u003d money;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Converts a given Expenditure into this class for JAXB use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public XmlAdaptedExpenditure(Expenditure source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        description \u003d source.getDescription().descriptionName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        date \u003d source.getDate().addingDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        money \u003d source.getMoney().addingMoney;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Converts this jaxb-friendly adapted expenditure object into the model\u0027s expenditure object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expenditure"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Expenditure toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (money \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Money.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!Money.isValidMoney(money)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        final Money modelMoney \u003d new Money(money);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new Expenditure(modelDescription, modelDate, modelMoney, modelCategory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        XmlAdaptedExpenditure otherExpenditure \u003d (XmlAdaptedExpenditure) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return Objects.equals(description, otherExpenditure.description)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherExpenditure.date)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 Objects.equals(money, otherExpenditure.money)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 Objects.equals(category, otherExpenditure.category);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTask.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskModule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskPriority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": " * JAXB-friendly version of the Task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class XmlAdaptedTask {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private String module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private String priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private boolean status;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Constructs an XmlAdaptedTask."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public XmlAdaptedTask() {}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Constructs an {@code XmlAdaptedTask} with the given task details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public XmlAdaptedTask(String name, String module, String date, String priority, boolean status) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Converts a given Task into this class for JAXB use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedTask"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public XmlAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        module \u003d source.getModule().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "        date \u003d source.getDate().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        status \u003d source.getComplete();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Converts this jaxb-friendly adapted task object into the model\u0027s Task object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskName.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!TaskName.isValidName(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException(TaskName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "        final TaskName modelName \u003d new TaskName(name);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskModule.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!TaskModule.isValidModule(module)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException(TaskModule.MESSAGE_MODULE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "        final TaskModule modelPhone \u003d new TaskModule(module);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arty9"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!TaskDate.isValidDate(date)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException(TaskDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "        final TaskDate modelEmail \u003d new TaskDate(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, TaskPriority.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!TaskPriority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IllegalValueException(TaskPriority.MESSAGE_PRIORITY_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": "        final TaskPriority modelAddress \u003d new TaskPriority(priority);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "        final boolean modelStatus \u003d status;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return new Task(modelName, modelPhone, modelEmail, modelAddress, modelStatus);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!(other instanceof XmlAdaptedTask)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arty9"
        },
        "content": "        XmlAdaptedTask otherTask \u003d (XmlAdaptedTask) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return Objects.equals(name, otherTask.name)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 Objects.equals(module, otherTask.module)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherTask.date)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 Objects.equals(priority, otherTask.priority)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arty9"
        },
        "content": "                \u0026\u0026 Objects.equals(status, otherTask.status);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlExpenditureTrackerStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * A class to access ExpenditureTracker data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class XmlExpenditureTrackerStorage implements ExpenditureTrackerStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlExpenditureTrackerStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public XmlExpenditureTrackerStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Path getExpenditureTrackerFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureTracker\u003e readExpenditureTracker() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return readExpenditureTracker(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Similar to {@link #readExpenditureTracker()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Optional\u003cReadOnlyExpenditureTracker\u003e readExpenditureTracker(Path filePath)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throws DataConversionException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            logger.info(\"ExpenditureTracker file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        XmlSerializableExpenditureTracker xmlExpenditureTracker \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                XmlFileStorage.loadExpenditureTrackerDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return Optional.of(xmlExpenditureTracker.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        saveExpenditureTracker(expenditureTracker, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Similar to {@link #saveExpenditureTracker(ReadOnlyExpenditureTracker)}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                                       Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(expenditureTracker);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        XmlFileStorage.saveExpenditureTrackerDataToFile(filePath,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new XmlSerializableExpenditureTracker(expenditureTracker));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Stores addressbook and todolist data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Saves the given expendituretracker data to the specified file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static void saveExpenditureTrackerDataToFile(Path file, XmlSerializableExpenditureTracker expenditureTracker)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            XmlUtil.saveDataToFile(file, expenditureTracker);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns expenditure tracker in the file or an empty expenditure tracker"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static XmlSerializableExpenditureTracker loadExpenditureTrackerDataFromSaveFile(Path file)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throws DataConversionException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableExpenditureTracker.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Saves the given todolist data to the specified file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static void saveTodoListDataToFile(Path file, XmlSerializableTodoList todoList)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "            XmlUtil.saveDataToFile(file, todoList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns to-do list in the file or an empty to-do list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static XmlSerializableTodoList loadTodoListDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableTodoList.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 25,
      "-": 38,
      "arty9": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableExpenditureTracker.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ExpenditureTracker;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * An Immutable ExpenditureTracker that is serializable to XML format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "@XmlRootElement(name \u003d \"expendituretracker\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class XmlSerializableExpenditureTracker {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private List\u003cXmlAdaptedExpenditure\u003e expenditures;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Creates an empty XmlSerializableExpenditureTracker."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public XmlSerializableExpenditureTracker() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public XmlSerializableExpenditureTracker(ReadOnlyExpenditureTracker src) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditures.addAll(src.getExpenditureList().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .map(XmlAdaptedExpenditure::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Converts this expendituretracker into the model\u0027s {@code ExpenditureTracker} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@code XmlAdaptedExpenditure}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTracker toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureTracker expenditureTracker \u003d new ExpenditureTracker();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (XmlAdaptedExpenditure e : expenditures) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            Expenditure expenditure \u003d e.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            expenditureTracker.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditureTracker;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!(other instanceof XmlSerializableExpenditureTracker)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditures.equals(((XmlSerializableExpenditureTracker) other).expenditures);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableTodoList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": " * An Immutable TodoList that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "@XmlRootElement(name \u003d \"todolist\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class XmlSerializableTodoList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private List\u003cXmlAdaptedTask\u003e tasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Creates an empty XmlSerializableTodoList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public XmlSerializableTodoList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public XmlSerializableTodoList(ReadOnlyTodoList src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        tasks.addAll(src.getTaskList().stream().map(XmlAdaptedTask::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Converts this todolist into the model\u0027s {@code TodoList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code XmlAdaptedTask}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList todoList \u003d new TodoList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        for (XmlAdaptedTask t : tasks) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "            Task task \u003d t.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "            if (todoList.hasTask(task)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "            todoList.addTask(task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!(other instanceof XmlSerializableTodoList)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return tasks.equals(((XmlSerializableTodoList) other).tasks);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlTodoListStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": " * A class to access TodoList data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class XmlTodoListStorage implements TodoListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlTodoListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public XmlTodoListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Path getTodoListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return readTodoList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Similar to {@link #readTodoList()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Optional\u003cReadOnlyTodoList\u003e readTodoList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "            logger.info(\"TodoList file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        XmlSerializableTodoList xmlTodoList \u003d XmlFileStorage.loadTodoListDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return Optional.of(xmlTodoList.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "        saveTodoList(todoList, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Similar to {@link #saveTodoList(ReadOnlyTodoList)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void saveTodoList(ReadOnlyTodoList todoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(todoList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "        XmlFileStorage.saveTodoListDataToFile(filePath, new XmlSerializableTodoList(todoList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalendarPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.CalendarInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalendarPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private CalendarInfo calendarInfo \u003d new CalendarInfo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private int firstDay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private GridPane calendarView \u003d new GridPane();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Label date1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public CalendarPanel() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        calendar \u003d calendarInfo.getCalendar();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        firstDay \u003d calendarInfo.firstDay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        setGridPane(calendar);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void setGridPane (Calendar calendar) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        int numOfDays;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        int week;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        int day \u003d firstDay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (calendar.get(Calendar.MONTH) \u003d\u003d Calendar.JANUARY"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            || calendar.get(Calendar.MONTH) \u003d\u003d Calendar.MARCH"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            || calendar.get(Calendar.MONTH) \u003d\u003d Calendar.MAY"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            || calendar.get(Calendar.MONTH) \u003d\u003d Calendar.JULY"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            || calendar.get(Calendar.MONTH) \u003d\u003d Calendar.AUGUST"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            || calendar.get(Calendar.MONTH) \u003d\u003d Calendar.OCTOBER"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            || calendar.get(Calendar.MONTH) \u003d\u003d Calendar.DECEMBER) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            numOfDays \u003d 31;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else if (calendar.get(Calendar.MONTH) \u003d\u003d Calendar.FEBRUARY) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            numOfDays \u003d 29;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            numOfDays \u003d 30;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        //for (int i \u003d 0; i \u003c numOfDays; i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        week \u003d calendar.get(Calendar.WEEK_OF_MONTH);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        calendar.set(Calendar.DAY_OF_MONTH, 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        date1.setText(Integer.toString(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        calendarView.add(date1, (day % 7), week);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        day++;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        calendarView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenditureCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * An UI component that displays information of an {@code Expenditure}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final String FXML \u003d \"ExpenditureListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public final Expenditure expenditure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private HBox expenditureCardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Label money;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureCard(Expenditure expenditure, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.expenditure \u003d expenditure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        description.setText(expenditure.getDescription().descriptionName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        category.setText(expenditure.getCategory().categoryName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        date.setText(expenditure.getDate().addingDate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        money.setText(expenditure.getMoney().addingMoney);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        if (!(other instanceof ExpenditureCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureCard card \u003d (ExpenditureCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u0026\u0026 expenditure.equals(card.expenditure);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenditureListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.ui.ExpenditurePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Panel containing the list of expenditures."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private static final String FXML \u003d \"ExpenditureListPanel.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenditureListPanel.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private ListView\u003cExpenditure\u003e expenditureListView;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureListPanel(ObservableList\u003cExpenditure\u003e expenditureList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        setConnections(expenditureList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void setConnections(ObservableList\u003cExpenditure\u003e expenditureList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureListView.setItems(expenditureList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureListView.setCellFactory(listView -\u003e new ExpenditureListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                        logger.fine(\"Selection in expenditure list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                        raise(new ExpenditurePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Scrolls to the {@code ExpenditureCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            expenditureListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            expenditureListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expenditure} using a {@code ExpenditureCard}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    class ExpenditureListViewCell extends ListCell\u003cExpenditure\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        protected void updateItem(Expenditure expenditure, boolean empty) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            super.updateItem(expenditure, empty);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            if (empty || expenditure \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                setGraphic(new ExpenditureCard(expenditure, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private ExpenditureListPanel expenditureListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private GridPane calendarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private StackPane expenditureListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        //browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        //browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        calendarPanel \u003d new CalendarPanel();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarPanel.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureListPanel \u003d new ExpenditureListPanel(logic.getFilteredExpenditureList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureListPanelPlaceholder.getChildren().add(expenditureListPanel.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskListPanel getTaskListPanel() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return taskListPanel;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureListPanel getExpenditureListPanel() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditureListPanel;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 21,
      "-": 219
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    //@FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    //private HBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label taskname;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label taskmodule;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label taskdate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Label taskpriority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Label taskstate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        taskname.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        taskmodule.setText(task.getModule().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        taskdate.setText(task.getDate().value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (task.getPriority().value.equals(\"1\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "            taskpriority.setText(\"High priority (1)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } else if (task.getPriority().value.equals(\"2\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "            taskpriority.setText(\"Medium priority (2)\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "            taskpriority.setText(\"Low priority (3)\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        if (task.getComplete()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "            taskstate.setText(\"Status: Completed\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "            taskstate.setText(\"Status: Uncompleted\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof TaskCard)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskCard card \u003d (TaskCard) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 62,
      "arty9": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/calendar.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "arty9": 1
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 3,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import java.lang.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import java.util.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003cGridPane xmlns:fx\u003d\"http://javafx.com/fxml\"  hgap\u003d\"30\" vgap\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003cpadding\u003e\u003cInsets top\u003d\"25\" right\u003d\"25\" bottom\u003d\"10\" left\u003d\"25\"/\u003e\u003c/padding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Sun\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Mon\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Tue\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Wed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Thur\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Fri\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Sat\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"0\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"1\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"2\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"3\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"2\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"4\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"5\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"2\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"6\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"7\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"2\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"8\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"9\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"10\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"11\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"3\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"12\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"13\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"3\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"14\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"3\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"15\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"16\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"17\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"4\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"18\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"19\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"4\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"20\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"4\"/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"21\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"4\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"22\""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"23\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"24\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"2\" GridPane.rowIndex\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"25\""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"3\" GridPane.rowIndex\u003d\"5\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"26\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"4\" GridPane.rowIndex\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"27\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"5\" GridPane.rowIndex\u003d\"5\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"28\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"6\" GridPane.rowIndex\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"29\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"6\""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnSpan\u003d\"2\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"30\""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "           GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"6\"/\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel fx:id\u003d\"date1\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 125
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "    -fx-text-fill: #737373;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #taskListPanel, #taskWebpage {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 354,
      "arty9": 1
    }
  },
  {
    "path": "src/main/resources/view/ExpenditureListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c!-- @@author SHININGGGG --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003cHBox id\u003d\"expenditureCardPane\" fx:id\u003d\"expenditureCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cLabel fx:id\u003d\"money\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$money\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 35
    }
  },
  {
    "path": "src/main/resources/view/ExpenditureListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c!-- @@author SHININGGGG --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cLabel text\u003d\"Expenditure Tracker\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    \u003cListView fx:id\u003d\"expenditureListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 11
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003cImage url\u003d\"@/images/calendar.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"taskList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "          \u003cGridPane fx:id\u003d\"calendarPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "          \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "          \u003cVBox fx:id\u003d\"expenditureList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            \u003cStackPane fx:id\u003d\"expenditureListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 11,
      "-": 65,
      "arty9": 1
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"taskname\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskmodule\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$module\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskdate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskpriority\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "            \u003cLabel fx:id\u003d\"taskstate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "arty9": 2
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003cLabel text\u003d\"To-do List\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "arty9": 2
    }
  },
  {
    "path": "src/test/data/XmlSerializableTodoListTest/duplicateTaskTodoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003ctodolist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eMilestone v9.9\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCS2113\u003c/module\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e10-02\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c!-- Task with same identity as Milestone v9.9 --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eMilestone v9.9\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCS2113\u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e31-10\u003c/date\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003etrue\u003c/status\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c/todolist\u003e"
      }
    ],
    "authorContributionMap": {
      "arty9": 21
    }
  },
  {
    "path": "src/test/data/XmlSerializableTodoListTest/invalidTaskTodoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003ctodolist\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c!-- Task with invalid date field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eMilestone v9.9\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCS2113\u003c/module\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e10-023\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c/todolist\u003e"
      }
    ],
    "authorContributionMap": {
      "arty9": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableTodoListTest/typicalTasksTodoList.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c!-- TodoList save file which contains the same Task values as in TypicalTasks#getTypicalTodoList() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003ctodolist\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eAssignment 2\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCG2027\u003c/module\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e16-10\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eLab 1\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCG2028\u003c/module\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e30-08\u003c/date\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eCrowdfunding Website\u003c/name\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCS2102\u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e11-11\u003c/date\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eQuiz 9\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCS1231\u003c/module\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e14-10\u003c/date\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e1\u003c/priority\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eTutorial 5\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCS2040\u003c/module\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e26-09\u003c/date\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e3\u003c/priority\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003ctasks\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cname\u003eLecture 3\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cmodule\u003eCS2113\u003c/module\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cdate\u003e12-10\u003c/date\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cpriority\u003e2\u003c/priority\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        \u003cstatus\u003efalse\u003c/status\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    \u003c/tasks\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "\u003c/todolist\u003e"
      }
    ],
    "authorContributionMap": {
      "arty9": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), (model.getTodoList()), (model.getExpenditureTracker()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "arty9": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : Something Daily\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "arty9": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/calendar.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "arty9": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.ViewTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        //assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        //assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String deleteCommand \u003d \"TDL_delete 9\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        //assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        //assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String viewTaskCommand \u003d ViewTaskCommand.COMMAND_WORD + \" all\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertCommandSuccess(viewTaskCommand, ViewTaskCommand.MESSAGE_SUCCESS_ALL, model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertHistoryCorrect(viewTaskCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getTodoList(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 1,
      "-": 112,
      "arty9": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(), getTypicalExpenditureTracker(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 2,
      "-": 47,
      "arty9": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        public Predicate\u003cExpenditure\u003e getPredicateShowExpendituresOnDate(String date) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        public Predicate\u003cExpenditure\u003e getPredicateShowExpendituresOfCategory(String category) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        public void addExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        public Map getExpenditureRecords () {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public ReadOnlyTodoList getTodoList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        public ReadOnlyExpenditureTracker getExpenditureTracker() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public boolean hasExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public void deleteExpenditure(Expenditure target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void updateTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public void updateExpenditure(Expenditure target, Expenditure editedExpenditure) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public ObservableList\u003cExpenditure\u003e getFilteredExpenditureList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        public void updateFilteredExpenditureList(Predicate\u003cExpenditure\u003e predicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void rankFilteredTaskDeadline() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public void rankFilteredTaskModule() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public void rankFilteredTaskPriority() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public void reverseTodoList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public void rankTaskDefault() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public boolean canUndoTodoList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public boolean canRedoTodoList() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void undoTodoList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void redoTodoList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void commitTodoList() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public boolean canUndoExpenditureList() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public boolean canRedoExpenditureList() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void undoExpenditureList() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void redoExpenditureList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void commitExpenditureList() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public String getUndoableCommand() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void commitUndoableTodoList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        public void commitUndoableExpenditure() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteTag(Tag tag) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 29,
      "XiaoYunhan": 40,
      "-": 239,
      "feijunzi": 23,
      "arty9": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddTaskCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "public class AddTaskCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "XiaoYunhan": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 3,
      "-": 35,
      "arty9": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_UNUSED \u003d \"unused\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_NAME_ASSIGNMENT \u003d \"Assignment 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_NAME_TUTORIAL \u003d \"Tutorial 5\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_MODULE_ASSIGNMENT \u003d \"CS2102\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_MODULE_TUTORIAL \u003d \"CG2028\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_DATE_ASSIGNMENT \u003d \"19-10\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_DATE_TUTORIAL \u003d \"04-08\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_PRIORITY_ASSIGNMENT \u003d \"1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String VALID_TASK_PRIORITY_TUTORIAL \u003d \"2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_NAME_DESC_ASSIGNMENT \u003d \" \" + PREFIX_TASK + VALID_TASK_NAME_ASSIGNMENT;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_NAME_DESC_TUTORIAL \u003d \" \" + PREFIX_TASK + VALID_TASK_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_MODULE_DESC_ASSIGNMENT \u003d \" \" + PREFIX_MODULE + VALID_TASK_MODULE_ASSIGNMENT;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_MODULE_DESC_TUTORIAL \u003d \" \" + PREFIX_MODULE + VALID_TASK_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_DATE_DESC_ASSIGNMENT \u003d \" \" + PREFIX_DATE + VALID_TASK_DATE_ASSIGNMENT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_DATE_DESC_TUTORIAL \u003d \" \" + PREFIX_DATE + VALID_TASK_DATE_TUTORIAL;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_PRIORITY_DESC_ASSIGNMENT \u003d \" \" + PREFIX_PRIORITY + VALID_TASK_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String TASK_PRIORITY_DESC_TUTORIAL \u003d \" \" + PREFIX_PRIORITY + VALID_TASK_PRIORITY_TUTORIAL;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String INVALID_TASK_NAME_DESC \u003d \" \" + PREFIX_TASK + \"Essay*\"; // \u0027*\u0027 not allowed in names"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String INVALID_TASK_MODULE_DESC \u003d \" \" + PREFIX_MODULE + \"CS23345\"; // invalid module code"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String INVALID_TASK_DATE_DESC \u003d \" \" + PREFIX_DATE + \"0912\"; // missing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String INVALID_TASK_PRIORITY_DESC \u003d \" \" + PREFIX_TASK + \"4\"; // only 1, 2, or 3 allowed"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Deletes the first task in {@code model}\u0027s filtered list from {@code model}\u0027s to-do list."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static void deleteFirstTask(Model model) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.deleteTask(firstTask);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.commitTodoList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 142,
      "arty9": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 6,
      "XiaoYunhan": 1,
      "-": 168,
      "arty9": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalTodoList(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalTodoList(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalTodoList(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalTodoList(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalTodoList(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "XiaoYunhan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), getTypicalTodoList(),"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 7,
      "XiaoYunhan": 1,
      "-": 236,
      "arty9": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExpenditureGetAdviceCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureGetAdviceCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 3,
      "-": 83,
      "arty9": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(), getTypicalExpenditureTracker(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), getTypicalTodoList(), getTypicalExpenditureTracker(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 1,
      "-": 39,
      "arty9": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.undoTodoList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        model.undoTodoList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedModel.undoTodoList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedModel.undoTodoList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedModel.redoTodoList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedModel.redoTodoList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 3,
      "-": 35,
      "arty9": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 3,
      "-": 116,
      "arty9": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstTask;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.getTypicalExpenditureTracker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalTodoList(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            getTypicalExpenditureTracker(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        deleteFirstTask(expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedModel.undoTodoList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedModel.undoTodoList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 3,
      "-": 36,
      "arty9": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.CompleteTaskCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.UncompleteTaskCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.ViewTaskCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void parseCommand_addTask() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        AddTaskCommand command \u003d (AddTaskCommand) parser.parseCommand(TaskUtil.getAddTaskCommand(task));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(new AddTaskCommand(task), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "    public void parseCommand_clearInitial() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_INITIAL) instanceof ClearCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "feijunzi"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_INITIAL + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "feijunzi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void parseCommand_deleteTask() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "        DeleteTaskCommand command \u003d (DeleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "                DeleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(new DeleteTaskCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void parseCommand_editTask() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "        EditTaskCommand command \u003d (EditTaskCommand) parser.parseCommand(EditTaskCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "                + INDEX_FIRST_TASK.getOneBased() + \" \" + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(new EditTaskCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void parseCommand_viewTask() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(parser.parseCommand(ViewTaskCommand.COMMAND_WORD + \" completed\") instanceof ViewTaskCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void parseCommand_completeTask() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arty9"
        },
        "content": "        CompleteTaskCommand command \u003d (CompleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arty9"
        },
        "content": "                CompleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(new CompleteTaskCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void parseCommand_uncompleteTask() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UncompleteTaskCommand command \u003d (UncompleteTaskCommand) parser.parseCommand("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arty9"
        },
        "content": "                UncompleteTaskCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(new UncompleteTaskCommand(INDEX_FIRST_TASK), command);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 135,
      "feijunzi": 6,
      "arty9": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBookWithBobAndAmy \u003d new AddressBookBuilder().withPerson(BOB)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPerson(AMY).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeTag_nonExistentTag_addressBookUnchanged() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(BOB).withPerson(AMY).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookWithBobAndAmy.removeTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBookBuilder().withPerson(bobWithoutFriendTag)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPerson(amyWithoutFriendTag).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, addressBookWithBobAndAmy);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 131,
      "arty9": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_UNUSED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENDITURES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASKS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.CHICKEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static seedu.address.testutil.TypicalExpenditures.IPHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ESSAY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REFLECTION;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TUTORIAL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.WEBCAST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.testutil.ExpenditureTrackerBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TodoListBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTag_nonExistentTag_modelUnchanged() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList todoList \u003d new TodoListBuilder().withTask(ESSAY).withTask(REFLECTION).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureTracker expenditureTracker \u003d new ExpenditureTrackerBuilder().withExpenditure(CHICKEN)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .withExpenditure(IPHONE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, todoList, expenditureTracker, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_UNUSED));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(new ModelManager(addressBook, todoList, expenditureTracker, userPrefs), modelManager);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deleteTag_tagUsedByMultiplePersons_tagRemoved() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(AMY).withPerson(BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList todoList \u003d new TodoListBuilder().withTask(ESSAY).withTask(REFLECTION).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureTracker expenditureTracker \u003d new ExpenditureTrackerBuilder().withExpenditure(CHICKEN)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .withExpenditure(IPHONE).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "        ModelManager modelManager \u003d new ModelManager(addressBook, todoList, expenditureTracker, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.deleteTag(new Tag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "        ModelManager expectedModelManager \u003d new ModelManager(addressBook, todoList, expenditureTracker, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person amyWithoutFriendTag \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bobWithoutFriendTag \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModelManager.updatePerson(AMY, amyWithoutFriendTag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModelManager.updatePerson(BOB, bobWithoutFriendTag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModelManager, modelManager);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList todoList \u003d new TodoListBuilder().withTask(TUTORIAL).withTask(WEBCAST).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureTracker expenditureTracker \u003d new ExpenditureTrackerBuilder().withExpenditure(CHICKEN)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                .withExpenditure(IPHONE).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, todoList, expenditureTracker, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, todoList, expenditureTracker, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(modelManager.equals("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new ModelManager(differentAddressBook, todoList, expenditureTracker, userPrefs)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, todoList, expenditureTracker, userPrefs)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arty9"
        },
        "content": "        modelManager.updateFilteredTaskList(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arty9"
        },
        "content": "        modelManager.updateFilteredExpenditureList(PREDICATE_SHOW_ALL_EXPENDITURES);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, todoList, expenditureTracker,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arty9"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 9,
      "-": 101,
      "arty9": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TodoListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DATE_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.ESSAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TodoListTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final TodoList todoList \u003d new TodoList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(Collections.emptyList(), todoList.getTaskList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.resetData(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void resetData_withValidReadOnlyTodoList_replacesData() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList newData \u003d getTypicalTodoList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.resetData(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(newData, todoList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedEssay \u003d new TaskBuilder(ESSAY).withDate(VALID_TASK_DATE_ASSIGNMENT)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .withPriority(VALID_TASK_PRIORITY_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(ESSAY, editedEssay);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoListStub newData \u003d new TodoListStub(newTasks);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.resetData(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.hasTask(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void hasTask_taskNotInTodoList_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(todoList.hasTask(ESSAY));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void hasTask_taskInTodoList_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.addTask(ESSAY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(todoList.hasTask(ESSAY));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInTodoList_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.addTask(ESSAY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedEssay \u003d new TaskBuilder(ESSAY).withDate(VALID_TASK_DATE_ASSIGNMENT)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .withPriority(VALID_TASK_PRIORITY_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(todoList.hasTask(editedEssay));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.getTaskList().remove(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * A stub ReadOnlyTodoList whose tasks list can violate interface constraints."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static class TodoListStub implements ReadOnlyTodoList {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoListStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arty9"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedTodoListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REFLECTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.REVISION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.SURVEY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TodoListBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class VersionedTodoListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final ReadOnlyTodoList todoListWithReflection \u003d new TodoListBuilder().withTask(REFLECTION).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final ReadOnlyTodoList todoListWithRevision \u003d new TodoListBuilder().withTask(REVISION).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final ReadOnlyTodoList todoListWithSurvey \u003d new TodoListBuilder().withTask(SURVEY).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final ReadOnlyTodoList emptyTodoList \u003d new TodoListBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void commit_singleTodoList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList(emptyTodoList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTodoListStatus(versionedTodoList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.singletonList(emptyTodoList),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void commit_multipleTodoListPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTodoListStatus(versionedTodoList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Arrays.asList(emptyTodoList, todoListWithReflection, todoListWithRevision),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "                todoListWithRevision,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void commit_multipleTodoListPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTodoListStatus(versionedTodoList,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.singletonList(emptyTodoList),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canUndo_multipleTodoListPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(versionedTodoList.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canUndo_multipleTodoListPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(versionedTodoList.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canUndo_singleTodoList_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList(emptyTodoList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canUndo_multipleTodoListPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canRedo_multipleTodoListPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(versionedTodoList.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canRedo_multipleTodoListPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(versionedTodoList.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canRedo_singleTodoList_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList(emptyTodoList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void canRedo_multipleTodoListPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void undo_multipleTodoListPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTodoListStatus(versionedTodoList,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.singletonList(emptyTodoList),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arty9"
        },
        "content": "                todoListWithReflection,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.singletonList(todoListWithRevision));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void undo_multipleTodoListPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTodoListStatus(versionedTodoList,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Arrays.asList(todoListWithReflection, todoListWithRevision));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void undo_singleTodoList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList(emptyTodoList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertThrows(VersionedTodoList.NoUndoableStateException.class, versionedTodoList::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void undo_multipleTodoListPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertThrows(VersionedTodoList.NoUndoableStateException.class, versionedTodoList::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void redo_multipleTodoListPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTodoListStatus(versionedTodoList,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Arrays.asList(emptyTodoList, todoListWithReflection),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arty9"
        },
        "content": "                todoListWithRevision,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void redo_multipleTodoListPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arty9"
        },
        "content": "        versionedTodoList.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTodoListStatus(versionedTodoList,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.singletonList(emptyTodoList),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arty9"
        },
        "content": "                todoListWithReflection,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arty9"
        },
        "content": "                Collections.singletonList(todoListWithRevision));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void redo_singleTodoList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList(emptyTodoList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertThrows(VersionedTodoList.NoRedoableStateException.class, versionedTodoList::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void redo_multipleTodoListPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "arty9"
        },
        "content": "                emptyTodoList, todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertThrows(VersionedTodoList.NoRedoableStateException.class, versionedTodoList::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d prepareTodoList(todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList copy \u003d prepareTodoList(todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(versionedTodoList.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(versionedTodoList.equals(versionedTodoList));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList differentTodoList \u003d prepareTodoList(todoListWithRevision, todoListWithSurvey);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.equals(differentTodoList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList differentCurrentStatePointer \u003d prepareTodoList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "arty9"
        },
        "content": "                todoListWithReflection, todoListWithRevision);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "arty9"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedTodoList, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Asserts that {@code versionedTodoList} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * states before {@code versionedTodoList#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * and states after {@code versionedTodoList#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private void assertTodoListStatus(VersionedTodoList versionedTodoList,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "arty9"
        },
        "content": "                                             List\u003cReadOnlyTodoList\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "arty9"
        },
        "content": "                                             ReadOnlyTodoList expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "arty9"
        },
        "content": "                                             List\u003cReadOnlyTodoList\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(new TodoList(versionedTodoList), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "arty9"
        },
        "content": "        while (versionedTodoList.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "arty9"
        },
        "content": "            versionedTodoList.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "arty9"
        },
        "content": "        for (ReadOnlyTodoList expectedTodoList : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "arty9"
        },
        "content": "            assertEquals(expectedTodoList, new TodoList(versionedTodoList));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "arty9"
        },
        "content": "            versionedTodoList.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "arty9"
        },
        "content": "        for (ReadOnlyTodoList expectedTodoList : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "arty9"
        },
        "content": "            versionedTodoList.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "arty9"
        },
        "content": "            assertEquals(expectedTodoList, new TodoList(versionedTodoList));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(versionedTodoList.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedTodoList.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Creates and returns a {@code VersionedTodoList} with the {@code todoListStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * {@code VersionedTodoList#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private VersionedTodoList prepareTodoList(ReadOnlyTodoList... todoListStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(todoListStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "arty9"
        },
        "content": "        VersionedTodoList versionedTodoList \u003d new VersionedTodoList(todoListStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "arty9"
        },
        "content": "        for (int i \u003d 1; i \u003c todoListStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "arty9"
        },
        "content": "            versionedTodoList.resetData(todoListStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "arty9"
        },
        "content": "            versionedTodoList.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return versionedTodoList;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Shifts the {@code versionedTodoList#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedTodoList versionedTodoList, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "arty9"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "arty9"
        },
        "content": "            versionedTodoList.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditureinfo/CategoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorInvalidCategoryThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String invalidCategory \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategory));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // null category"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        //Assert.assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // invalid categories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Category.isValidCategory(\"Chicken rice\")); // do not have this category"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Category.isValidCategory(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // valid categories"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Food\")); // specified category"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditureinfo/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorInvalidDateThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // invalid categories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Date.isValidDate(\"1-1-2018\")); // only one digit for both date and month"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Date.isValidDate(\"24-1-2018\")); // only one digit for month"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Date.isValidDate(\"14-Dec-2017\")); // contains alphabetical characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Date.isValidDate(\"24-01-18\")); // only two digits for year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Date.isValidDate(\"24012018\")); // missing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // valid categories"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Date.isValidDate(\"24-01-2018\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Date.isValidDate(\"17-09-2018\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Date.isValidDate(\"14-12-2018\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditureinfo/DescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorInvalidDescriptionThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Chicken rice\")); // do not have this category"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Food\")); // specified category"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditureinfo/ExpenditureListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureListTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditureinfo/ExpenditureTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expenditureinfo/MoneyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.model.expenditureinfo;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class MoneyTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Money(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void constructorInvalidMoneyThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        String invalidMoney \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Money(invalidMoney));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void isValidMoney() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // null money"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Money.isValidMoney(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // invalid categories"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Money.isValidMoney(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Money.isValidMoney(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Money.isValidMoney(\"32-\")); // contains alphanumeric symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertFalse(Money.isValidMoney(\".3\")); // missing digits before \u0027.\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // valid categories"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Money.isValidMoney(\"12\")); // integer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Money.isValidMoney(\"+12\")); // integer with \u0027+\u0027 symbol in the front"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Money.isValidMoney(\"-12\")); // integer with \u0027-\u0027 symbol in the front"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Money.isValidMoney(\"4.\")); // incomplete floating point number without digits after \u0027.\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Money.isValidMoney(\"+4.222\")); // floating point number with \u0027+\u0027 symbol in the front"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(Money.isValidMoney(\"-4.222\")); // floating point number with \u0027-\u0027 symbol in the front"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskDateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskDate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorInvalidDateThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskDate(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TaskDate.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"16-Sep\")); // contains alphabetical characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"10-0*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"23-9\")); // less than 2 numbers for month"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"10-123\")); // more than 2 numbers for month"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"9-12\")); // less than 2 numbers for day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"322-12\")); // more than 2 numbers for day"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"1407\")); // missing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"32-09\")); // day out of maximum logical limit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"00-09\")); // day out of minimum logical limit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"15-13\")); // month out of maximum logical limit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskDate.isValidDate(\"15-00\")); // month out of minimum logical limit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"01-07\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"31-07\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"23-01\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskDate.isValidDate(\"23-12\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskModule(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorInvalidModuleThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String invalidModule \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskModule(invalidModule));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void isValidModule() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // null module code"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TaskModule.isValidModule(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"CS*207\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"CS101\")); // less than 4 numbers"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"CS12313\")); // more than 4 numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"C1112\")); // less than 2 alphabetical characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"CEG1112\")); // more than 2 alphabetical characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"IS\")); // missing alphabetical characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskModule.isValidModule(\"1112\")); // missing 2 alphabetical characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // valid module code"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskModule.isValidModule(\"CS2102\")); // all capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskModule.isValidModule(\"Cs2113\")); // start with capital letter"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskModule.isValidModule(\"cS2101\")); // mix of capital and non capital letters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskModule.isValidModule(\"cs1231\")); // no capital letters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorInvalidNameThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskName(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TaskName.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskName.isValidName(\" Quiz 3\")); // starts with whitespace"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"^$(*@\u0026\")); // non-alphanumeric characters only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"lab assignment 2\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"Assignment One\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"Milestone v1.3\")); // with non-alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"#7 Quiz\")); // starts with non-alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskName.isValidName(\"CG2028 Lab Assignment 3 for Week 4\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskPriorityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskPriorityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new TaskPriority(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void constructorInvalidPriorityThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new TaskPriority(invalidPriority));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e TaskPriority.isValidPriority(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskPriority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskPriority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskPriority.isValidPriority(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskPriority.isValidPriority(\"4\")); // contains numbers not in range"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(TaskPriority.isValidPriority(\"0\")); // contains numbers not in range"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskPriority.isValidPriority(\"1\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskPriority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(TaskPriority.isValidPriority(\"3\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_DATE_ASSIGNMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_MODULE_ASSIGNMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_NAME_ASSIGNMENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_PRIORITY_ASSIGNMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.PROJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(LAB.isSameTask(LAB));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.isSameTask(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedLab \u003d new TaskBuilder(LAB).withModule(VALID_TASK_MODULE_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.isSameTask(editedLab));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedLab \u003d new TaskBuilder(LAB).withName(VALID_TASK_NAME_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.isSameTask(editedLab));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // same name, different attribues -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedLab \u003d new TaskBuilder(LAB).withName(VALID_TASK_NAME_ASSIGNMENT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .withDate(VALID_TASK_DATE_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.isSameTask(editedLab));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // same name, same module, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedLab \u003d new TaskBuilder(LAB).withModule(VALID_TASK_MODULE_TUTORIAL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "                .withDate(VALID_TASK_DATE_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(LAB.isSameTask(editedLab));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task labCopy \u003d new TaskBuilder(LAB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(LAB.equals(labCopy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(LAB.equals(LAB));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.equals(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.equals(5));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.equals(PROJECT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedLab \u003d new TaskBuilder(LAB).withName(VALID_TASK_NAME_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.equals(editedLab));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedLab \u003d new TaskBuilder(LAB).withModule(VALID_TASK_MODULE_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.equals(editedLab));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedLab \u003d new TaskBuilder(LAB).withDate(VALID_TASK_DATE_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.equals(editedLab));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "        editedLab \u003d new TaskBuilder(LAB).withPriority(VALID_TASK_PRIORITY_ASSIGNMENT).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(LAB.equals(editedLab));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TASK_MODULE_TUTORIAL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.PROJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertFalse(uniqueTaskList.contains(LAB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(uniqueTaskList.contains(LAB));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedLab \u003d new TaskBuilder(LAB).withModule(VALID_TASK_MODULE_TUTORIAL).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedLab));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTask(null, LAB);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTask(LAB, null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTask(LAB, LAB);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTask(LAB, LAB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedUniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Task editedLab \u003d new TaskBuilder(LAB).withModule(VALID_TASK_MODULE_TUTORIAL).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTask(LAB, editedLab);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedUniqueTaskList.add(editedLab);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTask(LAB, PROJECT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedUniqueTaskList.add(PROJECT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(PROJECT);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTask(LAB, PROJECT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.remove(null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(TaskNotFoundException.class);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.remove(LAB);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.remove(LAB);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTasks((UniqueTaskList) null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedUniqueTaskList.add(PROJECT);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTasks((List\u003cTask\u003e) null);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.add(LAB);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "arty9"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(PROJECT);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "arty9"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "arty9"
        },
        "content": "        expectedUniqueTaskList.add(PROJECT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "arty9"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTasks \u003d Arrays.asList(LAB, LAB);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(DuplicateTaskException.class);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.setTasks(listWithDuplicateTasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "arty9"
        },
        "content": "        uniqueTaskList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTodoList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.commons.events.model.ExpenditureTrackerChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.events.model.TodoListChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ExpenditureTracker;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ReadOnlyExpenditureTracker;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.ReadOnlyTodoList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        XmlExpenditureTrackerStorage expenditureTrackerStorage \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new XmlExpenditureTrackerStorage(getTempFilePath(\"et\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        XmlTodoListStorage todoListStorage \u003d new XmlTodoListStorage(getTempFilePath(\"td\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, expenditureTrackerStorage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                todoListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void handleAddressBookChangedEventExceptionThrownEventRaised() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new XmlExpenditureTrackerStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new XmlTodoListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * {@link XmlExpenditureTrackerStorage} class."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * More extensive testing of UserPref saving/reading is done in {@link XmlExpenditureTrackerStorageTest} class."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //public void expenditureTrackerReadSave() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //    ExpenditureTracker original \u003d getTypicalExpenditureTracker();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //    storageManager.saveExpenditureTracker(original);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //    ReadOnlyExpenditureTracker retrieved \u003d storageManager.readExpenditureTracker().get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //    assertEquals(original, new ExpenditureTracker(retrieved));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void getExpenditureTrackerFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertNotNull(storageManager.getExpenditureTrackerFilePath());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public void handleExpenditureTrackerChangedEventExceptionThrownEventRaised() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new XmlExpenditureTrackerStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new XmlTodoListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        storage.handleExpenditureTrackerChangedEvent(new ExpenditureTrackerChangedEvent(new ExpenditureTracker()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void todoListReadSave() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arty9"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arty9"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "arty9"
        },
        "content": "         * {@link XmlTodoListStorage} class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "arty9"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlTodoListStorageTest} class."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "arty9"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList original \u003d getTypicalTodoList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "arty9"
        },
        "content": "        storageManager.saveTodoList(original);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "arty9"
        },
        "content": "        ReadOnlyTodoList retrieved \u003d storageManager.readTodoList().get();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(original, new TodoList(retrieved));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void getTodoListFilePath() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertNotNull(storageManager.getTodoListFilePath());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void handleTodoListChangedEventExceptionThrownEventRaised() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "arty9"
        },
        "content": "        // Create a StorageManager while injecting a stub that throws an exception when the save method is called"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "arty9"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                new XmlExpenditureTrackerStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new XmlTodoListStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "arty9"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "arty9"
        },
        "content": "        storage.handleTodoListChangedEvent(new TodoListChangedEvent(new TodoList()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    class XmlExpenditureTrackerStorageExceptionThrowingStub extends XmlExpenditureTrackerStorage {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        public XmlExpenditureTrackerStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        public void saveExpenditureTracker(ReadOnlyExpenditureTracker expenditureTracker,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "                                           Path filePath) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "arty9"
        },
        "content": "    class XmlTodoListStorageExceptionThrowingStub extends XmlTodoListStorage {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public XmlTodoListStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "arty9"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "arty9"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "arty9"
        },
        "content": "        public void saveTodoList(ReadOnlyTodoList todoList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "arty9"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 55,
      "-": 100,
      "arty9": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableTodoListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class XmlSerializableTodoListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableTodoListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasksTodoList.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTaskTodoList.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTaskTodoList.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        XmlSerializableTodoList dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_TASKS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "                XmlSerializableTodoList.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList todoListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList typicalTasksTodoList \u003d TypicalTasks.getTypicalTodoList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        assertEquals(todoListFromFile, typicalTasksTodoList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        XmlSerializableTodoList dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TASK_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "                XmlSerializableTodoList.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        XmlSerializableTodoList dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_TASK_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "                XmlSerializableTodoList.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        thrown.expectMessage(XmlSerializableTodoList.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskModule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskPriority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": " * A utility class to help with building EditTaskDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setModule(task.getModule());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setDate(task.getDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskName} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setName(new TaskName(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskModule} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptorBuilder withModule(String module) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setModule(new TaskModule(module));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskDate} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setDate(new TaskDate(date));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskPriority} of the {@code EditTaskDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.setPriority(new TaskPriority(priority));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenditureBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Category;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Money;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * A utility class to help with building Expenditure objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Chicken rice\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"Food\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"01-01-2018\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String DEFAULT_MONEY \u003d \"10\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private Money money;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        money \u003d new Money(DEFAULT_MONEY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Initializes the ExpenditureBuilder with the data of {@code expenditureToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureBuilder(Expenditure expenditureToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        description \u003d expenditureToCopy.getDescription();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        category \u003d expenditureToCopy.getCategory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        date \u003d expenditureToCopy.getDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        money \u003d expenditureToCopy.getMoney();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Sets the {@code Description} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Sets the {@code Category} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Sets the {@code Date} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureBuilder withDate(String date) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Sets the {@code Money} of the {@code Expenditure} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureBuilder withMoney(String money) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.money \u003d new Money(money);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public Expenditure build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new Expenditure(description, date, money, category);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenditureTrackerBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ExpenditureTracker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * A utility class to help with building ExpenditureTracker objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " *     {@code ExpenditureTracker et \u003d new ExpenditureTrackerBuilder().withExpenditure(\"Food\", \"Drink\").build();}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class ExpenditureTrackerBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private ExpenditureTracker expenditureTracker;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTrackerBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureTracker \u003d new ExpenditureTracker();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTrackerBuilder(ExpenditureTracker expenditureTracker) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        this.expenditureTracker \u003d expenditureTracker;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTrackerBuilder withExpenditure(Expenditure expenditure) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        expenditureTracker.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public ExpenditureTracker build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return expenditureTracker;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskModule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.TaskPriority;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": " * A utility class to help with building Task objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Milestone\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String DEFAULT_MODULE \u003d \"CS2113\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"31-12\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"3\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final boolean DEFAULT_STATUS \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private TaskName name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private TaskModule module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private TaskDate date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private TaskPriority priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private boolean status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "        name \u003d new TaskName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        module \u003d new TaskModule(DEFAULT_MODULE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        date \u003d new TaskDate(DEFAULT_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        priority \u003d new TaskPriority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        status \u003d DEFAULT_STATUS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Initializes the TaskBuilder with the data of {@code taskToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "        module \u003d taskToCopy.getModule();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        date \u003d taskToCopy.getDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        status \u003d taskToCopy.getComplete();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskName} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.name \u003d new TaskName(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskModule} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskBuilder withModule(String module) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.module \u003d new TaskModule(module);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskDate} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskBuilder withDate(String date) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.date \u003d new TaskDate(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Sets the {@code TaskPriority} of the {@code Task} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.priority \u003d new TaskPriority(priority);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return new Task(name, module, date, priority, status);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.AddTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.logic.commands.EditTaskCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": " * A utility class for Task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns an add command string for adding the {@code task}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static String getAddTaskCommand(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return AddTaskCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns the part of command string for the given {@code task}\u0027s details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "        sb.append(PREFIX_TASK + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "        sb.append(PREFIX_MODULE + task.getModule().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "        sb.append(PREFIX_DATE + task.getDate().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        sb.append(PREFIX_PRIORITY + task.getPriority().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_TASK).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.getModule().ifPresent(module -\u003e sb.append(PREFIX_MODULE).append(module.value).append(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.value).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "        descriptor.getPriority().ifPresent(priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.value).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TodoListBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": " * A utility class to help with building Todolist objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": " *     {@code TodoList td \u003d new TodoListBuilder().withTask(\"Tutorial\", \"9\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TodoListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private TodoList todoList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList \u003d new TodoList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoListBuilder(TodoList todoList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "        this.todoList \u003d todoList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Adds a new {@code Task} to the {@code TodoList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoListBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": "        todoList.addTask(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public TodoList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenditures.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "//@@author SHININGGGG"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.ExpenditureTracker;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "import seedu.address.model.expenditureinfo.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " * A utility class containing a list of {@code Expenditure} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "public class TypicalExpenditures {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Expenditure CHICKEN \u003d new ExpenditureBuilder().withDescription(\"Chicken rice\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .withCategory(\"Food\").withDate(\"01-01-2018\").withMoney(\"12\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Expenditure HM \u003d new ExpenditureBuilder().withDescription(\"HM hoodie\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .withCategory(\"Clothing\").withDate(\"01-01-2018\").withMoney(\"100\").build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Expenditure IPHONE \u003d new ExpenditureBuilder().withDescription(\"iPhone\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .withCategory(\"Electronics\").withDate(\"03-02-2018\").withMoney(\"2000\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Expenditure NIKE \u003d new ExpenditureBuilder().withDescription(\"Nike shoes\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .withCategory(\"Shopping\").withDate(\"06-12-2018\").withMoney(\"199\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Expenditure COKE \u003d new ExpenditureBuilder().withDescription(\"Coke\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .withCategory(\"Drink\").withDate(\"05-12-2018\").withMoney(\"1\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Expenditure AIRCON \u003d new ExpenditureBuilder().withDescription(\"Air conditioner\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .withCategory(\"Furniture\").withDate(\"04-03-2017\").withMoney(\"700\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final Expenditure SPEAKER \u003d new ExpenditureBuilder().withDescription(\"Bose speaker\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            .withCategory(\"Electronics\").withDate(\"09-10-2018\").withMoney(\"400\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    private TypicalExpenditures() {} // prevents instantiation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     * Returns an {@code ExpenditureTracker} with all the typical expenditures."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static ExpenditureTracker getTypicalExpenditureTracker() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        ExpenditureTracker et \u003d new ExpenditureTracker();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        for (Expenditure expenditure : getTypicalExpenditures()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "            et.addExpenditure(expenditure);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return et;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    public static List\u003cExpenditure\u003e getTypicalExpenditures() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CHICKEN, HM, IPHONE, NIKE, COKE, AIRCON, SPEAKER));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "SHININGGGG"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "SHININGGGG": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "arty9": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arty9"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arty9"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.TodoList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arty9"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arty9"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arty9"
        },
        "content": " * A utility class containing a list of {@code Task} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arty9"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arty9"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task ASSIGNMENT \u003d new TaskBuilder().withName(\"Assignment 2\").withModule(\"CG2027\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"16-10\").withPriority(\"2\").build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task LAB \u003d new TaskBuilder().withName(\"Lab 1\").withModule(\"CG2028\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"30-08\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task PROJECT \u003d new TaskBuilder().withName(\"Crowdfunding Website\").withModule(\"CS2102\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"11-11\").withPriority(\"1\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task QUIZ \u003d new TaskBuilder().withName(\"Quiz 9\").withModule(\"CS1231\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"14-10\").withPriority(\"1\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task TUTORIAL \u003d new TaskBuilder().withName(\"Tutorial 5\").withModule(\"CS2040\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"26-09\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task WEBCAST \u003d new TaskBuilder().withName(\"Lecture 3\").withModule(\"CS2113\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"12-10\").withPriority(\"2\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arty9"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task ESSAY \u003d new TaskBuilder().withName(\"Essay 1\").withModule(\"CG1111\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"12-12\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task REFLECTION \u003d new TaskBuilder().withName(\"CA1 Reflection\").withModule(\"CS2101\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"10-10\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task REVISION \u003d new TaskBuilder().withName(\"C Revision\").withModule(\"CS1010\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"14-11\").withPriority(\"1\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final Task SURVEY \u003d new TaskBuilder().withName(\"Lecture Survey\").withModule(\"CS2113\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arty9"
        },
        "content": "            .withDate(\"17-10\").withPriority(\"2\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arty9"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arty9"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arty9"
        },
        "content": "     * Returns an {@code TodoList} with all the typical tasks."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arty9"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static TodoList getTypicalTodoList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arty9"
        },
        "content": "        TodoList td \u003d new TodoList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arty9"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arty9"
        },
        "content": "            td.addTask(task);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arty9"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return td;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arty9"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arty9"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arty9"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ASSIGNMENT, LAB, PROJECT, QUIZ, TUTORIAL, WEBCAST));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arty9"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arty9"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arty9": 56
    }
  }
]
